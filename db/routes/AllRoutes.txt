Rails.application.routes.draw do
  root 'welcome#index'
  # The priority is based upon order of creation: first created -> highest priority.
  # See how all your routes lay out with "rake routes".

  # You can have the root of your site routed with "root"
  # root 'welcome#index'

  # Example of regular route:
  #   get 'products/:id' => 'catalog#view'

  # Example of named route that can be invoked with purchase_url(id: product.id)
  #   get 'products/:id/purchase' => 'catalog#purchase', as: :purchase

  # Example resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Example resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Example resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Example resource route with more complex sub-resources:
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', on: :collection
  #     end
  #   end

  # Example resource route with concerns:
  #   concern :toggleable do
  #     post 'toggle'
  #   end
  #   resources :posts, concerns: :toggleable
  #   resources :photos, concerns: :toggleable

  # Example resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end
end
if Clearance.configuration.routes_enabled?
  Rails.application.routes.draw do
    resources :passwords,
      controller: 'clearance/passwords',
      only: [:create, :new]

    resource :session,
      controller: 'clearance/sessions',
      only: [:create]

    resources :users,
      controller: 'clearance/users',
      only: Clearance.configuration.user_actions do
        resource :password,
          controller: 'clearance/passwords',
          only: [:edit, :update]
      end

    get '/sign_in' => 'clearance/sessions#new', as: 'sign_in'
    delete '/sign_out' => 'clearance/sessions#destroy', as: 'sign_out'

    if Clearance.configuration.allow_sign_up?
      get '/sign_up' => 'clearance/users#new', as: 'sign_up'
    end
  end
end
Spree::Core::Engine.add_routes do
  scope '(:locale)', locale: /#{Spree.available_locales.join('|')}/, defaults: { locale: nil } do
    root to: 'home#index'

    resources :products, only: [:index, :show]
    get '/products/:id/related', to: 'products#related'
    # route globbing for pretty nested taxon and product paths
    get '/t/*id', to: 'taxons#show', as: :nested_taxons
    get '/product_carousel/:id', to: 'taxons#product_carousel'

    # non-restful checkout stuff
    patch '/checkout/update/:state', to: 'checkout#update', as: :update_checkout
    get '/checkout/:state', to: 'checkout#edit', as: :checkout_state
    get '/checkout', to: 'checkout#edit', as: :checkout

    resources :orders, except: [:index, :new, :create, :destroy]

    resources :addresses, except: [:show]

    get '/cart', to: 'orders#edit', as: :cart
    patch '/cart', to: 'orders#update', as: :update_cart
    put '/cart/empty', to: 'orders#empty', as: :empty_cart

    get '/content/cvv', to: 'content#cvv', as: :cvv
    get '/content/test', to: 'content#test'
    get '/cart_link', to: 'store#cart_link', as: :cart_link
    get '/account_link', to: 'store#account_link', as: :account_link

    get '/locales', to: 'locale#index', as: :locales
    get '/locale/set', to: 'locale#set', as: :set_locale
    get '/currency/set', to: 'currency#set', as: :set_currency

    get '/api_tokens', to: 'store#api_tokens'
    post '/ensure_cart', to: 'store#ensure_cart'
  end
end
GotomeetingExample::Application.routes.draw do
  
  resources :connect do
    collection do 
      get :confirm
    end
  end
  
  resources :meetings
  
  root :to => 'meetings#index'
  
  # The priority is based upon order of creation:
  # first created -> highest priority.

  # Sample of regular route:
  #   match 'products/:id' => 'catalog#view'
  # Keep in mind you can assign values other than :controller and :action

  # Sample of named route:
  #   match 'products/:id/purchase' => 'catalog#purchase', :as => :purchase
  # This route can be invoked with purchase_url(:id => product.id)

  # Sample resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Sample resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Sample resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Sample resource route with more complex sub-resources
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', :on => :collection
  #     end
  #   end

  # Sample resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end

  # You can have the root of your site routed with "root"
  # just remember to delete public/index.html.
  # root :to => 'welcome#index'

  # See how all your routes lay out with "rake routes"

  # This is a legacy wild controller route that's not recommended for RESTful applications.
  # Note: This route will make all actions in every controller accessible via GET requests.
  # match ':controller(/:action(/:id(.:format)))'
end
WickedPdfGenerate::Application.routes.draw do


  match "/posts/download_pdf(.:format)" => "posts#all_posts", :method => :get, :as=>:all_posts

  resources :posts do
    collection do
      get :all_posts
    end
  end

  devise_for :users

  # The priority is based upon order of creation:
  # first created -> highest priority.

  # Sample of regular route:
  #   match 'products/:id' => 'catalog#view'
  # Keep in mind you can assign values other than :controller and :action

  # Sample of named route:
  #   match 'products/:id/purchase' => 'catalog#purchase', :as => :purchase
  # This route can be invoked with purchase_url(:id => product.id)

  # Sample resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Sample resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  devise_for :users do
    get "sign_out", :to => "devise/sessions#destroy"
  end

  # Sample resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Sample resource route with more complex sub-resources
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', :on => :collection
  #     end
  #   end

  # Sample resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end

  # You can have the root of your site routed with "root"
  # just remember to delete public/index.html.
   root :to => 'posts#index'

  # See how all your routes lay out with "rake routes"

  # This is a legacy wild controller route that's not recommended for RESTful applications.
  # Note: This route will make all actions in every controller accessible via GET requests.
  # match ':controller(/:action(/:id))(.:format)'
end
Foundation::Rails::Engine.routes.draw do
  root :to => "styleguide#show"
endRails4::Application.routes.draw do
  resources :users
  resources :posts do
    member do
      get 'renderer'
    end
  end
  # The priority is based upon order of creation: first created -> highest priority.
  # See how all your routes lay out with "rake routes".

  # You can have the root of your site routed with "root"
  # root 'welcome#index'

  # Example of regular route:
  #   get 'products/:id' => 'catalog#view'

  # Example of named route that can be invoked with purchase_url(id: product.id)
  #   get 'products/:id/purchase' => 'catalog#purchase', as: :purchase

  # Example resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Example resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Example resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Example resource route with more complex sub-resources:
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', on: :collection
  #     end
  #   end

  # Example resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end
end
Rails.application.routes.draw do
  devise_for :admin_users, ActiveAdmin::Devise.config
  ActiveAdmin.routes(self)
  
  scope '/api' do
    resources :drinks
  end

  get '*path', to: "application#fallback_index_html", constraints: ->(request) do
    !request.xhr? && request.format.html?
  end
end
Rails.application.routes.draw do
  # The priority is based upon order of creation: first created -> highest priority.
  # See how all your routes lay out with "rake routes".

  # You can have the root of your site routed with "root"
  root 'movies#index'
  get 'search' => 'movies#search'
  # Example of regular route:
  #   get 'products/:id' => 'catalog#view'

  # Example of named route that can be invoked with purchase_url(id: product.id)
  #   get 'products/:id/purchase' => 'catalog#purchase', as: :purchase

  # Example resource route (maps HTTP verbs to controller actions automatically):
  resources :movies

  # Example resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Example resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Example resource route with more complex sub-resources:
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', on: :collection
  #     end
  #   end

  # Example resource route with concerns:
  #   concern :toggleable do
  #     post 'toggle'
  #   end
  #   resources :posts, concerns: :toggleable
  #   resources :photos, concerns: :toggleable

  # Example resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end
end
BulSearch::Application.routes.draw do
  root "easy#home"

  #catalog
  blacklight_for :catalog
  post 'catalog/sms' => 'catalog#sms'
  Blacklight::Marc.add_routes(self)
  get 'catalog/:id/ourl' => 'catalog#ourl_service', as: :catalog_service_ourl
  devise_for :users, :controllers => {omniauth_callbacks: 'omniauth_callbacks'},
      :skip => [:sessions]

  # bookplate_list
  get 'catalog/bookplate/:code' => 'catalog#bookplate'

  #easySearch
  get 'about' => 'easy#about', as: :easy_about
  get "easy/search"
  get 'easy/' => 'easy#home', as: :easyS
  get 'easy/search'

  #libweb
  get 'libweb/' => 'libweb#search', as: :lib_web

  # Browse (aka Virtual Shelf)
  get 'browse/' => 'browse#random', as: :browse_random
  get 'browse/about' => 'browse#about', as: :browse_about
  get 'browse/:id' => 'browse#from_item', as: :browse_item

  # Course Reserves
  get 'reserves/search' => 'reserves#search', as: :reserves_search
  get 'reserves/:classid/:classnumber' => 'reserves#show', as: :reserves_show
  get 'reserves/' => 'reserves#search'

  # Stub controller to test the Availability Service
  get 'availability/test_auth' => 'availability#test_auth'
  get 'availability/fake/:id' => 'availability#fake_one'
  post 'availability/fake/' => 'availability#fake_many'
  get 'availability/forward/:id' => 'availability#forward_one'
  post 'availability/forward/' => 'availability#forward_many'

  # Patron controller
  post 'patron/checkouts' => 'patron#checkouts'

  # API controller
  get 'api/items/ids' => 'api#items_ids', as: :api_items_ids
  get 'api/items/by_location' => 'api#items_by_location'
  get 'api/items/nearby' => 'api#items_nearby'
  get 'api/items/shelf_item/:id' => 'api#shelf_item'
  get 'api/items/shelf_items' => 'api#shelf_items'

  # Museum integration
  get 'museum/thumbnail/:id' => 'museum#thumbnail', as: :museum_thumbnail

  # Stats
  get 'stats/eds' => 'stats#eds'
  get 'stats/server' => 'stats#server'
  get 'stats/solr-master' => 'stats#solr_master'

  # Collection Ecosystem Project
  get 'dashboard/new' => 'dashboard#new', as: :dashboard_new
  get 'dashboard/copy/:id' => 'dashboard#copy', as: :dashboard_copy
  get 'dashboard/:id/edit' => 'dashboard#edit', as: :dashboard_edit
  post 'dashboard/:id/edit' => 'dashboard#save', as: :dashboard_save
  post 'dashboard/:id/delete' => 'dashboard#delete', as: :dashboard_delete

  get 'dashboard/:id/download/acq_vs_chk' => 'dashboard#download_acquired_vs_checkedout', as: :dashboard_download_acq_vs_chk
  get 'dashboard/:id/details' => 'dashboard#details', as: :dashboard_details
  get 'dashboard/:id' => 'dashboard#show', as: :dashboard_show
  get 'dashboard/' => 'dashboard#index', as: :dashboard_index

  # Hay Flags Project
  get 'pullslips/:id/print' => 'pullslips#print', as: :pullslips_print
  get 'pullslips/:id' => 'pullslips#show', as: :pullslips_show
  get 'pullslips' => 'pullslips#index', as: :pullslips_index
  get 'hay/flags', to: redirect('/pullslips')

  # Best Bets editor
  get 'bestbets/:id/edit' => 'best_bets#edit', as: :best_bets_edit
  post 'bestbets/:id/save' => 'best_bets#save', as: :best_bets_save
  post 'bestbets/:id/delete' => 'best_bets#delete', as: :best_bets_delete
  get 'bestbets/' => 'best_bets#index', as: :best_bets_index

  # Legacy
  get 'Search/Results' => "legacy#search_results"
  get 'Search' => "legacy#search"

  # This is a duplicate route from the one that gem blacklight_advanced_search
  # adds on its own (https://github.com/projectblacklight/blacklight_advanced_search/blob/release-5.x/config/routes.rb)
  # We add it here so that it precedes the catch all route and it is recognized.
  # Newer versions of the gem handle this better.
  get 'advanced' => 'advanced#index'

  # Catch-all route
  if Rails.env.production?
    get '*path' => "easy#not_found"
  end
end
Demo::Application.routes.draw do
  apipie

  scope :module => :v1, :path => '/api/v1' do
    resources :users, except: [:new, :edit] do
      resources :tweets, except: [:new, :edit]
    end
  end


  scope :module => :v2, :path => '/api/v2' do
    resources :users, except: [:new, :edit] do
      resources :tweets, except: [:new, :edit]
    end
  end
end
Rails.application.routes.draw do
  resource :ping, only: [:show]
  root to: 'v1/cert_bundles#index'
  namespace :v1 do
    resources :cert_bundles, only: [:create, :index, :show, :delete]
  end
end
Rails.application.routes.draw do

  root 'home#index'

  devise_for :users, module: 'api', path: 'api/users', defaults: {format: 'json'}

  namespace :api, defaults: {format: 'json'} do
    resources :meals, only: [:index, :create, :destroy, :show, :update]
    resources :calories_daily, only: [:index]
  end

  get 'sign_up' => 'home#index'
  get 'login' => 'home#index'
  get 'dashboard' => 'home#index'
  get 'meals/new' => 'home#index'
  get 'meals/:id/edit' => 'home#index'
  get 'settings' => 'home#index'

  # The priority is based upon order of creation: first created -> highest priority.
  # See how all your routes lay out with "rake routes".

  # Example of regular route:
  #   get 'products/:id' => 'catalog#view'

  # Example of named route that can be invoked with purchase_url(id: product.id)
  #   get 'products/:id/purchase' => 'catalog#purchase', as: :purchase

  # Example resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Example resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Example resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Example resource route with more complex sub-resources:
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', on: :collection
  #     end
  #   end

  # Example resource route with concerns:
  #   concern :toggleable do
  #     post 'toggle'
  #   end
  #   resources :posts, concerns: :toggleable
  #   resources :photos, concerns: :toggleable

  # Example resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end
end
# frozen_string_literal: true
Hyrax::Engine.routes.draw do
  # Downloads controller route
  resources :homepage, only: 'index'

  # Route the home page as the root
  root to: 'homepage#index'

  # Handle routes that existed in Hyrax < 7
  #   e.g. https://scholarsphere.psu.edu/files/gm80hv36p
  get '/files/:id', to: redirect('/concern/generic_works/%{id}')

  resources :downloads, only: :show

  # ResourceSync routes
  get '/.well-known/resourcesync' => 'resource_sync#source_description', as: :source_description
  get '/capabilitylist' => 'resource_sync#capability_list', as: :capability_list
  get '/resourcelist' => 'resource_sync#resource_list', as: :resource_list
  get '/changelist' => 'resource_sync#change_list', as: :change_list

  delete '/uploads/:id', to: 'uploads#destroy', as: :uploaded_file
  post '/uploads', to: 'uploads#create'
  # This is a hack that is required because the rails form the uploader is on
  # sets the _method parameter to patch when the work already exists.
  # Eventually it would be good to update the javascript so that it doesn't
  # submit the form, just the file and always uses POST.
  patch '/uploads', to: 'uploads#create'

  match 'batch_edits/clear' => 'batch_edits#clear', as: :batch_edits_clear, via: [:get, :post]
  resources :batch_edits, only: [:index] do
    member do
      delete :destroy
    end
    collection do
      get :index
      get :edit
      put :update
      delete :clear
      put :state
      put :all
    end
  end
  match 'batch_edits/:id' => 'batch_edits#add', :via => :put
  match 'batch_edits' => 'batch_edits#destroy_collection', :via => :delete

  resources :batch_uploads, only: [:new, :create], controller: 'batch_uploads'

  resources :collections, only: :show do # public landing show page
    member do
      get 'page/:page', action: :index
      get 'facet/:id', action: :facet, as: :dashboard_facet
      get :files
    end
  end

  # File Set routes
  scope :concern do
    resources :file_sets, only: [] do
      resource :fixity_checks, only: [:create]
      member do
        get 'stats'
      end
    end
  end

  resources :files, only: [] do
    member do
      get :citation, controller: :citations, action: :file, as: :citations
      get :stats, controller: :stats, action: :file, as: :stats
    end
  end

  # Generic work routes
  resources :works, only: [] do
    member do
      resources :transfers, as: :work_transfers, only: [:new, :create]
      resource :featured_work, only: [:create, :destroy]
      get :citation, controller: :citations, action: :work, as: :citations
      get :stats, controller: :stats, action: :work, as: :stats
      post 'trophy' => 'trophies#toggle_trophy' # used by hyrax/trophy.js
    end
  end

  # Depositors routes for proxy deposit
  post 'users/:user_id/depositors' => 'depositors#create', as: 'user_depositors'
  delete 'users/:user_id/depositors/:id' => 'depositors#destroy', as: 'user_depositor'
  get 'proxies' => 'depositors#index', as: 'depositors'

  resources :featured_work_lists, path: 'featured_works', only: :create

  # Messages
  resources :notifications, only: [:destroy, :index] do
    collection do
      delete 'delete_all'
    end
  end
  if Hyrax.config.realtime_notifications?
    namespace :notifications do
      # WebSocket for notifications
      mount ActionCable.server => 'endpoint', as: :endpoint
    end
  end

  # User profile
  resources :users, only: [:index, :show] do
    resources :operations, only: [:index, :show], controller: 'operations'
  end

  # Dashboard page
  resource :dashboard, controller: 'dashboard', only: [:show]
  resources :dashboard, only: [] do
    collection do
      get 'activity', action: :activity, as: :dashboard_activity
      resources :transfers, only: [:index, :destroy] do
        member do
          put 'accept'
          put 'reject'
        end
      end
    end
  end

  namespace :dashboard do
    resources :works, only: :index
    get 'works/facet/:id',  controller: 'works', action: :facet, as: 'works_facet'
    resources :collections do # Dashboard -> All Collections and CRUD
      member do
        get 'page/:page', action: :index
        get 'facet/:id', action: :facet, as: :dashboard_facet
        get :files
      end
      collection do
        put '', action: :update
        put :remove_member
      end
    end
    post 'collections/:id', controller: 'collection_members', action: :update_members
    post 'collections/:child_id/within', controller: 'nest_collections', action: 'create_relationship_within', as: 'create_nest_collection_within'
    get 'collections/:parent_id/under', controller: 'nest_collections', action: 'create_collection_under', as: 'create_subcollection_under'
    post 'collections/:parent_id/under', controller: 'nest_collections', action: 'create_relationship_under', as: 'create_nest_collection_under'
    post 'collections/:child_id/remove_parent/:parent_id', controller: 'nest_collections', action: 'remove_relationship_above', as: 'remove_parent_relationship_above'
    post 'collections/:parent_id/remove_child/:child_id', controller: 'nest_collections', action: 'remove_relationship_under', as: 'remove_child_relationship_under'
    resources :profiles, only: [:show, :edit, :update]
  end

  # Routes for user's works, collections, highlights and shares
  # Preserves existing behavior by maintaining paths to /dashboard
  # Routes actions to the various My controllers
  scope :dashboard do
    namespace :my do
      resources :works, only: :index
      get '/works/page/:page', controller: 'works', action: :index
      get 'works/facet/:id', controller: 'works', action: :facet, as: 'dashboard_works_facet'
      resources :collections, only: :index # Dashboard -> My Collections only
      get '/collections/page/:page',  controller: 'collections', action: :index
      get '/collections/facet/:id',   controller: 'my/collections', action: :facet, as: 'dashboard_collections_facet'
    end

    get '/highlights',            controller: 'my/highlights', action: :index, as: 'dashboard_highlights'
    get '/highlights/page/:page', controller: 'my/highlights', action: :index
    get '/highlights/facet/:id',  controller: 'my/highlights', action: :facet, as: 'dashboard_highlights_facet'

    get '/shares',            controller: 'my/shares', action: :index, as: 'dashboard_shares'
    get '/shares/page/:page', controller: 'my/shares', action: :index
    get '/shares/facet/:id',  controller: 'my/shares', action: :facet, as: 'dashboard_shares_facet'
    scope :collections do
      get '/permission_template/new' => 'admin/permission_templates#new', as: :new_dashboard_collection_permission_template
      get '/:collection_id/permission_template/edit' => 'admin/permission_templates#edit', as: :edit_dashboard_collection_permission_template
      get '/:collection_id/permission_template' => 'admin/permission_templates#show', as: :dashboard_collection_permission_template
      patch '/:collection_id/permission_template' => 'admin/permission_templates#update'
      put '/:collection_id/permission_template' => 'admin/permission_templates#update'
      delete '/:collection_id/permission_template' => 'admin/permission_templates#destroy'
      post '/:collection_id/permission_template' => 'admin/permission_templates#create'
    end
  end

  # Contact form routes
  post 'contact' => 'contact_form#create', as: :contact_form_index
  get 'contact' => 'contact_form#new'

  get 'single_use_link/show/:id' => 'single_use_links_viewer#show', as: :show_single_use_link
  get 'single_use_link/download/:id' => 'single_use_links_viewer#download', as: :download_single_use_link
  post 'single_use_link/generate_download/:id' => 'single_use_links#create_download', as: :generate_download_single_use_link
  post 'single_use_link/generate_show/:id' => 'single_use_links#create_show', as: :generate_show_single_use_link
  get 'single_use_link/generated/:id' => 'single_use_links#index', as: :generated_single_use_links
  delete 'single_use_link/:id/delete/:link_id' => 'single_use_links#destroy', as: :delete_single_use_link

  resources :embargoes, controller: 'embargoes', only: [:index, :edit, :destroy] do
    collection do
      patch :update
    end
  end

  resources :leases, controller: 'leases', only: [:index, :edit, :destroy] do
    collection do
      patch :update
    end
  end

  # Permissions routes
  scope :concern do
    resources :permissions, only: [] do
      member do
        get :confirm
        post :copy
        get :confirm_access
        post :copy_access
      end
    end
  end

  # API routes
  if Hyrax.config.arkivo_api?
    namespace :api do
      if defined?(Hyrax::ArkivoConstraint)
        constraints Hyrax::ArkivoConstraint do
          resources :items, except: [:index, :edit, :new], defaults: { format: :json }
        end
      end

      get 'zotero' => 'zotero#initiate', as: :zotero_initiate
      get 'zotero/callback' => 'zotero#callback', as: :zotero_callback
    end
  end

  namespace :admin do
    resources :admin_sets do
      member do
        get :files
      end
      resource :permission_template
    end
    resources :users, only: [:index]
    resources :permission_template_accesses, only: :destroy
    resource 'stats', only: [:show]
    resources :features, only: [:index] do
      resources :strategies, only: [:update, :destroy]
    end
    resources :workflows
    resources :workflow_roles
    resource :appearance
    resources :collection_types, except: :show
    resources :collection_type_participants, only: [:create, :destroy]
  end

  resources :content_blocks, only: [] do
    member do
      patch :update
    end
    collection do
      get :edit
    end
  end
  resources :pages, only: [] do
    member do
      patch :update
    end
    collection do
      get :edit
    end
  end
  get 'about' => 'pages#show', key: 'about'
  get 'help' => 'pages#show', key: 'help'
  get 'terms' => 'pages#show', key: 'terms'
  get 'agreement' => 'pages#show', key: 'agreement'

  # Static page routes
  %w[zotero mendeley].each do |action|
    get action, controller: 'static', action: action, as: action
  end
end
Rails.application.routes.draw do
  devise_for :admin_users, ActiveAdmin::Devise.config
  ActiveAdmin.routes(self)
  get '/webhooks/receive', to: 'message#create'
end
# frozen_string_literal: true

Rails.application.routes.draw do
  scope "rails/conductor/full_request_logger/", module: "rails/conductor/full_request_logger" do
    resources :request_logs, only: %i[ index create show ], as: :rails_conductor_request_logs
  end
end
Rails.application.routes.draw do
  resources :songs
  resources :users
  resources :saved_songs
  post '/songs/:id', to: 'songs#create'
  post '/fakelogin', to: 'auth#fake_create'

end
CustomMailDelivery::Application.routes.draw do
  # The priority is based upon order of creation:
  # first created -> highest priority.

  # Sample of regular route:
  #   match 'products/:id' => 'catalog#view'
  # Keep in mind you can assign values other than :controller and :action

  # Sample of named route:
  #   match 'products/:id/purchase' => 'catalog#purchase', :as => :purchase
  # This route can be invoked with purchase_url(:id => product.id)

  # Sample resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Sample resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Sample resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Sample resource route with more complex sub-resources
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', :on => :collection
  #     end
  #   end

  # Sample resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end

  # You can have the root of your site routed with "root"
  # just remember to delete public/index.html.
  # root :to => 'welcome#index'

  # See how all your routes lay out with "rake routes"

  # This is a legacy wild controller route that's not recommended for RESTful applications.
  # Note: This route will make all actions in every controller accessible via GET requests.
  # match ':controller(/:action(/:id(.:format)))'
end
Rails.application.routes.draw do
  mount MagicLamp::Genie, at: "/magic_lamp" if defined?(MagicLamp)

  resources :tests, defaults: { format: :json }, only: [ :index ]
  resources :dashboards, only: [ :show ] do
    get 'results', defaults: {format: :json}
  end
  resources :servers, only: [ :show, :create, :update ] do
    resources :test_runs, defaults: { format: :json }, only: [ :show, :create ] do
      post 'cancel', default: { format: :json }
    end
    get 'conformance', defaults: { format: :json }
    get 'summary', defaults: { format: :json }
    get 'summary_history', defaults: { format: :json }
    get 'oauth_params', defaults: { format: :json }
    get 'aggregate_run', defaults: { format: :json }
    get 'past_runs', defaults: { format: :json }
    get 'supported_tests', defaults: { format: :json }
    post 'oauth_params'
    post 'delete_authorization'
  end

  controller :scorecards do
    get 'scorecard' => :index
    post 'scorecard/score_url' => :score_url
    post 'scorecard/score_upload' => :score_upload
    post 'scorecard/score_paste' => :score_paste
    get 'scorecard/:id' => :show
  end

  controller :synthea do
    get 'testdata' => :index
    post 'testdata' => :load_data
  end

  controller :badges do
    get 'badges' => :index
  end
  
  controller :smarts do
    get 'smart' => :index
    get 'smart/app' => :app
    get 'smart/app/show' => :show
    get 'smart/launch' => :launch
    get 'smart/cfg' => :cfg
    post 'smart/cfg' => :update_cfg
  end

  resources :test_results, only: [:show] do
    get 'reissue_request', default: {format: :json}
  end

  root to: "home#index"
  get 'server_scrollbar_data', to: 'home#server_scrollbar_data'
  get 'bar_chart_data', to: 'home#bar_chart_data'
  get 'calendar_data', to: 'home#calendar_data'
  get 'redirect', to: 'servers#oauth_redirect'

end
HackerTweet::Application.routes.draw do

  root to: 'pages#index'
  # The priority is based upon order of creation: first created -> highest priority.
  # See how all your routes lay out with "rake routes".

  # You can have the root of your site routed with "root"
  # root to: 'welcome#index'

  # Example of regular route:
  #   get 'products/:id' => 'catalog#view'

  # Example of named route that can be invoked with purchase_url(id: product.id)
  #   get 'products/:id/purchase' => 'catalog#purchase', as: :purchase

  # Example resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Example resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Example resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Example resource route with more complex sub-resources:
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', on: :collection
  #     end
  #   end

  # Example resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end
end
=begin
Swagger Petstore

This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.

OpenAPI spec version: 1.0.0
Contact: apiteam@swagger.io
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end
Rails.application.routes.draw do

  def add_swagger_route http_method, path, opts = {}
    full_path = path.gsub(/{(.*?)}/, ':\1')
    match full_path, to: "#{opts.fetch(:controller_name)}##{opts[:action_name]}", via: http_method
  end

  add_swagger_route 'POST', '/v2/pet', controller_name: 'pet', action_name: 'create'
  add_swagger_route 'DELETE', '/v2/pet/{petId}', controller_name: 'pet', action_name: 'destroy'
  add_swagger_route 'GET', '/v2/pet/findByStatus', controller_name: 'pet', action_name: 'find_pets_by_status'
  add_swagger_route 'GET', '/v2/pet/findByTags', controller_name: 'pet', action_name: 'find_pets_by_tags'
  add_swagger_route 'GET', '/v2/pet/{petId}', controller_name: 'pet', action_name: 'show'
  add_swagger_route 'PUT', '/v2/pet', controller_name: 'pet', action_name: 'update_pet'
  add_swagger_route 'POST', '/v2/pet/{petId}', controller_name: 'pet', action_name: 'update_pet_with_form'
  add_swagger_route 'POST', '/v2/pet/{petId}/uploadImage', controller_name: 'pet', action_name: 'upload_file'
  add_swagger_route 'DELETE', '/v2/store/order/{orderId}', controller_name: 'store', action_name: 'delete_order'
  add_swagger_route 'GET', '/v2/store/inventory', controller_name: 'store', action_name: 'get_inventory'
  add_swagger_route 'GET', '/v2/store/order/{orderId}', controller_name: 'store', action_name: 'get_order_by_id'
  add_swagger_route 'POST', '/v2/store/order', controller_name: 'store', action_name: 'place_order'
  add_swagger_route 'POST', '/v2/user', controller_name: 'user', action_name: 'create'
  add_swagger_route 'POST', '/v2/user/createWithArray', controller_name: 'user', action_name: 'create_users_with_array_input'
  add_swagger_route 'POST', '/v2/user/createWithList', controller_name: 'user', action_name: 'create_users_with_list_input'
  add_swagger_route 'DELETE', '/v2/user/{username}', controller_name: 'user', action_name: 'destroy'
  add_swagger_route 'GET', '/v2/user/{username}', controller_name: 'user', action_name: 'show'
  add_swagger_route 'GET', '/v2/user/login', controller_name: 'user', action_name: 'login_user'
  add_swagger_route 'GET', '/v2/user/logout', controller_name: 'user', action_name: 'logout_user'
  add_swagger_route 'PUT', '/v2/user/{username}', controller_name: 'user', action_name: 'update'
end
Rails.application.routes.draw do
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
  post '/pokemons', to: 'pokemons#create'
  delete '/pokemons/:id', to: 'pokemons#destroy'
  get '/trainers', to: 'trainers#index'
end
# rubocop:disable Metrics/BlockLength

Rails.application.routes.draw do
  use_doorkeeper do
    controllers tokens: "oauth/tokens"
  end

  devise_for :users, controllers: {
    omniauth_callbacks: "omniauth_callbacks",
    registrations: "registrations"
  }

  require "sidekiq/web"
  authenticated :user, ->(user) { user.tech_admin? } do
    Sidekiq::Web.set :session_secret, Rails.application.secrets[:secret_key_base]
    Sidekiq::Web.set :sessions, Rails.application.config.session_options
    Sidekiq::Web.class_eval do
      use Rack::Protection, origin_whitelist: ["https://dev.to"] # resolve Rack Protection HttpOrigin
    end
    mount Sidekiq::Web => "/sidekiq"
  end

  devise_scope :user do
    delete "/sign_out" => "devise/sessions#destroy"
    get "/enter" => "registrations#new", :as => :sign_up
  end

  namespace :admin do
    # Check administrate gem docs
    DashboardManifest::DASHBOARDS.each do |dashboard_resource|
      resources dashboard_resource
    end

    root controller: DashboardManifest::ROOT_DASHBOARD, action: :index
  end

  namespace :internal do
    get "/", to: redirect("/internal/articles")

    resources :articles, only: %i[index show update]
    resources :broadcasts, only: %i[index new create edit update]
    resources :buffer_updates, only: %i[create update]
    resources :classified_listings, only: %i[index edit update destroy]
    resources :comments, only: [:index]
    resources :events, only: %i[index create update]
    resources :feedback_messages, only: %i[index show]
    resources :listings, only: %i[index edit update destroy], controller: "classified_listings"
    resources :pages, only: %i[index new create edit update destroy]
    resources :mods, only: %i[index update]
    resources :permissions, only: %i[index]
    resources :podcasts, only: %i[index edit update destroy] do
      member do
        post :add_admin
        delete :remove_admin
      end
    end
    resources :reactions, only: [:update]
    resources :chat_channels, only: %i[index create update]
    resources :reports, only: %i[index show], controller: "feedback_messages" do
      collection do
        post "send_email"
        post "create_note"
        post "save_status"
      end
    end
    resources :tags, only: %i[index update show]
    resources :users, only: %i[index show edit update] do
      member do
        post "banish"
        post "full_delete"
        patch "user_status"
        post "merge"
        delete "remove_identity"
        post "recover_identity"
      end
    end
    resources :organization_memberships, only: %i[update destroy create]
    resources :organizations, only: %i[index show]
    resources :welcome, only: %i[index create]
    resources :growth, only: %i[index]
    resources :tools, only: %i[index create] do
      collection do
        post "bust_cache"
      end
    end
    resources :webhook_endpoints, only: :index
    resource :config
    resources :badges, only: :index
    post "badges/award_badges", to: "badges#award_badges"
  end

  namespace :stories, defaults: { format: "json" } do
    resource :feed, only: [:show] do
      get ":timeframe" => "feeds#show"
    end
  end

  namespace :api, defaults: { format: "json" } do
    scope module: :v0,
          constraints: ApiConstraints.new(version: 0, default: true) do
      resources :articles, only: %i[index show create update] do
        collection do
          get "me(/:status)", to: "articles#me", as: :me, constraints: { status: /published|unpublished|all/ }
        end
      end
      resources :comments, only: %i[index show]
      resources :chat_channels, only: [:show]
      resources :videos, only: [:index]
      resources :podcast_episodes, only: [:index]
      resources :reactions, only: [:create] do
        collection do
          post "/onboarding", to: "reactions#onboarding"
        end
      end
      resources :users, only: %i[index show] do
        collection do
          get :me
        end
      end
      resources :tags, only: [:index] do
        collection do
          get "/onboarding", to: "tags#onboarding"
        end
      end
      resources :follows, only: [:create]
      namespace :followers do
        get :users
        get :organizations
      end
      namespace :followings do
        get :users
        get :tags
        get :organizations
        get :podcasts
      end
      resources :github_repos, only: [:index] do
        collection do
          post "/update_or_create", to: "github_repos#update_or_create"
        end
      end
      resources :webhooks, only: %i[index create show destroy]

      resources :classified_listings, path: :listings, only: %i[index show create update]
      get "/listings/category/:category", to: "classified_listings#index", as: :classified_listings_category
      get "/analytics/totals", to: "analytics#totals"
      get "/analytics/historical", to: "analytics#historical"
      get "/analytics/past_day", to: "analytics#past_day"
      get "/analytics/referrers", to: "analytics#referrers"
    end
  end

  namespace :notifications do
    resources :counts, only: [:index]
    resources :reads, only: [:create]
  end

  namespace :incoming_webhooks do
    get "/mailchimp/:secret/unsubscribe", to: "mailchimp_unsubscribes#index", as: :mailchimp_unsubscribe_check
    post "/mailchimp/:secret/unsubscribe", to: "mailchimp_unsubscribes#create", as: :mailchimp_unsubscribe
  end

  resources :messages, only: [:create]
  resources :chat_channels, only: %i[index show create update]
  resources :chat_channel_memberships, only: %i[create update destroy]
  resources :articles, only: %i[update create destroy]
  resources :article_mutes, only: %i[update]
  resources :comments, only: %i[create update destroy] do
    patch "/hide", to: "comments#hide"
    patch "/unhide", to: "comments#unhide"
  end
  resources :comment_mutes, only: %i[update]
  resources :users, only: [:update] do
    resource :twitch_stream_updates, only: %i[show create]
  end
  resources :twitch_live_streams, only: :show, param: :username
  resources :reactions, only: %i[index create]
  resources :feedback_messages, only: %i[index create]
  resources :organizations, only: %i[update create]
  resources :followed_articles, only: [:index]
  resources :follows, only: %i[show create update]
  resources :image_uploads, only: [:create]
  resources :blocks
  resources :notifications, only: [:index]
  resources :tags, only: [:index]
  resources :downloads, only: [:index]
  resources :stripe_active_cards, only: %i[create update destroy]
  resources :live_articles, only: [:index]
  resources :github_repos, only: %i[create update]
  resources :buffered_articles, only: [:index]
  resources :events, only: %i[index show]
  resources :additional_content_boxes, only: [:index]
  resources :videos, only: %i[index create new]
  resources :video_states, only: [:create]
  resources :twilio_tokens, only: [:show]
  resources :html_variants, only: %i[index new create show edit update]
  resources :html_variant_trials, only: [:create]
  resources :html_variant_successes, only: [:create]
  resources :tag_adjustments, only: %i[create destroy]
  resources :rating_votes, only: [:create]
  resources :page_views, only: %i[create update]
  resources :classified_listings, path: :listings, only: %i[index new create edit update destroy dashboard]
  resources :credits, only: %i[index new create] do
    get "purchase", on: :collection, to: "credits#new"
  end
  resources :buffer_updates, only: [:create]
  resources :reading_list_items, only: [:update]
  resources :poll_votes, only: %i[show create]
  resources :poll_skips, only: [:create]
  resources :profile_pins, only: %i[create update]
  resources :partnerships, only: %i[index create show], param: :option
  resources :display_ad_events, only: [:create]
  resources :badges, only: [:index]
  resource :pro_membership, path: :pro, only: %i[show create update]
  resources :user_blocks, param: :blocked_id, only: %i[show create destroy]
  resources :podcasts, only: %i[new create]
  resolve("ProMembership") { [:pro_membership] } # see https://guides.rubyonrails.org/routing.html#using-resolve

  get "/search/tags" => "search#tags"
  get "/chat_channel_memberships/find_by_chat_channel_id" => "chat_channel_memberships#find_by_chat_channel_id"
  get "/listings/dashboard" => "classified_listings#dashboard"
  get "/listings/:category" => "classified_listings#index"
  get "/listings/:category/:slug" => "classified_listings#index", :as => :classified_listing_slug
  get "/listings/:category/:slug/:view" => "classified_listings#index",
      :constraints => { view: /moderate/ }
  get "/listings/:category/:slug/delete_confirm" => "classified_listings#delete_confirm"
  delete "/listings/:category/:slug" => "classified_listings#destroy"
  get "/notifications/:filter" => "notifications#index"
  get "/notifications/:filter/:org_id" => "notifications#index"
  get "/notification_subscriptions/:notifiable_type/:notifiable_id" => "notification_subscriptions#show"
  post "/notification_subscriptions/:notifiable_type/:notifiable_id" => "notification_subscriptions#upsert"
  patch "/onboarding_update" => "users#onboarding_update"
  patch "/onboarding_checkbox_update" => "users#onboarding_checkbox_update"
  get "email_subscriptions/unsubscribe"
  post "/chat_channels/:id/moderate" => "chat_channels#moderate"
  post "/chat_channels/:id/open" => "chat_channels#open"
  get "/connect" => "chat_channels#index"
  get "/connect/:slug" => "chat_channels#index"
  post "/chat_channels/create_chat" => "chat_channels#create_chat"
  post "/chat_channels/block_chat" => "chat_channels#block_chat"
  delete "/messages/:id" => "messages#destroy"
  patch "/messages/:id" => "messages#update"
  get "/live/:username" => "twitch_live_streams#show"

  post "/pusher/auth" => "pusher#auth"

  get "/social_previews/article/:id" => "social_previews#article", :as => :article_social_preview
  get "/social_previews/user/:id" => "social_previews#user", :as => :user_social_preview
  get "/social_previews/organization/:id" => "social_previews#organization", :as => :organization_social_preview
  get "/social_previews/tag/:id" => "social_previews#tag", :as => :tag_social_preview
  get "/social_previews/listing/:id" => "social_previews#listing", :as => :listing_social_preview
  get "/social_previews/comment/:id" => "social_previews#comment", :as => :comment_social_preview

  get "/async_info/base_data", controller: "async_info#base_data", defaults: { format: :json }
  get "/async_info/shell_version", controller: "async_info#shell_version", defaults: { format: :json }

  get "/future", to: redirect("devteam/the-future-of-dev-160n")

  # Settings
  post "users/update_language_settings" => "users#update_language_settings"
  post "users/update_twitch_username" => "users#update_twitch_username"
  post "users/join_org" => "users#join_org"
  post "users/leave_org/:organization_id" => "users#leave_org", :as => :users_leave_org
  post "users/add_org_admin" => "users#add_org_admin"
  post "users/remove_org_admin" => "users#remove_org_admin"
  post "users/remove_from_org" => "users#remove_from_org"
  delete "users/remove_association", to: "users#remove_association"
  post "users/request_destroy", to: "users#request_destroy", as: :user_request_destroy
  get "users/confirm_destroy/:token", to: "users#confirm_destroy", as: :user_confirm_destroy
  delete "users/full_delete", to: "users#full_delete", as: :user_full_delete
  post "organizations/generate_new_secret" => "organizations#generate_new_secret"
  post "users/api_secrets" => "api_secrets#create", :as => :users_api_secrets
  delete "users/api_secrets/:id" => "api_secrets#destroy", :as => :users_api_secret

  # The priority is based upon order of creation: first created -> highest priority.
  # See how all your routes lay out with "rake routes".

  # You can have the root of your site routed with "root
  get "/about" => "pages#about"
  get "/robots.:format" => "pages#robots"
  get "/api", to: redirect("https://docs.dev.to/api")
  get "/privacy" => "pages#privacy"
  get "/terms" => "pages#terms"
  get "/contact" => "pages#contact"
  get "/rlygenerator" => "pages#generator"
  get "/orlygenerator" => "pages#generator"
  get "/rlyslack" => "pages#generator"
  get "/rlyweb" => "pages#rlyweb"
  get "/rly" => "pages#rlyweb"
  get "/code-of-conduct" => "pages#code_of_conduct"
  get "/report-abuse" => "pages#report_abuse"
  get "/faq" => "pages#faq"
  get "/live" => "pages#live"
  get "/swagnets" => "pages#swagnets"
  get "/welcome" => "pages#welcome"
  get "/challenge" => "pages#challenge"
  get "/badge" => "pages#badge"
  get "/onboarding" => "pages#onboarding"
  get "/shecoded" => "pages#shecoded"
  get "/💸", to: redirect("t/hiring")
  get "/security", to: "pages#bounty"
  get "/survey", to: redirect("https://dev.to/ben/final-thoughts-on-the-state-of-the-web-survey-44nn")
  get "/now" => "pages#now"
  get "/events" => "events#index"
  get "/workshops", to: redirect("events")
  get "/sponsorship-info" => "pages#sponsorship_faq"
  get "/sponsors" => "pages#sponsors"
  get "/search" => "stories#search"
  post "articles/preview" => "articles#preview"
  post "comments/preview" => "comments#preview"
  get "/stories/warm_comments/:username/:slug" => "stories#warm_comments"
  get "/shop", to: redirect("https://shop.dev.to/")
  get "/mod" => "moderations#index", :as => :mod
  get "/mod/:tag" => "moderations#index"

  post "/fallback_activity_recorder" => "ga_events#create"

  get "/page/:slug" => "pages#show"

  scope "p" do
    pages_actions = %w[rly rlyweb welcome twitter_moniter editor_guide publishing_from_rss_guide information
                       markdown_basics scholarships wall_of_patrons badges]
    pages_actions.each do |action|
      get action, action: action, controller: "pages"
    end
  end

  get "/settings/(:tab)" => "users#edit", :as => :user_settings
  get "/settings/:tab/:org_id" => "users#edit"
  get "/signout_confirm" => "users#signout_confirm"
  get "/dashboard" => "dashboards#show"
  get "/dashboard/pro" => "dashboards#pro"
  get "dashboard/pro/org/:org_id" => "dashboards#pro"
  get "dashboard/following" => "dashboards#following_tags"
  get "dashboard/following_tags" => "dashboards#following_tags"
  get "dashboard/following_users" => "dashboards#following_users"
  get "dashboard/following_organizations" => "dashboards#following_organizations"
  get "dashboard/following_podcasts" => "dashboards#following_podcasts"
  get "/dashboard/:which" => "dashboards#followers", :constraints => { which: /user_followers/ }
  get "/dashboard/:which/:org_id" => "dashboards#show",
      :constraints => {
        which: /organization/
      }
  get "/dashboard/:username" => "dashboards#show"

  # for testing rails mailers
  unless Rails.env.production?
    get "/rails/mailers" => "rails/mailers#index"
    get "/rails/mailers/*path" => "rails/mailers#preview"
  end

  get "/embed/:embeddable" => "liquid_embeds#show"

  # serviceworkers
  get "/serviceworker" => "service_worker#index"
  get "/manifest" => "service_worker#manifest"

  get "/shell_top" => "shell#top"
  get "/shell_bottom" => "shell#bottom"

  get "/new" => "articles#new"
  get "/new/:template" => "articles#new"

  get "/pod", to: "podcast_episodes#index"
  get "/podcasts", to: redirect("pod")
  get "/readinglist" => "reading_list_items#index"
  get "/readinglist/:view" => "reading_list_items#index", :constraints => { view: /archive/ }

  get "/feed" => "articles#feed", :as => "feed", :defaults => { format: "rss" }
  get "/feed/tag/:tag" => "articles#feed",
      :as => "tag_feed", :defaults => { format: "rss" }
  get "/feed/:username" => "articles#feed",
      :as => "user_feed", :defaults => { format: "rss" }
  get "/rss" => "articles#feed", :defaults => { format: "rss" }

  get "/tag/:tag" => "stories#index"
  get "/t/:tag", to: "stories#index", as: :tag
  get "/t/:tag/edit", to: "tags#edit"
  get "/t/:tag/admin", to: "tags#admin"
  patch "/tag/:id", to: "tags#update"
  get "/t/:tag/top/:timeframe" => "stories#index"
  get "/t/:tag/:timeframe" => "stories#index",
      :constraints => { timeframe: /latest/ }

  get "/badge/:slug" => "badges#show"

  get "/top/:timeframe" => "stories#index"

  get "/:timeframe" => "stories#index", :constraints => { timeframe: /latest/ }

  # Legacy comment format (might still be floating around app, and external links)
  get "/:username/:slug/comments" => "comments#index"
  get "/:username/:slug/comments/:id_code" => "comments#index"
  get "/:username/:slug/comments/:id_code/edit" => "comments#edit"
  get "/:username/:slug/comments/:id_code/delete_confirm" => "comments#delete_confirm"

  # Proper link format
  get "/:username/comment/:id_code" => "comments#index"
  get "/:username/comment/:id_code/edit" => "comments#edit"
  get "/:username/comment/:id_code/delete_confirm" => "comments#delete_confirm"
  get "/:username/comment/:id_code/mod" => "moderations#comment"
  get "/:username/comment/:id_code/settings", to: "comments#settings"

  get "/:username/:slug/:view" => "stories#show",
      :constraints => { view: /moderate/ }
  get "/:username/:slug/mod" => "moderations#article"
  get "/:username/:slug/manage" => "articles#manage"
  get "/:username/:slug/edit" => "articles#edit"
  get "/:username/:slug/delete_confirm" => "articles#delete_confirm"
  get "/:username/:slug/stats" => "articles#stats"
  get "/:username/:view" => "stories#index",
      :constraints => { view: /comments|moderate|admin/ }
  get "/:username/:slug" => "stories#show"
  get "/:username" => "stories#index"

  root "stories#index"
end

# rubocop:enable Metrics/BlockLength
if Gem::Version.new("3.0") > Gem::Version.new(Rails.version) then
  #Routing for Redmine 1.x
  ActionController::Routing::Routes.draw do |map|
    map.with_options :format => 'xml', :conditions => {:method => :get} do |rmc|
      #meta / settings
      rmc.connect "mylyn/settings", :controller => "MylynConnector::Settings", :action => "all"
      rmc.connect "mylyn/version", :controller => "MylynConnector::Information", :action => "version"
      rmc.connect "mylyn/token", :controller => "MylynConnector::Information", :action => "token"
      #attributes
      rmc.connect "mylyn/customfields", :controller => "MylynConnector::CustomFields", :action => "all"
      rmc.connect "mylyn/issuecategories", :controller => "MylynConnector::IssueCategories", :action => "all"
      rmc.connect "mylyn/issuepriorities", :controller => "MylynConnector::IssuePriorities", :action => "all"
      rmc.connect "mylyn/versions", :controller => "MylynConnector::Versions", :action => "all"
      rmc.connect "mylyn/queries", :controller => "MylynConnector::Queries", :action => "all"
      rmc.connect "mylyn/users", :controller => "MylynConnector::Users", :action => "all"
      rmc.connect "mylyn/timeentryactivities", :controller => "MylynConnector::TimeEntryActivities", :action => "all"
      rmc.connect "mylyn/trackers", :controller => "MylynConnector::Trackers", :action => "all"
      rmc.connect "mylyn/issuestatus", :controller => "MylynConnector::IssueStatus", :action => "all"
      #projects
      rmc.connect "mylyn/projects", :controller => "MylynConnector::Projects", :action => "all"
      rmc.connect "mylyn/issue/:id", :controller => "MylynConnector::Issues", :action => "show"
      rmc.connect "mylyn/issues/updatedsince", :controller => "MylynConnector::Issues", :action => "updated_since"
      rmc.connect "mylyn/issues/list", :controller => "MylynConnector::Issues", :action => "list"
      rmc.connect "mylyn/issues", :controller => "MylynConnector::Issues", :action => "index"
      #very dirty workaround: enables RESTApiAuth for attachments
      rmc.connect 'mylyn/attachment/:id/:filename', :controller => 'attachments', :action => 'download', :format=> 'xml', :id => /\d+/, :filename => /.*/
    end
    map.connect 'mylyn/authtest', :controller => 'MylynConnector::Information', :action => 'authtest', :conditions => {:method => :get}
  end
else
  #Routing for Redmine 2.x
  RedmineApp::Application.routes.draw do
    #meta / settings
    get "mylyn/settings", :controller => 'mylyn_connector/settings', :action => 'all', :format => 'xml'
    get "mylyn/version", :controller => 'mylyn_connector/information', :action => 'version', :format => 'xml'
    get "mylyn/token", :controller => 'mylyn_connector/information', :action => 'token', :format => 'text'
    #attributes
    get "mylyn/customfields", :controller => 'mylyn_connector/custom_fields', :action => 'all', :format => 'xml'
    get "mylyn/issuecategories", :controller => 'mylyn_connector/issue_categories', :action => 'all', :format => 'xml'
    get "mylyn/issuepriorities", :controller => 'mylyn_connector/issue_priorities', :action => 'all', :format => 'xml'
    get "mylyn/versions", :controller => 'mylyn_connector/versions', :action => 'all', :format => 'xml'
    get "mylyn/queries", :controller => 'mylyn_connector/queries', :action => 'all', :format => 'xml'
    get "mylyn/users", :controller => 'mylyn_connector/users', :action => 'all', :format => 'xml'
    get "mylyn/timeentryactivities", :controller => 'mylyn_connector/time_entry_activities', :action => 'all', :format => 'xml'
    get "mylyn/trackers", :controller => 'mylyn_connector/trackers', :action => 'all', :format => 'xml'
    get "mylyn/issuestatus", :controller => 'mylyn_connector/issue_status', :action => 'all', :format => 'xml'
    #projects
    get "mylyn/projects", :controller => 'mylyn_connector/projects', :action => 'all', :format => 'xml'
    get "mylyn/issue/:id", :controller => 'mylyn_connector/issues', :action => 'show', :format => 'xml'
    get "mylyn/issues/updatedsince", :controller => 'mylyn_connector/issues', :action => 'updated_since', :format => 'xml'
    get "mylyn/issues/list", :controller => 'mylyn_connector/issues', :action => 'list', :format => 'xml'
    get "mylyn/issues", :controller => 'mylyn_connector/issues', :action => 'index', :format => 'xml'
    get 'mylyn/attachment/:id/:filename', :to => 'attachments#download', :format=> 'xml', :id => /\d+/, :filename => /.*/, :format => 'xml'
    get 'mylyn/authtest', :controller => 'mylyn_connector/information', :action => 'authtest', :format=> 'xml'
  end
end# frozen_string_literal: true

require 'routing_constraints'
require 'prometheus_exporter_port'

class CdnAssets
  def initialize
    @environment = Sprockets::Environment.new
    @environment.append_path 'cdn'
  end

  def call(env)
    @environment.call(env)
  end
end

# rubocop:disable Metrics/BlockLength

Rails.application.routes.draw do

  constraints PortConstraint.new(PrometheusExporterPort.call) do
    require 'sidekiq/prometheus/exporter'
    require 'yabeda/prometheus/mmap'

    mount Sidekiq::Prometheus::Exporter, at: '/metrics'
    mount Yabeda::Prometheus::Exporter, at: '/yabeda-metrics'
  end

  mount CdnAssets.new => '/_cdn_assets_' unless Rails.configuration.three_scale.assets_cdn_host

  resource :openid

  if ThreeScale::Core.url == System::Application.config.three_scale.core.fake_server
    internal = proc do |env|
      [
        200,
        { 'Content-Type' => 'application/json', 'Content-Length' => 2},
        ['{}']
      ]
    end

    constraints DomainConstraint.new(URI(ThreeScale::Core.url).host) do
      mount internal, at: 'internal'
    end
  elsif System::Application.config.three_scale.core.fake_server
    warn <<-WARNING
[config/routes.rb] You need more than 1 unicorn worker to run fake Core server
without fake Core server your after commit callbacks will crash and you might get unexpected failures
    WARNING
  end

  constraints BuyerDomainConstraint do
    # Just for a better user experience,
    # unless should show the message:
    #     "is not accessible on domain provider.3scale.net"
    get '/p/admin/dashboard', to: redirect('/admin')
  end

  #
  #   Master
  #

  constraints MasterOrProviderDomainConstraint do
    root :to => redirect('/p/admin')
    get '/admin', to: redirect('/p/admin')

    namespace :master, module: 'master' do
      namespace :events, :module => 'events', :defaults => { :format => 'xml' } do
        resource :import, :only => :create
      end
    end
  end

  constraints MasterDomainConstraint do
    get "status" => "application#status"
    constraints LoggedInConstraint do
      mount ::Sidekiq::Web, at: 'sidekiq'
      mount ::System::Deploy, at: 'deploy'
    end

    namespace :partners do
      resources :providers, defaults: {format: 'json'} do
        resources :users, only: [:create, :destroy, :index, :show]
      end
      resource :sessions do
        member do
          get "openid"
        end
      end
    end

    namespace :master, module: 'master' do

      namespace :devportal do
        get '/auth/:system_name/callback/' => 'auth#show', constraints: ParameterConstraint.new(:domain)
        get '/auth/:system_name/callback/' => 'auth#show_self', constraints: ParameterConstraint.new(:self_domain)
        get '/auth/invitations/:invitation_token/:system_name/callback' => 'auth#show'
        get '/auth/invitations/auth0/:system_name/callback' => 'auth#show'
      end

      namespace :api, defaults: {format: 'json'} do
        # /master/api/provider
        resources :providers, except: :index do
          member do
            post :change_partner
          end
          resources :services, only: [:destroy]
        end

        namespace :proxy do
          resources :configs, path: 'configs/:environment', only: [:index]
        end

        scope module: 'finance' do
          resources :providers, :only => [] do
            resources :accounts, :only => [], module: 'accounts' do
              resources :billing_jobs, only: [:create]
            end

            resources :billing_jobs, only: [:create]
          end
        end
      end

      resources :providers, module: 'providers', only: [] do
        resource :plan, only: [ :update, :edit ]
        resources :switches, only: [ :update, :destroy ]
      end
    end
  end

  resource :raise, :only => [:show]

  get '/stylesheets/theme.css' => 'cms/stylesheets#show', :as => :cms_stylesheet, :name => 'theme'
  get '/stylesheets/provider_customized.css' => 'cms/stylesheets#show', :as => :cms_stylesheet_provider, :name => 'provider_customized'

  if ThreeScale.config.redhat_customer_portal.enabled
    constraints MasterDomainConstraint do
      get "/auth/#{RedhatCustomerPortalSupport::RH_CUSTOMER_PORTAL_SYSTEM_NAME}/callback" => 'master/redhat/auth#show'
    end

    namespace :provider, :path => 'p', constraints: ProviderDomainConstraint do
      namespace :admin do
        get "/auth/#{RedhatCustomerPortalSupport::RH_CUSTOMER_PORTAL_SYSTEM_NAME}/callback" => 'redhat/auth#show'
      end
    end
  end

  if ThreeScale.config.service_discovery.enabled && ThreeScale.config.service_discovery.authentication_method == 'oauth'
    constraints MasterDomainConstraint do
      get "/auth/#{ServiceDiscovery::AuthenticationProviderSupport::SERVICE_DISCOVERY_SYSTEM_NAME}/callback" => 'master/service_discovery/auth#show'
    end

    namespace :provider, path: 'p', constraints: ProviderDomainConstraint do
      namespace :admin do
        get "/auth/#{ServiceDiscovery::AuthenticationProviderSupport::SERVICE_DISCOVERY_SYSTEM_NAME}/callback" => 'service_discovery/auth#show'
      end
    end
  end

  get '/auth/:system_name/callback' => 'provider/sessions#create', constraints: MasterOrProviderDomainConstraint
  get '/auth/:system_name/bounce' => 'provider/sessions#bounce', constraints: ProviderDomainConstraint, as: :authorization_provider_bounce

  namespace :provider, path: 'p', constraints: ProviderDomainConstraint do
    resource :password, only: %i[new show update destroy] do
      get 'reset'
    end
  end

  namespace :provider, :path => 'p', constraints: MasterOrProviderDomainConstraint do
    get 'activate/:activation_code' => 'activations#create', :as => :activate

    resource :domains, :only => [:show] do
      collection do
        post :recover
      end
    end


    resource :signup, :only => [:show, :create] do
      match '', action: :cors, via: 'OPTIONS'
      match '*path', action: :cors, via: 'OPTIONS'

      collection do
        get :success
        get :test, as: :iframe
      end
    end

    # BEWARE: those 2 routes have to be below /p/signup/success or
    # they would override it.
    resource :invitee_signup, path: "signup/:invitation_token", only: [:show, :create]

    resource :sessions, :only => [:new, :create, :destroy, :show]
    get 'sso' => 'sessions#create'
    get 'login'  => 'sessions#new',     :as => :login
    get 'logout' => 'sessions#destroy', :as => :logout

    get 'admin', to: 'admin#show'

    namespace :admin do
      resources :backend_apis do
        scope module: :backend_apis do
          resources :metrics, :except => [:show] do
            resources :children, :controller => 'metrics', :only => [:new, :create]
          end
          resources :mapping_rules, except: %i[show], defaults: { owner_type: 'BackendApi' }

          namespace :stats do
            get 'usage', to: 'usage#index', as: :usage
          end
        end
      end

      resource :sudo, only: [:new, :show, :create]

      resources :accounts, :only => [:new, :create]
      resources :authentication_providers do
        member do
          patch :publish_or_hide
        end
      end
      resource :dashboard, :only => [:show]

      namespace :dashboard do
        resource :new_accounts, only: [:show]
        resource :potential_upgrades, only: [:show]

        namespace :service, path: 'service/:service_id', as: :service do
          resource :hits, only: [:show]
          resource :integration_errors, only: [:show]
          resource :navigations, only: [:show]
          resource :top_traffic, only: [:show], controller: :top_traffic
        end
      end

      resource :go_live_state, only: [:show, :update]
      resource :account, :only => [:show, :edit, :update]
      resource :api_docs, :only => [:show]
      resource :liquid_docs, :only => [:show]
      resource :webhooks, :only => [ :new, :edit, :create, :update, :show ]

      namespace :registry do
        constraints(id: /((?!\.json\Z)[^\/])+/) do
          resources :policies, except: %i[show delete]
        end
      end

      resources :destroys, :only => [:index]

      namespace :onboarding do
        namespace :wizard do
          root to: 'info#index'

          get 'intro' => 'info#intro'
          get 'explain' => 'info#explain'
          resource :api,         only: [:new, :edit, :update],        controller: :api
          resource :product,     only: [:new, :edit, :update],        controller: :product
          resource :backend_api, only: [:new, :edit, :update],        controller: :backend_api
          resource :connect,     only: [:new, :edit, :update],        controller: :connect
          resource :request,     only: [:new, :edit, :update, :show], controller: :request
          get 'outro' => 'info#outro'
        end
      end

      namespace :messages do
        root to: 'inbox#index'
        resources :inbox, only: [:show, :destroy] do
          member do
            post :reply
          end
        end
        resources :outbox, except: [:edit, :update]
        resources :trash, only: [:index, :show, :destroy] do
          collection do
            delete :empty # delete all
          end
        end

        namespace :bulk do
          resource :trash, only: [:new, :create]
        end
      end

      namespace :api_docs do
        resource :account_data, :only => [:show]
        resources :specs, only: :show
      end

      scope 'applications/:application_id', :as => :application do
        resources :keys, :only => [ :new, :create, :edit, :update, :destroy ] do
          member do
            put :regenerate
          end
        end
        resources :referrer_filters, :only => [:create, :destroy]
      end

      namespace :cms do
        root to: 'templates#index'
        resources :templates, only: [:index] do
          collection do
            get :sidebar
          end

          resources :versions, only: [:index, :show, :destroy] do

            member do
              post :revert
            end
          end
        end

        resources :builtin_sections, controller: 'sections', except: [ :show, :destroy ]

        resources :sections, :except => [:show] do
          resources :changes
        end

        resources :builtin_static_pages, :builtin_pages, :builtin_partials, only: [:edit, :update] do
          member do
            put :publish
          end
        end

        resources :pages, :layouts, :partials, except: [:show, :index] do
          member do
            put :publish
          end
        end

        resources :email_templates, :except => [:show]
        resources :builtin_legal_terms, :except => [ :show, :index ]

        resources :portlets, :except => [:show] do
          collection do
            get :pick
          end
          member do
            put :publish
          end

        end

        resources :switches, :only => [ :index, :update, :destroy ]
        resources :files, :except => [:show]
        resources :redirects, :except => [:show]
        resources :sections, :except => [:show]
        resources :groups, :except => [:show]
        resources :changes do
          collection do
            put :publish_all
          end
          member do
            put :publish
            put :revert
          end

        end
      end

      namespace :user do
        resource :notification_preferences, only: [:show, :update]
        resource :personal_details, only: [:edit, :update]
        resources :access_tokens, only: [:index, :new, :create, :edit, :update, :destroy]
      end

      namespace :account do
        resources :authentication_providers do
          resource :publishing, :controller => 'authentication_provider_publishing', :only => [:create, :destroy]
          get :auth_show, controller: :authentication_provider_flow_testing, on: :member, as: :flow_testing_show
        end
        get '/callback/:system_name', action: :callback, controller: :authentication_provider_flow_testing, as: :flow_testing_callback

        resource :enforce_sso, :controller => 'enforce_sso', :only => [:create, :destroy]
        resources :notifications, :only => [:index, :update]
        resources :users, :only => [:index, :edit, :update, :destroy] do
          resources :access_tokens, only: [:index, :new, :create, :edit, :update, :destroy]
        end

        resource :braintree_blue, only: [:show, :edit, :update, :destroy], module: 'payment_gateways' do
          match 'hosted_success', via: [:get, :post], on: :member
        end
        resource :data_exports, :only => [:new, :create]
        resource :logo, only: %i[edit update destroy]

        resources :invitations, :only => [:index, :new, :create, :destroy] do
          member do
            put :resend
          end
        end

        resource :personal_details, only: [] do
          match '/', via: :any, to: redirect { System::UrlHelpers.system_url_helpers.edit_provider_admin_user_personal_details_path }
          get 'edit', action: 'edit', on: :member, to: redirect { System::UrlHelpers.system_url_helpers.edit_provider_admin_user_personal_details_path }
        end

        resource :change_plan, :only => [:show, :update] do
          member do
            get :widget
          end
        end

        resources :invoices, :only => [:show, :index]
      end

      namespace :service_discovery do
        resources :namespaces, only: [], controller: 'cluster_namespaces' do
          resources :services, only: [:index, :show], controller: 'cluster_services'
        end
        resources :projects, only: [:index], controller: 'cluster_projects'
        resources :services, only: [:create, :update]
      end
    end
  end

  namespace :api_docs do
    get 'track.:format' => 'tracking#update', :as => :check
  end

  # only for the admin/buyers stuff that dont have admin in route name
  namespace :buyers, :as => 'admin', :path => 'admin/buyers' do
    resources :account_plans, :only => [:new, :create, :edit, :update, :destroy] do
      collection do
        post :masterize
      end
      member do
        post :copy
      end
    end
  end

  # These are API routes, beware
  namespace :stats do
    namespace :data, :path => '' do
      # horrible hacks with path to get parameter to be named :service_id
      resources :services, :path => 'services/:service_id' do  #, :applications do
        collection do
          get 'usage'
          get 'usage_response_code'
          get 'top_applications'
          get 'summary'
        end
      end
      resources :applications, :path => 'applications/:application_id' do
        collection do
          get 'usage'
          get 'usage_response_code'
          get 'summary'
        end
      end
      resources :backend_apis, :path => 'backend_apis/:backend_api_id' do
        collection do
          get 'usage'
        end
      end
    end
  end

  get '/check.txt' => 'checks#check'
  get '/check/error' => 'checks#error'
  get '/search/forum' => 'search#forum'

  namespace :admin do # this is different from the scope that follows as the controllers are in the admin module

    namespace :account do
      resource :payment_gateway, :only => [:update]
    end

    namespace :api_docs do
      resources :services, controller: 'account_api_docs' do
        member do
          get :preview
          put :toggle_visible
        end
      end
    end

    resources :web_hooks, :only => [:index, :create, :update] do
      member do
        post :ping
      end
    end
    resource :user_confirmation, :only => :create
    resources :fields_definitions do
      collection do
        post :sort
      end
    end

    resources :upgrade_notices, :only => [:show]

    # api routes, be careful
    namespace :api, :defaults => { :format => 'xml' } do

      get 'objects/status' => 'objects#status', as: :objects_status, controller: :objects, defaults: { format: :json }

      namespace :personal, defaults: { format: :json } do
        resources :access_tokens, except: %i[new edit]
      end

      # /admin/api/provider
      resource :provider, only: [:show, :update]

      resources :authentication_providers, except: %i[new edit destroy]

      namespace :account do
        resources :authentication_providers, except: %i[new edit destroy] do
          member do
            put :change_published
          end
        end
        resources :proxy_configs, path: 'proxy_configs/:environment', only: %i[index], defaults: { format: :json }
      end

      namespace(:cms) do
        resources :sections do
          resources :files, only: :index
          #resources :templates, only: :index
          #resources :sections, only: :index
        end
        resources :files
        resources :templates, :only => [ :index, :create, :show, :update, :destroy ] do
          member do
            put :publish
          end
        end
      end

      resources :sso_tokens, only: :create do
        collection do
          post :provider_create, constraints: MasterDomainConstraint
        end
      end

      resources :backend_apis, defaults: { format: :json } do
        scope module: :backend_apis do
          resources :metrics, except: %i[new edit] do
            resources :methods, controller: 'metric_methods', except: %i[new edit]
          end
          resources :mapping_rules, except: %i[new edit]
        end
      end

      resources :accounts, :only => [:index, :show, :update, :destroy] do
        collection do
          get :find
        end

        member do
          put :change_plan
          put :make_pending
          put :approve
          put :reject
        end

        resource :credit_card, :only => [:update, :destroy]
        resources :users, :controller => 'buyers_users', :except => [:new, :edit] do
          member do
            put :admin
            put :member
            put :suspend
            put :activate
            put :unsuspend
          end
        end

        resources :application_plans, :controller => 'buyers_application_plans', :only => :index do
          member do
            post :buy
          end
        end
        resource :plan, :as => 'buyer_account_plan',:controller => 'buyer_account_plans', :only => :show
        resources :service_plans, :controller => 'buyers_service_plans', :only => [:index] do
          member do
            post :buy
          end
        end

        resources :applications, :controller => 'buyers_applications', :only => [:index, :show, :create, :update, :destroy] do
          collection do
            get :find
          end
          member do
            put :change_plan
            put :customize_plan
            put :decustomize_plan
            put :accept
            put :suspend
            put :resume
          end
          resources :keys, :controller => 'buyer_application_keys', :only => [:index, :create, :destroy]
          resources :referrer_filters, :controller => 'buyer_application_referrer_filters', :only => [:index, :create, :destroy]
        end

        resources :service_contracts, :only => [:index, :destroy]

        resources :messages, :only => [:create]
      end

      resources :account_plans, :except => [:new, :edit] do
        member do
          put :default
        end
        resources :features, :controller => 'account_plan_features', :only => [:index, :create, :destroy]
      end

      resources :active_docs, :controller => 'api_docs_services', except: %i[new edit]

      resources :policies, only: [:index]

      resources :application_plans, :only => [:index] do
        resources :pricing_rules, :controller => 'application_plan_pricing_rules', :only => [:index ]
        resources :features, :controller => 'application_plan_features', :only => [:index, :create, :destroy]
        resources :limits, :controller => 'application_plan_limits', :only => :index

        resources :metrics, :only => [] do
          resources :limits, :controller => 'application_plan_metric_limits', :except => [:new, :edit]
          resources :pricing_rules, controller: 'application_plan_metric_pricing_rules', only: %i[index create destroy]
        end
      end

      resources :applications, :only => [:index] do
        collection do
          get :find
        end
      end

      resource :signup, :only => :create
      resources :users, :except => [:new, :edit] do
        member do
          put :admin
          put :member
          put :suspend
          put :activate
          put :unsuspend
          resource :permissions, controller: 'member_permissions', only: [:show, :update]
        end

        resources :access_tokens, only: %i[create]
      end

      resources :service_plans, :only => [:index] do
        resources :features, :controller => 'service_plan_features', :only => [:index, :create, :destroy]
      end

      resources :features, :controller => 'account_features', :except => [:new, :edit]

      resource :nginx, :only => [:show], :defaults => { :format => 'zip' } do
        collection do
          get :spec
        end
      end

      resources :services, :except => [:new, :edit] do
        resources :metrics, :except => [:new, :edit] do
          resources :methods, :controller => 'metric_methods', :except => [:new, :edit]
        end

        resources :features, :controller => 'service_features', :except => [:new, :edit]

        resources :service_plans, :except => [:new, :edit] do
          member do
            put :default
          end
        end

        resources :application_plans, :except => [:new, :edit] do
          member do
            put :default
          end
        end

        scope module: :services do # this api has a knack for inconsistency
          resources :backend_usages, except: %i[new edit], defaults: { format: :json }

          resource :proxy, only: %i[show update] do
            post :deploy
            resources :mapping_rules, only: %i[index show update destroy create]
          end

          namespace :proxy do

            resources :policies, only: [] do
              get :show, on: :collection
              put :update, on: :collection
            end

            resources :configs, param: :version, path: 'configs/:environment', only: [:index, :show] do
              get :latest, on: :collection
              post :promote, on: :member
            end

            resource :oidc_configuration, only: %i[show update]
          end

          collection do
            namespace :proxy do
              resources :configs, param: :version, path: 'configs/:environment', only: [] do
                get :index, on: :collection, action: :index_by_host
              end
            end
          end
        end

      end
      resource :webhooks, controller: 'web_hooks', only: [:update] do
        resource :failures, controller: 'web_hooks_failures', only: [:show, :destroy]
      end
      resource :settings, only: [:show, :update]

      namespace :registry, defaults: { format: :json } do
        constraints(id: /((?!\.json\Z)[^\/])+/) do
          resources :policies, except: %i[new edit]
        end
      end
    end
  end

  # TODO: move this route to DeveloperPortal when this
  # functionality is completely removed from the provider
  # side (it is currently only guarding edge environment
  match 'access_code' => 'developer_portal/access_codes#show', :as => :access_code, :via => [:post, :get]

  constraints MasterOrProviderDomainConstraint do

    namespace :api_docs do
      resources :services, only: [:index, :show]
    end

    match '/api_docs/proxy' => 'api_docs/proxy#show', via: [:get, :post]

    admin_module = -> do
      scope :path => 'apiconfig', :module => 'api' do
        get '/' => 'services#index', :as => :apiconfig_root, :namespace => 'api/', :path_prefix => 'admin/apiconfig'
        resources :plans, :only => [] do
          member do
            post :publish
            post :hide
          end
          resources :features, :except => [:index]
          resources :featurings, :only => [:create, :destroy]
        end

        resources :plan_copies, :only => [:new, :create]
        resources :service_plans, :only => [:show, :edit, :update, :destroy]
        resources :application_plans, :only => [:show, :edit, :update, :destroy]

        resources :application_plans, only: [] do
          resources :metrics, only: [] do
            resource :metric_visibility, only: [], path: '', as: 'visibility' do
              member do
                put :toggle_visible
                put :toggle_enabled
                put :toggle_limits_only_text
              end
            end

            resources :pricing_rules, only: %i[index new create]
            resources :usage_limits, only: %i[index new create]
          end

          resources :pricing_rules, only: %i[edit update destroy]
          resources :usage_limits, only: %i[edit update destroy]
        end

        resources :services do
          member do
            get :settings
            get :usage_rules
          end
          resource :support, :only => [:edit, :update]
          resource :content, :only => [:edit, :update]
          resource :terms, :only => [:edit, :update]
          resources :metrics, :except => [:show] do
            resources :children, :controller => 'metrics', :only => [:new, :create]
          end

          resources :application_plans, :only => [:index, :new, :create] do
            collection do
              post :masterize
            end
            member do
              post :copy
            end
          end

          resources :service_plans, :only => [:index, :new, :create] do
            collection do
              post :masterize
            end
            member do
              post :copy
            end
          end

          resources :alerts, :only => [:index, :destroy] do
            collection do
              put :all_read
              delete :purge
            end
            member do
              put :read
            end
          end

          resources :applications, only: %i[index show edit]
          resources :api_docs, only: %i[index new edit update create], controller: '/admin/api_docs/service_api_docs' do
            member do
              get :preview
            end
          end

          resources :errors, only: :index do
            collection do
              delete :purge, path: ''
            end
          end

          resources :backend_usages, except: :show

          resource :integration, except: %i[create destroy edit] do
            member do
              patch 'promote_to_production'
              patch 'toggle_apicast_version'
            end
          end
          resources :proxy_logs, :only => [:index, :show ]
          resources :proxy_configs, only: %i(index show)
          resources :proxy_rules, except: %i[show], defaults: { owner_type: 'Proxy' }
          resource :policies, except: [:show, :destroy]
        end

        resources :alerts, :only => [:index, :destroy] do
          collection do
            put :all_read
            delete :purge
          end
          member do
            put :read
          end
        end
      end # end scope :api

      resources :services, :only => [] do
        namespace :stats do
          get '/signups' => 'dashboards#signups', :as => :signups
          get 'usage' => 'usage#index', :as => :usage
          get 'usage/data/:metric_id' => 'usage#index_data', :as => :usage_data
          get 'usage/top_applications' => 'usage#top_applications', :as => :top_applications
          get 'usage/hours' => 'usage#hours', :as => :hours
          resources :days, :only => :index
          get 'days/:id/:metric_id' => 'days#show', :as => :day
          resource :response_codes, only: [:show]
        end
      end # end resources :services

      # to kind of live under buyers namespace, but do not share the Buyers module
      namespace :stats, as: :buyers_stats, path: 'buyers/stats' do
        resources :applications, :only => :show
      end

      namespace :buyers do
        resources :accounts do
          member do
            post :approve
            post :reject
            post :suspend
            post :resume
            put :toggle_monthly_billing
            put :toggle_monthly_charging
          end

          resource :impersonation, :only => [:create]

          resources :users, :except => [:new, :create] do
            member do
              post :suspend
              post :unsuspend
              post :activate
            end
          end

          resources :configs, :only => [:index, :update, :destroy]
          resources :invitations, :only => [:index, :new, :create, :destroy] do
            member do
              put :resend
            end
          end

          resources :applications, except: %i[show edit]

          resources :service_contracts, :except => [:show] do
            member do
              put :change_plan
              post :approve
            end
          end

          resources :invoices, :only => [:index, :show, :create, :edit, :update]
          resource :groups, :only => [:show, :update]
        end

        namespace :accounts do
          namespace :bulk do
            resource :send_email, :only => [:new, :create]
            resource :change_plan, :only => [:new, :create]
            resource :change_state, :only => [:new, :create]
            resource :delete, :only => [:new, :create]
          end
        end
        resources :account_contracts, :only => :update
        resources :account_plans, :only => [:index, :new, :create] do
          collection do
            post :masterize
          end
        end
        resources :service_contracts, :only => [:index]
        resources :contracts, :only => [] do
          resources :custom_plans, :only => [:create, :destroy]
          resources :custom_application_plans, :only => [:create, :destroy]
        end
        resources :applications do

          member do
            put :accept
            delete :reject
            post :suspend
            post :resume
            put :change_user_key
            put :change_plan
            get :edit_redirect_url
          end

        end
        namespace :applications do
          namespace :bulk do
            resource :send_email, :only => [:new, :create]
            resource :change_plan, :only => [:new, :create]
            resource :change_state, :only => [:new, :create]
          end
        end
        namespace :service_contracts do
          namespace :bulk do
            resource :send_email, :only => [:new, :create]
            resource :change_plan, :only => [:new, :create]
            resource :change_state, :only => [:new, :create]
          end
        end
      end # end namespace :buyers

      namespace :finance do
        root :to => 'provider/dashboards#show'

        scope :module => 'provider' do
          resources :invoices, :only => [:index, :show, :update, :create, :edit] do
            member do
              put :pay
              put :generate_pdf
              put :cancel
              put :charge
              put :issue
            end
            resources :line_items, :only => [:new, :create, :destroy]
          end

          resources :accounts, :only => [] do
            resources :invoices, :only => [:index, :show, :update, :create] do
              # member do
              #   put :pay
              #   put :generate_pdf
              #   put :cancel
              #   put :charge
              #   put :issue
              # end
              resources :line_items, :only => [:new, :create, :destroy]
            end
          end

          resource :settings
          resources :log_entries, :only => :index
          resource :billing_strategy, :only => :update
        end
      end # end namespace :finance

      scope :module => 'forums' do
        scope :module => 'admin' do
          resource :forum do
            resources :categories
            resources :posts, :only => [:index, :edit, :update, :destroy]
            resources :topics, :except => :index do
              collection do
                get :my
              end

              resources :posts, :only => :create
            end

            resources :subscriptions, :controller => 'user_topics', :only => [:index, :create, :destroy]
          end
        end
      end # end scope :forums

      namespace :site, :module => 'sites' do # the controller is in the sites module, not site *sigh*

        resource :usage_rules, only: [:edit, :update]
        resource :settings, only: [:show, :edit, :update] do
          member do
            get :policies
          end
        end

        resource :applications, only: [:edit, :update]
        resource :documentation, only: [:edit, :update]


        resource :developer_portal, only: [:edit, :update]

        resource :dns, only: [:show, :update] do
          member do
            put :open_portal
            get :contact_3scale
          end
        end
        resource :forum, only: [:edit, :update]
        resource :spam_protection, only: [:edit, :update]
        resource :emails, only: [ :edit, :update ]
      end
    end
    scope as: :admin, &admin_module

    # Finance API
    scope :module => 'finance' do
      namespace :api do
        resources :invoices, :only => [:index, :show, :update, :create] do
          resources :payment_transactions, only: :index
          resources :line_items, only: [:index, :create, :destroy]
          member do
            put :state
            post :charge
          end
        end

        namespace 'payment_callbacks', module: 'payment_callbacks' do
          resources :stripe_callbacks, only: :create
        end

        resources :accounts, :only => [], module: 'accounts' do
          resources :invoices, :only => [:index, :show]
        end
      end
    end
  end

  constraints BuyerDomainConstraint do

    scope :module => 'forums' do
      scope :module => 'public' do
        resource :forum, :only => "show" do
          resources :categories, only: [:index, :show]
          resources :posts, :only => [:index, :edit, :update, :destroy]
          resources :topics, :except => :index do
            collection do
              get :my
            end
            resources :posts, :only => [:create]
          end
          resources :subscriptions, :controller => 'user_topics', :only => [:index, :create, :destroy]
        end
      end
    end

    mount DeveloperPortal::Engine, at: "/", as: :developer_portal
  end

  if Rails.env.development? || Rails.env.test?
    mount MailPreview => 'mail_preview'
  end
end

# rubocop:enable Metrics/BlockLength
Refinery::Core::Engine.routes.draw do
  root to: 'pages#home', via: :get
  get '/pages/:id', to: 'pages#show', as: :page

  namespace :pages, path: '' do
    namespace :admin, path: Refinery::Core.backend_route do
      scope path: :pages do
        post 'preview', to: 'preview#show', as: :preview_pages
        patch 'preview/*path', to: 'preview#show', as: :preview_page
      end
    end
  end

  namespace :admin, path: Refinery::Core.backend_route do
    get 'pages/*path/edit', to: 'pages#edit', as: 'edit_page'
    get 'pages/*path/children', to: 'pages#children', as: 'children_pages'
    patch 'pages/*path', to: 'pages#update', as: 'update_page'
    delete 'pages/*path', to: 'pages#destroy', as: 'delete_page'

    resources :pages, except: :show do
      post :update_positions, on: :collection
    end

    resources :pages_dialogs, only: [] do
      collection do
        get :link_to
      end
    end

    resources :page_parts, only: [:new, :create, :destroy]
  end
end
def rb_match(object, path, hash)
  if Rails::VERSION::MAJOR < 3
    hash[:controller] = hash[:to].split('#')[0].to_sym
    hash[:action] = hash[:to].split('#')[1]
    hash.delete(:to)
    if hash[:via]
      hash[:conditions] = { :method => hash[:via] }
      hash.delete(:via)
    end
    object.connect path, hash
  else
    match path, hash
  end
end

def rb_common_routes(rb)
  rb_match rb, 'releases/:project_id',
               :to => 'rb_releases#index', :via => [:get]
  rb_match rb, 'release/:project_id/new',
               :to => 'rb_releases#new', :via => [:get, :post]
  rb_match rb, 'release/:release_id',
               :to => 'rb_releases#show', :via => [:get]
  rb_match rb, 'release/:release_id',
               :to => 'rb_releases#destroy', :via => [:delete]
  rb_match rb, 'release/:release_id/edit',
               :to => 'rb_releases#edit', :via => [:get, :post]
  rb_match rb, 'release/:release_id/update',
               :to => 'rb_releases#update', :via => [:put]
  rb_match rb, 'release/:release_id/shapshot',
               :to => 'rb_releases#snapshot', :via => [:get]

  rb_match rb, 'releases_multiview/:project_id/new',
               :to => 'rb_releases_multiview#new', :via => [:get, :post]
  rb_match rb, 'releases_multiview/:release_multiview_id',
               :to => 'rb_releases_multiview#show', :via => [:get]
  rb_match rb, 'releases_multiview/:release_multiview_id',
               :to => 'rb_releases_multiview#destroy', :via => [:delete]
  rb_match rb, 'releases_multiview/:release_multiview_id/edit',
               :to => 'rb_releases_multiview#edit', :via => [:get, :post]

  rb_match rb, 'updated_items/:project_id', :to => 'rb_updated_items#show'
  rb_match rb, 'wikis/:sprint_id', :to => 'rb_wikis#show'
  rb_match rb, 'wikis/:sprint_id/edit', :to => 'rb_wikis#edit'
  rb_match rb, 'issues/backlog/product/:project_id',
               :to => 'rb_queries#show'
  rb_match rb, 'issues/backlog/sprint/:sprint_id',
               :to => 'rb_queries#show'
  rb_match rb, 'issues/impediments/sprint/:sprint_id',
               :to => 'rb_queries#impediments'
  rb_match rb, 'statistics', :to => 'rb_all_projects#statistics'

  rb_match rb, 'server_variables/sprint/:sprint_id.js',
              :to => 'rb_server_variables#sprint',
              :format => 'js'
  rb_match rb, 'server_variables/sprint/:sprint_id.js',
              :to => 'rb_server_variables#sprint',
              :format => nil
  rb_match rb, 'server_variables.js',
              :to => 'rb_server_variables#index',
              :format => 'js'
  rb_match rb, 'server_variables.js',
              :to => 'rb_server_variables#index',
              :format => nil
  rb_match rb, 'server_variables/project/:project_id.js',
              :to => 'rb_server_variables#project',
              :format => 'js'
  rb_match rb, 'server_variables/project/:project_id.js',
              :to => 'rb_server_variables#project',
              :format => nil

  rb_match rb, 'master_backlog/:project_id',
               :to => 'rb_master_backlogs#show'
  rb_match rb, 'master_backlog/:project_id/menu',
               :to => 'rb_master_backlogs#menu'
  rb_match rb, 'master_backlog/:project_id/closed_sprints', :to => 'rb_master_backlogs#closed_sprints'

  rb_match rb, 'impediment/create', :to => 'rb_impediments#create'
  rb_match rb, 'impediment/update/:id', :to => 'rb_impediments#update'

  rb_match rb, 'sprint/create', :to => 'rb_sprints#create'
  rb_match rb, 'sprint/:sprint_id/update', :to => 'rb_sprints#update'
  rb_match rb, 'sprint/:sprint_id/close', :to => 'rb_sprints#close'
  rb_match rb, 'sprint/:sprint_id/reset', :to => 'rb_sprints#reset'
  rb_match rb, 'sprint/download/:sprint_id.xml', :to => 'rb_sprints#download', :format => 'xml'
  rb_match rb, 'sprints/:project_id/close_completed', :to => 'rb_sprints#close_completed', :via => [:put]

  rb_match rb, 'stories/:project_id/:sprint_id.pdf', :to => 'rb_stories#index', :format => 'pdf'
  rb_match rb, 'stories/:project_id.pdf', :to => 'rb_stories#index', :format => 'pdf'
  rb_match rb, 'story/create', :to => 'rb_stories#create'
  rb_match rb, 'story/update/:id', :to => 'rb_stories#update'
  rb_match rb, 'story/:id/tooltip', :to => 'rb_stories#tooltip'

  rb_match rb, 'calendar/:key/:project_id.ics', :to => 'rb_calendars#ical',
          :format => 'xml'

  rb_match rb, 'burndown/:sprint_id',         :to => 'rb_burndown_charts#show'
  rb_match rb, 'burndown/:sprint_id/embed',   :to => 'rb_burndown_charts#embedded'
  rb_match rb, 'burndown/:sprint_id/print',   :to => 'rb_burndown_charts#print'

  rb_match rb, 'hooks/sidebar/project/:project_id',
          :to => 'rb_hooks_render#view_issues_sidebar'
  rb_match rb, 'hooks/sidebar/project/:project_id/:sprint_id',
          :to => 'rb_hooks_render#view_issues_sidebar'

  rb_match rb, 'project/:project_id/backlogs', :to => 'rb_project_settings#project_settings'
end

if Rails::VERSION::MAJOR < 3
ActionController::Routing::Routes.draw do |map|
  # Use rb/ as a URL 'namespace.' We're using a slightly different URL pattern
  # From Redmine so namespacing avoids any further problems down the line
  map.resource :rb, :only => :none do |rb|
    rb.resource   :task,             :except => :index,             :controller => :rb_tasks,           :as => "task/:id"
    rb.resources  :tasks,            :only => :index,               :controller => :rb_tasks,           :as => "tasks/:story_id"
    rb.resource   :taskboard,        :only => :show,                :controller => :rb_taskboards,      :as => "taskboards/:sprint_id"
    rb.resource   :taskboard,        :only => :current,             :controller => :rb_taskboards,      :as => "projects/:project_id/taskboard"

    rb_common_routes rb
  end
end

else
  resource :rb, :only => :none do |rb|

  # releases
#  resources :projects do
#    resources :releases, :only => [:index, :new,:show, :edit, :destroy, :snapshot], :controller => :rb_releases  do
#      get 'snapshot', :on => :member 
#      post 'edit', :on => :member
#      post 'new', :on => :member
#    end
#  end

    rb_common_routes rb

  resources :task, :except => :index, :controller => :rb_tasks
  rb_match rb, 'tasks/:story_id', :to => 'rb_tasks#index'

  rb_match rb, 'taskboards/:sprint_id',
            :to => 'rb_taskboards#show'
  rb_match rb, 'projects/:project_id/taskboard',
            :to => 'rb_taskboards#current'
  end
end

Rails.application.routes.draw do
  root 'application#root'
end
MountJourney::Application.routes.draw do
  mount Doorkeeper::Engine => '/oauth'
  # The priority is based upon order of creation:
  # first created -> highest priority.

  # Sample of regular route:
  #   match 'products/:id' => 'catalog#view'
  # Keep in mind you can assign values other than :controller and :action

  # Sample of named route:
  #   match 'products/:id/purchase' => 'catalog#purchase', :as => :purchase
  # This route can be invoked with purchase_url(:id => product.id)

  # Sample resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Sample resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Sample resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Sample resource route with more complex sub-resources
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', :on => :collection
  #     end
  #   end

  # Sample resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end

  # You can have the root of your site routed with "root"
  # just remember to delete public/index.html.
  # root :to => 'welcome#index'

  # See how all your routes lay out with "rake routes"

  # This is a legacy wild controller route that's not recommended for RESTful applications.
  # Note: This route will make all actions in every controller accessible via GET requests.
  # match ':controller(/:action(/:id))(.:format)'
end
Rails.application.routes.draw do
  root "tenet/pages#landing"
  # The priority is based upon order of creation: first created -> highest priority.
  # See how all your routes lay out with "rake routes".

  # You can have the root of your site routed with "root"
  # root 'welcome#index'

  # Example of regular route:
  #   get 'products/:id' => 'catalog#view'

  # Example of named route that can be invoked with purchase_url(id: product.id)
  #   get 'products/:id/purchase' => 'catalog#purchase', as: :purchase

  # Example resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Example resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Example resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Example resource route with more complex sub-resources:
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', on: :collection
  #     end
  #   end

  # Example resource route with concerns:
  #   concern :toggleable do
  #     post 'toggle'
  #   end
  #   resources :posts, concerns: :toggleable
  #   resources :photos, concerns: :toggleable

  # Example resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end
end
RedmineApp::Application.routes.draw do
  resources :projects do
    resources :role_replacements, only: [:index, :new, :create, :edit, :update, :destroy]
  end
end
Restaurant::Application.routes.draw do
  resources :posts

  resources :betasignups
  
  root :to => 'betasignups#new'
  # The priority is based upon order of creation:
  # first created -> highest priority.

  # Sample of regular route:
  #   match 'products/:id' => 'catalog#view'
  # Keep in mind you can assign values other than :controller and :action

  # Sample of named route:
  #   match 'products/:id/purchase' => 'catalog#purchase', :as => :purchase
  # This route can be invoked with purchase_url(:id => product.id)

  # Sample resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Sample resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Sample resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Sample resource route with more complex sub-resources
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', :on => :collection
  #     end
  #   end

  # Sample resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end

  # You can have the root of your site routed with "root"
  # just remember to delete public/index.html.
  # root :to => 'welcome#index'

  # See how all your routes lay out with "rake routes"

  # This is a legacy wild controller route that's not recommended for RESTful applications.
  # Note: This route will make all actions in every controller accessible via GET requests.
  # match ':controller(/:action(/:id))(.:format)'
end
Rails.application.routes.draw do
  # The priority is based upon order of creation: first created -> highest priority.
  # See how all your routes lay out with "rake routes".

  # You can have the root of your site routed with "root"
  # root 'welcome#index'
  #root 'votes#check_authentication'
  #root :to => redirect('/build/bundled/index.html')

  post "votes/authenticate_from_island_is"
  post "authenticate_from_island_is", to: "votes#authenticate_from_island_is"

  get "items/:id", to: "items#index"
  get "votes/is_vote_authenticated"
  get "votes/ballot"
  get "votes/get_areas"
  get "votes/boot"
  get "votes/get_ballot"
  get "votes/better_iceland_proxy"
  post "votes/post_vote"
  post "votes/insecure_email_login"
  get "votes/logout_and_information"
  get "votes/logout"
  get "votes/select_area"
  get "votes/help_info"
  get "votes/about_info"
  get "votes/rules_info"
  get "votes/idea_info"
  get "votes/government_info"
  get "votes/areas_info"
  get "votes/ibuar_info"
  get "votes/rvk_info"
  get "votes/logout_info"
  get "votes/force_session_id"
  get "votes/lukr_map"
  get "votes/lukr_map_2"
  get "votes/meta"

  # Example of named route that can be invoked with purchase_url(id: product.id)
  #   get 'products/:id/purchase' => 'catalog#purchase', as: :purchase

  # Example resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Example resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Example resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Example resource route with more complex sub-resources:
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', on: :collection
  #     end
  #   end

  # Example resource route with concerns:
  #   concern :toggleable do
  #     post 'toggle'
  #   end
  #   resources :posts, concerns: :toggleable
  #   resources :photos, concerns: :toggleable

  # Example resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end
end
# frozen_string_literal: true

#
# Copyright (C) 2011 - present Instructure, Inc.
#
# This file is part of Canvas.
#
# Canvas is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, version 3 of the License.
#
# Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>.

full_path_glob = '(/*full_path)'

# allow plugins to prepend routes
Dir["{gems,vendor}/plugins/*/config/pre_routes.rb"].each { |pre_routes|
  load pre_routes
}

CanvasRails::Application.routes.draw do
  post "/api/graphql", to: "graphql#execute"
  get 'graphiql', to: 'graphql#graphiql'

  resources :submissions, only: [] do
    resources :submission_comments, path: :comments, only: :index, defaults: { format: :pdf }
    resources :docviewer_audit_events, only: [:create], constraints: { format: :json }
  end
  resources :submission_comments, only: [:update, :destroy]

  resources :epub_exports, only: [:index]

  get 'inbox' => 'context#inbox'
  get 'oauth/redirect_proxy' => 'oauth_proxy#redirect_proxy'

  get 'conversations/unread' => 'conversations#index', as: :conversations_unread, redirect_scope: 'unread'
  get 'conversations/starred' => 'conversations#index', as: :conversations_starred, redirect_scope: 'starred'
  get 'conversations/sent' => 'conversations#index', as: :conversations_sent, redirect_scope: 'sent'
  get 'conversations/archived' => 'conversations#index', as: :conversations_archived, redirect_scope: 'archived'
  get 'conversations/find_recipients' => 'search#recipients'

  get 'search/recipients' => 'search#recipients'
  post 'conversations/mark_all_as_read' => 'conversations#mark_all_as_read'
  get 'conversations/batches' => 'conversations#batches', as: :conversation_batches
  resources :conversations, only: [:index, :show, :update, :create, :destroy] do
    post :add_recipients
    post :add_message
    post :remove_messages
  end

  post "/external_auth_observers/redirect_login" => 'login/external_auth_observers#redirect_login', as: :external_auth_validation

  # So, this will look like:
  # http://instructure.com/register/5R32s9iqwLK75Jbbj0
  match 'register/:nonce' => 'communication_channels#confirm', as: :registration_confirmation, via: [:get, :post]
  # deprecated
  get 'pseudonyms/:id/register/:nonce' => 'communication_channels#confirm', as: :registration_confirmation_deprecated
  post 'confirmations/:user_id/re_send(/:id)' => 'communication_channels#re_send_confirmation', as: :re_send_confirmation, id: nil
  get 'confirmations/:user_id/limit_reached(/:id)' => 'communication_channels#confirmation_limit_reached', as: :confirmation_limit_reached, id: nil
  match 'forgot_password' => 'pseudonyms#forgot_password', as: :forgot_password, via: [:get, :post]
  get 'pseudonyms/:pseudonym_id/change_password/:nonce' => 'pseudonyms#confirm_change_password', as: :confirm_change_password
  post 'pseudonyms/:pseudonym_id/change_password/:nonce' => 'pseudonyms#change_password', as: :change_password

  # callback urls for oauth authorization processes
  get 'oauth' => 'users#oauth'
  get 'oauth_success' => 'users#oauth_success'

  get 'mr/:id' => 'info#message_redirect', as: :message_redirect
  get 'help_links' => 'info#help_links'

  # This is a debug route that makes working on error pages easier
  get 'test_error' => 'info#test_error' unless Rails.env.production?

  concern :question_banks do
    resources :question_banks do
      post :bookmark
      post :reorder
      get :questions
      post :move_questions
      resources :assessment_questions
    end
  end

  concern :groups do
    resources :groups, except: :edit
    resources :group_categories, only: [:create, :update, :destroy]
    get 'group_unassigned_members' => 'groups#unassigned_members'
  end

  resources :group_categories do
    member do
      post 'clone_with_name'
    end
  end

  concern :files do
    resources :files, :except => [:new] do
      get 'inline' => 'files#text_show', as: :text_inline
      get 'download' => 'files#show', download: '1'
      get 'download.:type' => 'files#show', as: :typed_download, download: '1'
      get 'preview' => 'files#show', preview: '1'
      post 'inline_view' => 'files#show', inline: '1'
      get 'contents' => 'files#attachment_content', as: :attachment_content
      get 'file_preview' => 'file_previews#show'
      collection do
        get "folder#{full_path_glob}" => 'files#react_files', format: false, defaults: {format: 'html'}
        get "search" => 'files#react_files', format: false, defaults: {format: 'html'}
        get :quota
        post :reorder
      end
      get ':file_path' => 'files#show_relative', as: :relative_path, file_path: /.+/ #needs to stay below react_files route
    end
  end

  concern :file_images do
    get 'images' => 'files#images'
  end

  concern :relative_files do
    get 'file_contents/:file_path' => 'files#show_relative', as: :relative_file_path, file_path: /.+/
  end

  concern :folders do
    resources :folders
  end

  concern :media do
    get 'media_download' => 'users#media_download'
  end

  concern :users do
    get 'users' => 'context#roster'
    get 'user_services' => 'context#roster_user_services'
    get 'users/:user_id/usage' => 'context#roster_user_usage', as: :user_usage
    get 'users/:id' => 'context#roster_user', as: :user
  end

  concern :announcements do
    resources :announcements
    post 'announcements/external_feeds' => 'announcements#create_external_feed'
    delete 'announcements/external_feeds/:id' => 'announcements#destroy_external_feed', as: :announcements_external_feed
  end

  concern :discussions do
    resources :discussion_topics, only: [:index, :new, :show, :edit, :destroy]
    get 'discussion_topics/:id/:extras' => 'discussion_topics#show', as: :map, extras: /.+/
    resources :discussion_entries
  end

  concern :pages do
    resources :wiki_pages, path: :pages, except: [:update, :destroy, :new], constraints: { id: %r{[^\/]+} } do
      get 'revisions' => 'wiki_pages#revisions', as: :revisions
    end

    get 'wiki' => 'wiki_pages#front_page', as: :wiki
    get 'wiki/:id' => 'wiki_pages#show_redirect', id: /[^\/]+/
    get 'wiki/:id/revisions' => 'wiki_pages#revisions_redirect', id: /[^\/]+/
    get 'wiki/:id/revisions/:revision_id' => 'wiki_pages#revisions_redirect', id: /[^\/]+/
  end

  concern :conferences do
    resources :conferences do
      # rubocop:disable SymbolArray
      match :join, via: [:get, :post]
      match :close, via: [:get, :post]
      match :recording, via: [:get]
      match :recording, via: [:delete], to: 'conferences#delete_recording', as: :delete_recording
      # rubocop:enable SymbolArray
      get :settings
    end
  end

  get '/courses/:course_id/gradebook2', to: redirect('/courses/%{course_id}/gradebook')

  # There are a lot of resources that are all scoped to the course level
  # (assignments, files, wiki pages, user lists, forums, etc.).  Many of
  # these resources also apply to groups and individual users.  We call
  # courses, users, groups, or even accounts in this setting, "contexts".
  # There are some helper methods like the before_filter :get_context in application_controller
  # and the application_helper method :context_url to make retrieving
  # these contexts, and also generating context-specific urls, easier.
  resources :courses do
    # DEPRECATED
    get 'self_enrollment/:self_enrollment' => 'courses#self_enrollment', as: :self_enrollment
    post 'self_unenrollment/:self_unenrollment' => 'courses#self_unenrollment', as: :self_unenrollment
    post :unconclude
    get :students
    get 'observer_pairing_codes.csv', action: :observer_pairing_codes_csv, as: 'observer_pairing_codes'
    post :enrollment_invitation
    # this needs to come before the users concern, or users/:id will preempt it
    get 'users/prior' => 'context#prior_users', as: :prior_users
    concerns :users
    get :statistics
    delete 'unenroll/:id' => 'courses#unenroll_user', as: :unenroll
    post 'move_enrollment/:id' => 'courses#move_enrollment', as: :move_enrollment
    delete 'unenroll/:id.:format' => 'courses#unenroll_user', as: :formatted_unenroll
    post 'limit_user_grading/:id' => 'courses#limit_user', as: :limit_user_grading
    delete 'conclude_user/:id' => 'courses#conclude_user', as: :conclude_user_enrollment
    post 'unconclude_user/:id' => 'courses#unconclude_user', as: :unconclude_user_enrollment
    resources :sections, except: [:index, :edit, :new] do
      get 'crosslist/confirm/:new_course_id' => 'sections#crosslist_check', as: :confirm_crosslist
      post :crosslist
      delete 'crosslist' => 'sections#uncrosslist', as: :uncrosslist
    end

    get 'undelete' => 'context#undelete_index', as: :undelete_items
    post 'undelete/:asset_string' => 'context#undelete_item', as: :undelete_item

    get "settings#{full_path_glob}", action: :settings
    get :settings
    get 'details' => 'courses#settings'
    post :re_send_invitations
    post :enroll_users
    post :link_enrollment
    post :update_nav
    resource :gradebook do
      get 'submissions_upload/:assignment_id' => 'gradebooks#show_submissions_upload', as: :show_submissions_upload
      post 'submissions_upload/:assignment_id' => 'gradebooks#submissions_zip_upload', as: :submissions_upload

      collection do
        get :change_gradebook_version
        get :blank_submission
        get :final_grade_overrides
        get :speed_grader
        post :speed_grader_settings
        get :history
        post :update_submission
        post :change_gradebook_column_size
        post :save_gradebook_column_order
        get :user_ids
        get :grading_period_assignments
      end
    end

    resource :gradebook_csv, only: [:show]

    # DEPRECATED old migration emails pointed the user to this url, leave so the controller can redirect
    get 'imports/list' => 'content_imports#index', as: :import_list
    # DEPRECATED
    get 'imports' => 'content_imports#intro'
    resource :gradebook_upload do
      get 'data' => 'gradebook_uploads#data'
    end
    get 'grades' => 'gradebooks#grade_summary', id: nil
    get 'grading_rubrics' => 'gradebooks#grading_rubrics'
    get 'grades/:id' => 'gradebooks#grade_summary', as: :student_grades
    post 'save_assignment_order' => 'gradebooks#save_assignment_order', as: :save_assignment_order
    concerns :announcements
    get 'calendar' => 'calendars#show'
    get :locks
    concerns :discussions
    resources :assignments do
      get 'moderate' => 'assignments#show_moderate'

      get 'anonymous_submissions/:anonymous_id', to: 'submissions/anonymous_previews#show',
        constraints: ->(request) do
          request.query_parameters.key?(:preview) && request.format == :html
        end

      get 'anonymous_submissions/:anonymous_id', to: 'submissions/anonymous_downloads#show',
        constraints: ->(request) do
          request.query_parameters.key?(:download)
        end

      get 'anonymous_submissions/:anonymous_id', to: 'anonymous_submissions#show', as: :anonymous_submission

      get 'submissions/:id', to: 'submissions/previews#show',
        constraints: ->(request) do
          request.query_parameters.key?(:preview) && request.format == :html
        end

      get 'submissions/:id', to: 'submissions/downloads#show',
        constraints: ->(request) do
          request.query_parameters.key?(:download)
        end

      put 'anonymous_submissions/:anonymous_id', to: 'anonymous_submissions#update'
      put 'anonymous_submissions/:anonymous_id/reassign', to: 'anonymous_submissions#redo_submission'
      resources :submissions do
        get 'originality_report/:asset_string' => 'submissions#originality_report', as: :originality_report
        post 'turnitin/resubmit' => 'submissions#resubmit_to_turnitin', as: :resubmit_to_turnitin
        get 'turnitin/:asset_string' => 'submissions#turnitin_report', as: :turnitin_report
        post 'vericite/resubmit' => 'submissions#resubmit_to_vericite', as: :resubmit_to_vericite
        get 'vericite/:asset_string' => 'submissions#vericite_report', as: :vericite_report
        get 'audit_events' => 'submissions#audit_events', as: :audit_events
        put 'reassign' => 'submissions#redo_submission', as: :reassign
      end

      get 'anonymous_submissions/:anonymous_id/originality_report/:asset_string',
        to: 'anonymous_submissions#originality_report',
        as: :anonymous_submission_originality_report
      post 'anonymous_submissions/:anonymous_id/turnitin/resubmit',
        to: 'anonymous_submissions#resubmit_to_turnitin',
        as: :anonymous_submission_resubmit_to_turnitin
      get 'anonymous_submissions/:anonymous_id/turnitin/:asset_string',
        to: 'anonymous_submissions#turnitin_report',
        as: :anonymous_submission_turnitin_report
      post 'anonymous_submissions/:anonymous_id/vericite/resubmit',
        to: 'anonymous_submissions#resubmit_to_vericite',
        as: :anonymous_submission_resubmit_to_vericite
      get 'anonymous_submissions/:anonymous_id/vericite/:asset_string',
        to: 'anonymous_submissions#vericite_report',
        as: :anonymous_submission_vericite_report

      get :rubric
      resource :rubric_association, path: :rubric do
        resources :rubric_assessments, path: :assessments
      end

      get :peer_reviews
      post :assign_peer_reviews
      delete 'peer_reviews/:id' => 'assignments#delete_peer_review', as: :delete_peer_review
      post 'peer_reviews/:id' => 'assignments#remind_peer_review', as: :remind_peer_review
      post 'peer_reviews/users/:reviewer_id' => 'assignments#assign_peer_review', as: :assign_peer_review
      put 'mute' => 'assignments#toggle_mute'

      collection do
        get :syllabus
        get :submissions
      end

      member do
        get :list_google_docs
      end

      get 'lti/resource/:resource_link_id', controller: 'lti/message',
          action: 'resource', as: :resource_link_id
    end

    resources :grading_standards, only: [:index, :create, :update, :destroy]
    resources :assignment_groups do
      post 'reorder' => 'assignment_groups#reorder_assignments', as: :reorder_assignments
      collection do
        post :reorder
      end
    end

    get 'external_tools/sessionless_launch' => 'external_tools#sessionless_launch'
    resources :external_tools do
      match :resource_selection, via: [:get, :post]
      get :homework_submission
      get :finished
      collection do
        get :retrieve
        get :homework_submissions
      end
    end

    get 'lti/resource/:resource_link_id', controller: 'lti/message',
        action: 'resource', as: :resource_link_id
    get 'lti/basic_lti_launch_request/:message_handler_id', controller: 'lti/message',
        action: 'basic_lti_launch_request', as: :basic_lti_launch_request
    post 'lti/tool_proxy_registration', controller: 'lti/message', action: 'registration', as: :tool_proxy_registration
    get 'lti/tool_proxy_reregistration/:tool_proxy_id', controller: 'lti/message', action: 'reregistration',
        as: :tool_proxy_reregistration
    get 'lti/registration_return', controller: 'lti/message', action: 'registration_return',
        as: :registration_return

    resources :submissions
    resources :calendar_events

    concerns :files, :file_images, :relative_files, :folders
    concerns :groups
    concerns :pages
    concerns :conferences
    concerns :question_banks

    post 'quizzes/publish'   => 'quizzes/quizzes#publish'
    post 'quizzes/unpublish' => 'quizzes/quizzes#unpublish'

    post 'assignments/publish/quiz'   => 'assignments#publish_quizzes'
    post 'assignments/unpublish/quiz' => 'assignments#unpublish_quizzes'

    post 'quizzes/new' => 'quizzes/quizzes#new' # use POST instead of GET (not idempotent)
    resources :quizzes, controller: 'quizzes/quizzes', except: :new do
      get :managed_quiz_data
      get :submission_versions
      get :history
      get :statistics
      get :read_only
      get :submission_html

      resources :quiz_submissions, controller: 'quizzes/quiz_submissions', path: :submissions do
        collection do
          put :backup
          post :backup
        end
        member do
          get :record_answer
          post :record_answer
        end
        resources :events, controller: 'quizzes/quiz_submission_events', path: "log#{full_path_glob}"
      end

      post 'extensions/:user_id' => 'quizzes/quiz_submissions#extensions', as: :extensions
      resources :quiz_questions, controller: 'quizzes/quiz_questions', path: :questions, only: [:create, :update, :destroy, :show]
      resources :quiz_groups, controller: 'quizzes/quiz_groups', path: :groups, only: [:create, :update, :destroy] do
        member do
          post :reorder
        end
      end

      match 'take' => 'quizzes/quizzes#show', take: '1', via: [:get, :post]
      get 'take/questions/:question_id' => 'quizzes/quizzes#show', as: :question, take: '1'
      get :moderate
      get :lockdown_browser_required
    end

    resources :collaborations
    get 'lti_collaborations' => 'collaborations#lti_index'
    get 'lti_collaborations/*all' => 'collaborations#lti_index'
    resources :gradebook_uploads
    resources :rubrics
    resources :rubric_associations do
      post 'remind/:assessment_request_id' => 'rubric_assessments#remind', as: :remind_assessee
      resources :rubric_assessments, path: 'assessments'
    end

    get 'outcomes/users/:user_id' => 'outcomes#user_outcome_results', as: :user_outcomes_results
    resources :outcomes do
      get 'alignments/:id' => 'outcomes#alignment_redirect', as: :alignment_redirect
      post 'alignments' => 'outcomes#align', as: :align
      delete 'alignments/:id' => 'outcomes#remove_alignment', as: :remove_alignment
      get 'results' => 'outcomes#outcome_results'
      get 'results/:id' => 'outcomes#outcome_result', as: :result
      get :details
      collection do
        get :list
        post :add_outcome
      end
    end

    resources :outcome_groups, only: [:create, :update, :destroy] do
      post :reorder
    end

    resources :context_modules, path: :modules do
      post 'items' => 'context_modules#add_item', as: :add_item
      post 'reorder' => 'context_modules#reorder_items', as: :reorder
      post 'collapse' => 'context_modules#toggle_collapse', as: :toggle_collapse
      get 'prerequisites/:code' => 'context_modules#content_tag_prerequisites_needing_finishing', as: :prerequisites_needing_finishing
      get 'items/last' => 'context_modules#module_redirect', as: :last_redirect, last: 1
      get 'items/first' => 'context_modules#module_redirect', as: :first_redirect, first: 1
      collection do
        post :reorder
        get :progressions
      end
    end

    post 'collapse_all_modules' => 'context_modules#toggle_collapse_all'
    resources :content_exports, only: [:create, :index, :destroy, :show]
    get 'offline_web_exports' => 'courses#offline_web_exports'
    post 'start_offline_web_export' => 'courses#start_offline_web_export'
    get 'modules/items/assignment_info' => 'context_modules#content_tag_assignment_data', as: :context_modules_assignment_info
    get 'modules/items/master_course_info' => 'context_modules#content_tag_master_course_data', as: :context_modules_master_course_info
    get 'modules/items/:id' => 'context_modules#item_redirect', as: :context_modules_item_redirect
    get 'modules/items/:id/edit_mastery_paths' => 'context_modules#item_redirect_mastery_paths'
    get 'modules/items/:id/choose' => 'context_modules#choose_mastery_path'
    get 'modules/items/sequence/:id' => 'context_modules#item_details', as: :context_modules_item_details
    delete 'modules/items/:id' => 'context_modules#remove_item', as: :context_modules_remove_item
    put 'modules/items/:id' => 'context_modules#update_item', as: :context_modules_update_item
    get 'confirm_action' => 'courses#confirm_action'
    get :copy, as: :start_copy
    post 'copy' => 'courses#copy_course', as: :copy_course
    concerns :media
    get 'user_notes' => 'user_notes#user_notes'
    get 'details/sis_publish' => 'courses#sis_publish_status', as: :sis_publish_status
    post 'details/sis_publish' => 'courses#publish_to_sis', as: :publish_to_sis

    resources :user_lists, only: :create
    post 'invite_users' => 'users#invite_users', :as => :invite_users

    post 'reset' => 'courses#reset_content'
    resources :alerts
    post 'student_view(/:redirect_to_referer)' => 'courses#student_view', as: :student_view
    delete 'student_view' => 'courses#leave_student_view'
    delete 'test_student' => 'courses#reset_test_student'
    get 'content_migrations' => 'content_migrations#index'
    get 'link_validator' => 'courses#link_validator', :as => :link_validator
  end

  get 'quiz_statistics/:quiz_statistics_id/files/:file_id/download' => 'files#show', as: :quiz_statistics_download, download: '1'

  resources :page_views, only: :update
  post 'media_objects' => 'context#create_media_object', as: :create_media_object
  get 'media_objects/:id' => 'context#media_object_inline', as: :media_object
  get 'media_objects/:id/redirect' => 'context#media_object_redirect', as: :media_object_redirect
  get 'media_objects/:id/thumbnail' => 'context#media_object_thumbnail', as: :media_object_thumbnail
  get 'media_objects/:media_object_id/info' => 'media_objects#show', as: :media_object_info
  get 'media_objects_iframe/:media_object_id' => 'media_objects#iframe_media_player', as: :media_object_iframe
  get 'media_objects_iframe' => 'media_objects#iframe_media_player', as: :media_object_iframe_href
  get 'media_objects/:media_object_id/media_tracks/:id' => 'media_tracks#show', as: :show_media_tracks
  post 'media_objects/:media_object_id/media_tracks' => 'media_tracks#create', as: :create_media_tracks
  delete 'media_objects/:media_object_id/media_tracks/:media_track_id' => 'media_tracks#destroy', as: :delete_media_tracks

  get 'external_content/success/:service' => 'external_content#success', as: :external_content_success
  get 'external_content/success/:service/:id' => 'external_content#success', as: :external_content_update
  get 'external_content/retrieve/oembed' => 'external_content#oembed_retrieve', as: :external_content_oembed_retrieve
  get 'external_content/cancel/:service' => 'external_content#cancel', as: :external_content_cancel

  %w(account course group).each do |context|
    prefix = "#{context}s/:#{context}_id"
    post "#{prefix}/deep_linking_response", controller: 'lti/ims/deep_linking', action: :deep_linking_response, as: "#{context}_deep_linking_response"
  end

  %w(account course group user).each do |context|
    match "#{context.pluralize}/:#{context}_id/external_content/success/:service" => 'external_content#success', as: "#{context}_external_content_success", via: [:get, :post]
    match "#{context.pluralize}/:#{context}_id/external_content/success/:service/:id" => 'external_content#success', as: "#{context}_external_content_update", via: [:get, :post]
  end

  # We offer a bunch of atom and ical feeds for the user to get
  # data out of Instructure.  The :feed_code attribute is keyed
  # off of either a user, and enrollment, a course, etc. based on
  # that item's uuid.  In config/initializers/active_record.rb you'll
  # find a feed_code method to generate the code, and in
  # application_controller there's a get_feed_context to get it back out.
  scope '/feeds' do
    get 'calendars/:feed_code' => 'calendar_events_api#public_feed', as: :feeds_calendar
    get 'calendars/:feed_code.:format' => 'calendar_events_api#public_feed', as: :feeds_calendar_format
    get 'forums/:feed_code' => 'discussion_topics#public_feed', as: :feeds_forum
    get 'forums/:feed_code.:format' => 'discussion_topics#public_feed', as: :feeds_forum_format
    get 'topics/:discussion_topic_id/:feed_code' => 'discussion_entries#public_feed', as: :feeds_topic
    get 'topics/:discussion_topic_id/:feed_code.:format' => 'discussion_entries#public_feed', as: :feeds_topic_format
    get 'announcements/:feed_code' => 'announcements#public_feed', as: :feeds_announcements
    get 'announcements/:feed_code.:format' => 'announcements#public_feed', as: :feeds_announcements_format
    get 'courses/:feed_code' => 'courses#public_feed', as: :feeds_course
    get 'courses/:feed_code.:format' => 'courses#public_feed', as: :feeds_course_format
    get 'groups/:feed_code' => 'groups#public_feed', as: :feeds_group
    get 'groups/:feed_code.:format' => 'groups#public_feed', as: :feeds_group_format
    get 'enrollments/:feed_code' => 'courses#public_feed', as: :feeds_enrollment
    get 'enrollments/:feed_code.:format' => 'courses#public_feed', as: :feeds_enrollment_format
    get 'users/:feed_code' => 'users#public_feed', as: :feeds_user
    get 'users/:feed_code.:format' => 'users#public_feed', as: :feeds_user_format
    get 'eportfolios/:eportfolio_id.:format' => 'eportfolios#public_feed', as: :feeds_eportfolio
    get 'conversations/:feed_code' => 'conversations#public_feed', as: :feeds_conversation
    get 'conversations/:feed_code.:format' => 'conversations#public_feed', as: :feeds_conversation_format
  end

  resources :assessment_questions do
    get 'files/:id/download' => 'files#assessment_question_show', as: :map, download: '1'
    get 'files/:id/preview' => 'files#assessment_question_show', preview: '1'
    get 'files/:id/:verifier' => 'files#assessment_question_show', as: :verified_file, download: '1'
  end

  resources :eportfolios, except: :index do
    post :reorder_categories
    post ':eportfolio_category_id/reorder_entries' => 'eportfolios#reorder_entries', as: :reorder_entries
    resources :categories, controller: :eportfolio_categories
    resources :entries, controller: :eportfolio_entries do
      resources :page_comments, path: :comments, only: [:create, :destroy]
      get 'files/:attachment_id' => 'eportfolio_entries#attachment', as: :view_file
      get 'submissions/:submission_id' => 'eportfolio_entries#submission', as: :preview_submission
    end

    get :export, as: :export_portfolio
    get ':category_name' => 'eportfolio_categories#show', as: :named_category
    get ':category_name/:entry_name' => 'eportfolio_entries#show', as: :named_category_entry
  end

  resources :groups do
    concerns :users
    delete 'remove_user/:user_id' => 'groups#remove_user', as: :remove_user
    post :add_user
    get 'accept_invitation/:uuid' => 'groups#accept_invitation', as: :accept_invitation
    get 'members' => 'groups#context_group_members'
    get 'undelete' => 'context#undelete_index', as: :undelete_items
    post 'undelete/:asset_string' => 'context#undelete_item', as: :undelete_item
    concerns :announcements
    concerns :discussions
    resources :calendar_events
    concerns :files, :file_images, :relative_files, :folders

    resources :external_tools, only: :show do
      collection do
        get :retrieve
      end
    end

    concerns :pages
    concerns :conferences
    concerns :media

    resources :collaborations
    get 'lti_collaborations' => 'collaborations#lti_index'
    get 'lti_collaborations/*all' => 'collaborations#lti_index'
    get 'calendar' => 'calendars#show'

    resources :external_tools do
      get :finished
      match :resource_selection, via: [:get, :post]
      collection do
        get :retrieve
      end
    end
  end

  resources :accounts do
    get 'search(/:tab)', action: :course_user_search
    get "settings#{full_path_glob}", action: :settings
    get :reports_tab
    get :settings
    get :admin_tools
    get :eportfolio_moderation
    get 'search' => 'accounts#course_user_search', :as => :course_user_search
    post 'account_users' => 'accounts#add_account_user', as: :add_account_user
    delete 'account_users/:id' => 'accounts#remove_account_user', as: :remove_account_user
    resources :grading_standards, only: [:index, :create, :update, :destroy]
    get :statistics
    get 'statistics/over_time/:attribute' => 'accounts#statistics_graph', as: :statistics_graph
    get 'statistics/over_time/:attribute.:format' => 'accounts#statistics_graph', as: :formatted_statistics_graph
    get :turnitin_confirmation
    get :vericite_confirmation
    resources :permissions, controller: :role_overrides, only: [:index, :create] do
      collection do
        post :add_role
        delete :remove_role
      end
    end

    scope(controller: :brand_configs) do
      get 'theme_editor', action: :new, as: :theme_editor
      get 'brand_configs', action: :index
      post 'brand_configs', action: :create
      delete 'brand_configs', action: :destroy
      post 'brand_configs/save_to_account', action: :save_to_account
      post 'brand_configs/save_to_user_session', action: :save_to_user_session
    end

    resources :role_overrides, only: [:index, :create] do
      collection do
        post :add_role
        delete :remove_role
      end
    end

    resources :terms, except: [:show, :new, :edit]
    resources :sub_accounts

    get :avatars
    get :sis_import
    resources :sis_imports, only: [:create, :show, :index], controller: :sis_imports_api
    get 'users' => 'accounts#users', as: 'users'
    post 'users' => 'users#create', as: :add_user
    get 'users/:user_id/delete' => 'accounts#confirm_delete_user', as: :confirm_delete_user
    delete 'users/:user_id' => 'accounts#remove_user', as: :delete_user

    # create/delete are handled by specific routes just above
    resources :users, only: [:new, :edit, :show, :update]
    resources :account_notifications, only: [:create, :update, :destroy]
    concerns :announcements
    resources :submissions
    delete 'authentication_providers' => 'authentication_providers#destroy_all', as: :remove_all_authentication_providers
    put 'sso_settings' => 'authentication_providers#update_sso_settings',
        as: :update_sso_settings

    resources :authentication_providers, only: [:index, :create, :update, :destroy] do
      get :debugging, action: :debug_data
      put :debugging, action: :start_debugging
      delete :debugging, action: :stop_debugging
    end
    get 'test_ldap_connections' => 'authentication_providers#test_ldap_connection'
    get 'test_ldap_binds' => 'authentication_providers#test_ldap_bind'
    get 'test_ldap_searches' => 'authentication_providers#test_ldap_search'
    match 'test_ldap_logins' => 'authentication_providers#test_ldap_login', via: [:get, :post]

    get 'external_tools/sessionless_launch' => 'external_tools#sessionless_launch'
    resources :external_tools do
      get :finished
      match :resource_selection, via: [:get, :post]
      collection do
        get :retrieve
      end
    end

    get 'lti/resource/:resource_link_id', controller: 'lti/message',
        action: 'resource', as: :resource_link_id
    get 'lti/basic_lti_launch_request/:message_handler_id', controller: 'lti/message',
        action: 'basic_lti_launch_request', as: :basic_lti_launch_request
    post 'lti/tool_proxy_registration', controller: 'lti/message', action: 'registration', as: :tool_proxy_registration
    get 'lti/tool_proxy_reregistration/:tool_proxy_id', controller: 'lti/message', action: 'reregistration',
        as: :tool_proxy_reregistration
    get 'lti/registration_return', controller: 'lti/message', action: 'registration_return',
        as: :registration_return

    get 'outcomes/users/:user_id' => 'outcomes#user_outcome_results', as: :user_outcomes_results
    resources :outcomes do
      get 'results' => 'outcomes#outcome_results'
      get 'results/:id' => 'outcomes#outcome_result', as: :result
      get 'alignments/:id' => 'outcomes#alignment_redirect', as: :alignment_redirect
      get :details
      collection do
        get :list
        post :add_outcome
      end
    end

    resources :outcome_groups, only: [:create, :update, :destroy] do
      post :reorder
    end

    resources :rubrics
    resources :rubric_associations do
      resources :rubric_assessments, path: 'assessments'
    end

    concerns :files, :file_images, :relative_files, :folders
    concerns :media
    concerns :groups

    resources :outcomes
    get :courses
    get 'courses/:id' => 'accounts#courses_redirect', as: :courses_redirect
    get 'user_notes' => 'user_notes#user_notes'
    resources :alerts
    resources :question_banks do
      post :bookmark
      post :reorder
      get :questions
      post :move_questions
      resources :assessment_questions
    end

    resources :user_lists, only: :create

    member do
      get :statistics
    end
    resources :developer_keys, only: :index
  end

  get 'images/users/:user_id' => 'users#avatar_image', as: :avatar_image
  get 'images/thumbnails/:id/:uuid' => 'files#image_thumbnail', as: :thumbnail_image
  get 'images/thumbnails/show/:id/:uuid' => 'files#show_thumbnail', as: :show_thumbnail_image
  post 'images/users/:user_id/report' => 'users#report_avatar_image', as: :report_avatar_image
  put 'images/users/:user_id' => 'users#update_avatar_image', as: :update_avatar_image
  get 'grades' => 'users#grades'
  get 'grades_for_student' => 'users#grades_for_student'

  get 'login' => 'login#new'
  get 'login/session_token' => 'login#session_token', as: :login_session_token
  delete 'logout' => 'login#destroy'
  get 'logout' => 'login#logout_landing'

  get 'login/canvas' => 'login/canvas#new', as: :canvas_login
  post 'login/canvas' => 'login/canvas#create'

  get 'login/ldap' => 'login/ldap#new'
  post 'login/ldap' => 'login/ldap#create'

  get 'login/cas' => 'login/cas#new'
  get 'login/cas/:id' => 'login/cas#new', as: :cas_login
  post 'login/cas' => 'login/cas#destroy', as: :cas_logout
  post 'login/cas/:id' => 'login/cas#destroy'

  get 'login/saml' => 'login/saml#new', as: :saml_login_base
  get 'login/saml/logout' => 'login/saml#destroy'
  post 'login/saml/logout' => 'login/saml#destroy'
  # deprecated alias
  get 'saml_logout' => 'login/saml#destroy'
  get 'login/saml/:id' => 'login/saml#new', as: :saml_login
  get 'saml_observee' => 'login/saml#observee_validation', as: :saml_observee
  post 'login/saml' => 'login/saml#create'
  # deprecated alias; no longer advertised
  post 'saml_consume' => 'login/saml#create'

  get 'login/saml_idp_discovery' => 'login/saml_idp_discovery#new'
  get 'login/saml_idp_discovery/:id' => 'login/saml_idp_discovery#new', as: :saml_idp_discovery_login

  # the callback URL for all OAuth1.0a based SSO
  get 'login/oauth/callback' => 'login/oauth#create', as: :oauth_login_callback
  # the callback URL for all OAuth2 based SSO
  get 'login/oauth2/callback' => 'login/oauth2#create', as: :oauth2_login_callback
  # the callback URL for Sign in with Apple
  post 'login/oauth2/callback' => 'login/oauth2#create'
  # ActionController::TestCase can't deal with aliased controllers when finding
  # routes, so we let this route exist only for tests
  get 'login/oauth2' => 'login/oauth2#new' if Rails.env.test?

  get 'login/apple' => 'login/apple#new', as: :apple_login
  get 'login/clever' => 'login/clever#new', as: :clever_login
  # Clever gets their own callback, cause we have to add additional processing
  # for their Instant Login feature
  get 'login/clever/callback' => 'login/clever#create', as: :clever_callback
  get 'login/clever/:id' => 'login/clever#new'
  get 'login/facebook' => 'login/facebook#new', as: :facebook_login
  get 'login/github' => 'login/github#new', as: :github_login
  get 'login/google' => 'login/google#new', as: :google_login
  get 'login/google/:id' => 'login/google#new'
  get 'login/linkedin' => 'login/linkedin#new', as: :linkedin_login
  get 'login/microsoft' => 'login/microsoft#new'
  get 'login/microsoft/:id' => 'login/microsoft#new', as: :microsoft_login
  get 'login/openid_connect' => 'login/openid_connect#new'
  get 'login/openid_connect/:id' => 'login/openid_connect#new', as: :openid_connect_login
  get 'login/twitter' => 'login/twitter#new', as: :twitter_login

  get 'login/otp' => 'login/otp#new', as: :otp_login
  post 'login/otp/sms' => 'login/otp#send_via_sms', as: :send_otp_via_sms
  post 'login/otp' => 'login/otp#create'
  get 'users/self/otps' => 'one_time_passwords#index', as: :one_time_passwords
  delete 'users/self/otps' => 'one_time_passwords#destroy_all', as: :destroy_all_one_time_passwords

  # deprecated redirect
  get 'login/:id' => 'login#new'

  delete 'users/:user_id/mfa' => 'login/otp#destroy', as: :disable_mfa
  get 'file_session/clear' => 'login#clear_file_session', as: :clear_file_session

  get 'register' => 'users#new'
  get 'register_from_website' => 'users#new'
  get 'enroll/:self_enrollment_code' => 'self_enrollments#new', as: :enroll
  get 'services' => 'users#services'
  get 'search/bookmarks' => 'users#bookmark_search', as: :bookmark_search
  get 'search/rubrics' => 'search#rubrics'
  get 'search/all_courses' => 'search#all_courses'
  resources :users, except: [:destroy, :index] do
    match 'masquerade', via: [:get, :post]
    concerns :files, :file_images

    resources :page_views, only: :index
    resources :folders do
      get :download
    end

    resources :calendar_events
    get 'external_tools/:id' => 'users#external_tool', as: :external_tool
    resources :rubrics
    resources :rubric_associations do
      resources :rubric_assessments, path: :assessments
    end

    resources :pseudonyms, except: :index
    resources :question_banks, only: :index
    get :admin_merge
    get :admin_split
    post :merge
    get :grades
    resources :user_notes
    get :manageable_courses
    get 'outcomes' => 'outcomes#user_outcome_results'
    get 'teacher_activity/course/:course_id' => 'users#teacher_activity', as: :course_teacher_activity
    get 'teacher_activity/student/:student_id' => 'users#teacher_activity', as: :student_teacher_activity
    get :media_download
    resources :messages, only: [:index, :create, :show] do
      get :html_message
    end
  end

  get 'show_message_template' => 'messages#show_message_template'
  get 'message_templates' => 'messages#templates'
  resource :profile, controller: :profile, only: [:show, :update] do
    resources :pseudonyms, except: :index
    resources :tokens, except: :index
    member do
      put :update_profile
      get :communication
      put :communication_update
      get :settings
      get :content_shares
      get :observees
    end
  end

  get 'account_notifications' => 'account_notifications#render_past_global_announcements'

  resource :trophy_case, controller: :user_trophies, only: [:show]

  scope '/profile' do
    post 'toggle_disable_inbox' => 'profile#toggle_disable_inbox'
    get 'profile_pictures' => 'profile#profile_pics', as: :profile_pics
    get 'qr_mobile_login' => 'profile#qr_mobile_login', as: :qr_mobile_login
    delete 'user_services/:id' => 'users#delete_user_service', as: :profile_user_service
    post 'user_services' => 'users#create_user_service', as: :profile_create_user_service
  end

  get 'about/:id' => 'profile#show', as: :user_profile
  resources :communication_channels

  get '' => 'users#user_dashboard', as: 'dashboard'
  get 'dashboard-sidebar' => 'users#dashboard_sidebar', as: :dashboard_sidebar
  post 'users/toggle_hide_dashcard_color_overlays' => 'users#toggle_hide_dashcard_color_overlays'
  get 'styleguide' => 'info#styleguide'
  get 'accounts/:account_id/theme-preview' => 'brand_configs#show'
  root to: 'users#user_dashboard', as: 'root', via: :get
  # backwards compatibility with the old /dashboard url
  get 'dashboard' => 'users#user_dashboard', as: :dashboard_redirect

  # Thought this idea of having dashboard-scoped urls was a good idea at the
  # time... now I'm not as big a fan.
  resource :dashboard, only: [] do
    resources :content_exports, path: :data_exports
  end

  scope '/dashboard' do
    get 'stream_items' => 'users#dashboard_stream_items', as: :dashboard_stream_items
    get 'dashboard_cards' => 'users#dashboard_cards', as: :dashboard_dashboard_cards
    put 'view' => 'users#dashboard_view'
    delete 'account_notifications/:id' => 'users#close_notification', as: :dashboard_close_notification
    get 'eportfolios' => 'eportfolios#user_index', as: :dashboard_eportfolios
    post 'comment_session' => 'services_api#start_kaltura_session', as: :dashboard_comment_session
    delete 'ignore_stream_item/:id' => 'users#ignore_stream_item', as: :dashboard_ignore_stream_item
  end

  resources :plugins, only: [:index, :show, :update]

  get 'calendar' => 'calendars#show'
  get 'calendar2' => 'calendars#show'
  get 'course_sections/:course_section_id/calendar_events/:id' => 'calendar_events#show', as: :course_section_calendar_event
  get 'files' => 'files#index'
  get "files/folder#{full_path_glob}", controller: 'files', action: 'react_files', format: false, defaults: {format: 'html'}
  get "files/search", controller: 'files', action: 'react_files', format: false, defaults: {format: 'html'}
  get 'files/:id/public_url' => 'files#public_url', as: :public_url
  post 'files/pending' => 'files#create_pending', as: :file_create_pending
  resources :assignments, only: :index do
    resources :files, only: [] do
      post 'inline_view' => 'files#show', inline: '1'
    end
  end

  resources :appointment_groups, only: [:index, :show, :edit]

  resources :errors, only: [:show, :index, :create], path: :error_reports

  get 'health_check' => 'info#health_check'
  get 'health_prognosis' => 'info#health_prognosis'
  get 'web-app-manifest/manifest.json' => 'info#web_app_manifest'

  get 'browserconfig.xml', to: 'info#browserconfig', defaults: { format: 'xml' }

  post 'object_snippet' => 'context#object_snippet'
  get 'saml2' => 'login/saml#metadata'

  # Routes for course exports
  get 'xsd/:version.xsd' => 'content_exports#xml_schema'
  resources :jobs, only: [:index, :show] do
    collection do
      post 'batch_update'
    end
  end

  get 'equation_images/:id' => 'equation_images#show', as: :equation_images, id: /.+/

  # assignments at the top level (without a context) -- we have some specs that
  # assert these routes exist, but just 404 unless it is a download from local
  # storage. I'm not sure we ever actually want top-level assignments available,
  # maybe we should change the specs instead.
  # Note, if local storage is used, a file is fetched from this top level
  # (i.e. SpeedGrader document preview with Google Docs viewer)
  resources :assignments, only: [:index, :show] do
    get "files/:id/download" => 'files#show', download: '1'
  end

  resources :files, :except => [:new] do
    get 'download' => 'files#show', download: '1'
  end

  resources :rubrics do
    resources :rubric_assessments, path: :assessments
  end

  post 'selection_test' => 'external_content#selection_test'

  scope '/quizzes/quiz_submissions/:quiz_submission_id', as: 'quiz_submission' do
    concerns :files
  end

  get 'courses/:course_id/outcome_rollups' => 'outcome_results#rollups', as: 'course_outcome_rollups'

  get 'terms_of_use' => 'legal_information#terms_of_use', as: 'terms_of_use_redirect'
  get 'privacy_policy' => 'legal_information#privacy_policy', as: 'privacy_policy_redirect'

  ### API routes ###

  # TODO: api routes can't yet take advantage of concerns for DRYness, because of
  # the way ApiRouteSet works. For now we get around it by defining methods
  # inline in the routes file, but getting concerns working would rawk.
  ApiRouteSet::V1.draw(self) do
    scope(controller: :courses) do
      get 'courses', action: :index, as: 'courses'
      put 'courses/:id', action: :update
      get 'courses/:id', action: :show, as: 'course'
      delete 'courses/:id', action: :destroy
      post 'accounts/:account_id/courses', action: :create
      get 'courses/:course_id/students', action: :students
      get 'courses/:course_id/settings', action: :api_settings, as: 'course_settings'
      put 'courses/:course_id/settings', action: :update_settings
      get 'courses/:course_id/recent_students', action: :recent_students, as: 'course_recent_students'
      get 'courses/:course_id/users', action: :users, as: 'course_users'
      get 'courses/:course_id/collaborations', controller: :collaborations, action: :api_index, as: 'course_collaborations_index'
      delete 'courses/:course_id/collaborations/:id', controller: :collaborations, action: :destroy
      put 'courses/:id/quizzes', action: 'new_quizzes_selection_update', as: 'course_new_quizzes_selection_update'

      # this api endpoint has been removed, it was redundant with just courses#users
      # we keep it around for backward compatibility though
      get 'courses/:course_id/search_users', action: :users
      get 'courses/:course_id/users/:id', action: :user, as: 'course_user'
      get 'courses/:course_id/users/:user_id/progress', action: :user_progress
      get 'courses/:course_id/content_share_users', action: :content_share_users, as: 'course_content_share_users'
      get 'courses/:course_id/activity_stream', action: :activity_stream, as: 'course_activity_stream'
      get 'courses/:course_id/activity_stream/summary', action: :activity_stream_summary, as: 'course_activity_stream_summary'
      get 'courses/:course_id/todo', action: :todo_items, as: 'course_todo_list_items'
      post 'courses/:course_id/preview_html', action: :preview_html
      post 'courses/:course_id/course_copy', controller: :content_imports, action: :copy_course_content
      get 'courses/:course_id/course_copy/:id', controller: :content_imports, action: :copy_course_status, as: :course_copy_status
      get  'courses/:course_id/files', controller: :files, action: :api_index, as: 'course_files'
      post 'courses/:course_id/files', action: :create_file, as: 'course_create_file'
      get 'courses/:course_id/folders', controller: :folders, action: :list_all_folders, as: 'course_folders'
      post 'courses/:course_id/folders', controller: :folders, action: :create
      get 'courses/:course_id/folders/by_path/*full_path', controller: :folders, action: :resolve_path
      get 'courses/:course_id/folders/by_path', controller: :folders, action: :resolve_path
      get 'courses/:course_id/folders/media', controller: :folders, action: :media_folder
      get 'courses/:course_id/folders/:id', controller: :folders, action: :show, as: 'course_folder'
      get 'media_objects', controller: 'media_objects', action: :index, as: :media_objects
      get 'courses/:course_id/media_objects', controller: 'media_objects', action: :index, as: :course_media_objects
      get 'groups/:group_id/media_objects', controller: 'media_objects', action: :index, as: :group_media_objects
      put 'accounts/:account_id/courses', action: :batch_update
      post 'courses/:course_id/ping', action: :ping, as: 'course_ping'

      get 'courses/:course_id/link_validation', action: :link_validation, as: 'course_link_validation'
      post 'courses/:course_id/link_validation', action: :start_link_validation

      post 'courses/:course_id/reset_content', :action => :reset_content
      get  'users/:user_id/courses', action: :user_index, as: 'user_courses'
      get 'courses/:course_id/effective_due_dates', action: :effective_due_dates, as: 'course_effective_due_dates'
      get 'courses/:course_id/permissions', action: :permissions

      get 'courses/:course_id/student_view_student', action: :student_view_student
    end

    scope(controller: :account_notifications) do
      post 'accounts/:account_id/account_notifications', action: :create, as: 'account_notification'
      put 'accounts/:account_id/account_notifications/:id', action: :update, as: 'account_notification_update'
      get 'accounts/:account_id/account_notifications', action: :user_index, as: 'user_account_notifications' # to change the api docs
      get 'accounts/:account_id/users/:user_id/account_notifications', action: :user_index_deprecated # for back compat
      get 'accounts/:account_id/account_notifications/:id', action: :show, as: 'user_account_notification_show'
      get 'accounts/:account_id/users/:user_id/account_notifications/:id', action: :show_deprecated
      delete 'accounts/:account_id/account_notifications/:id', action: :user_close_notification, as: 'user_account_notification'
      delete 'accounts/:account_id/users/:user_id/account_notifications/:id', action: :user_close_notification_deprecated
    end

    scope(controller: :brand_configs_api) do
      get "brand_variables", action: :show
    end

    scope(controller: :accounts) do
      get "terms_of_service_custom_content", action: :terms_of_service_custom_content
    end

    scope(controller: :tabs) do
      get "accounts/:account_id/tabs", action: :index, as: 'account_tabs'
      get "courses/:course_id/tabs", action: :index, as: 'course_tabs'
      get "groups/:group_id/tabs", action: :index, as: 'group_tabs'
      get "users/:user_id/tabs", action: :index, as: 'user_profile_tabs'
      put "courses/:course_id/tabs/:tab_id", action: :update
    end

    scope(controller: :scopes_api) do
      get "accounts/:account_id/scopes", action: :index
    end

    scope(controller: :sections) do
      get 'courses/:course_id/sections', action: :index, as: 'course_sections'
      get 'courses/:course_id/sections/:id', action: :show, as: 'course_section'
      get 'sections/:id', action: :show
      post 'courses/:course_id/sections', action: :create
      put 'sections/:id', action: :update
      delete 'sections/:id', action: :destroy
      post 'sections/:id/crosslist/:new_course_id', action: :crosslist
      delete 'sections/:id/crosslist', action: :uncrosslist
    end

    scope(controller: :enrollments_api) do
      get  'courses/:course_id/enrollments', action: :index, as: 'course_enrollments'
      get  'sections/:section_id/enrollments', action: :index, as: 'section_enrollments'
      get  'users/:user_id/enrollments', action: :index, as: 'user_enrollments'
      get  'accounts/:account_id/enrollments/:id', action: :show, as: 'enrollment'

      post 'courses/:course_id/enrollments', action: :create
      post 'sections/:section_id/enrollments', action: :create
      post 'courses/:course_id/enrollments/:id/accept', action: :accept
      post 'courses/:course_id/enrollments/:id/reject', action: :reject

      put 'courses/:course_id/users/:user_id/last_attended', :action => :last_attended
      put 'courses/:course_id/enrollments/:id/reactivate', :action => :reactivate, :as => 'reactivate_enrollment'

      delete 'courses/:course_id/enrollments/:id', action: :destroy, :as => "destroy_enrollment"
    end

    scope(controller: :terms_api) do
      get 'accounts/:account_id/terms', action: :index, as: 'enrollment_terms'
      get 'accounts/:account_id/terms/:id', action: :show, as: 'enrollment_term'
    end

    scope(controller: :terms) do
      post 'accounts/:account_id/terms', action: :create
      put 'accounts/:account_id/terms/:id', action: :update
      delete 'accounts/:account_id/terms/:id', action: :destroy
    end

    scope(controller: :authentication_audit_api) do
      get 'audit/authentication/logins/:login_id', action: :for_login, as: 'audit_authentication_login'
      get 'audit/authentication/accounts/:account_id', action: :for_account, as: 'audit_authentication_account'
      get 'audit/authentication/users/:user_id', action: :for_user, as: 'audit_authentication_user'
    end

    scope(controller: :grade_change_audit_api) do
      get 'audit/grade_change/assignments/:assignment_id', action: :for_assignment, as: 'audit_grade_change_assignment'
      get 'audit/grade_change/courses/:course_id', action: :for_course, as: 'audit_grade_change_course'
      get 'audit/grade_change/students/:student_id', action: :for_student, as: 'audit_grade_change_student'
      get 'audit/grade_change/graders/:grader_id', action: :for_grader, as: 'audit_grade_change_grader'
      get 'audit/grade_change/courses/:course_id/assignments/:assignment_id',
          action: :for_course_and_other_parameters, as: 'audit_grade_change_course_assignment'
      get 'audit/grade_change/courses/:course_id/assignments/:assignment_id/graders/:grader_id',
          action: :for_course_and_other_parameters, as: 'audit_grade_change_course_assignment_grader'
      get 'audit/grade_change/courses/:course_id/assignments/:assignment_id/graders/:grader_id/students/:student_id',
          action: :for_course_and_other_parameters, as: 'audit_grade_change_course_assignment_grader_student'
      get 'audit/grade_change/courses/:course_id/assignments/:assignment_id/students/:student_id',
          action: :for_course_and_other_parameters, as: 'audit_grade_change_course_assignment_student'
      get 'audit/grade_change/courses/:course_id/graders/:grader_id',
          action: :for_course_and_other_parameters, as: 'audit_grade_change_course_grader'
      get 'audit/grade_change/courses/:course_id/graders/:grader_id/students/:student_id',
          action: :for_course_and_other_parameters, as: 'audit_grade_change_course_grader_student'
      get 'audit/grade_change/courses/:course_id/students/:student_id',
          action: :for_course_and_other_parameters, as: 'audit_grade_change_course_student'
      get 'audit/grade_change', action: :query, as: 'audit_grade_change'
    end

    scope(controller: :course_audit_api) do
      get 'audit/course/courses/:course_id', action: :for_course, as: 'audit_course_for_course'
      get 'audit/course/accounts/:account_id', action: :for_account, as: 'audit_course_for_account'
    end

    scope(controller: :assignment_overrides) do
      get 'courses/:course_id/assignments/:assignment_id/overrides', action: :index
      post 'courses/:course_id/assignments/:assignment_id/overrides', action: :create
      get 'courses/:course_id/assignments/:assignment_id/overrides/:id', action: :show, as: 'assignment_override'
      put 'courses/:course_id/assignments/:assignment_id/overrides/:id', action: :update
      delete 'courses/:course_id/assignments/:assignment_id/overrides/:id', action: :destroy
      get 'sections/:course_section_id/assignments/:assignment_id/override', action: :section_alias
      get 'groups/:group_id/assignments/:assignment_id/override', action: :group_alias
      get 'courses/:course_id/assignments/overrides', action: :batch_retrieve
      put 'courses/:course_id/assignments/overrides', action: :batch_update
      post 'courses/:course_id/assignments/overrides', action: :batch_create
    end

    scope(controller: :assignments_api) do
      get "courses/:course_id/assignments/gradeable_students", controller: :submissions_api, action: :multiple_gradeable_students, as: "multiple_assignments_gradeable_students"
      get 'courses/:course_id/assignments', action: :index, as: 'course_assignments'
      get 'courses/:course_id/assignment_groups/:assignment_group_id/assignments', action: :index, as: 'course_assignment_group_assignments'
      get 'users/:user_id/courses/:course_id/assignments', action: :user_index, as: 'user_course_assignments'
      put 'courses/:course_id/assignments/bulk_update', action: :bulk_update
      get 'courses/:course_id/assignments/:id', action: :show, as: 'course_assignment'
      post 'courses/:course_id/assignments', action: :create
      put 'courses/:course_id/assignments/:id', action: :update
      post 'courses/:course_id/assignments/:assignment_id/duplicate', action: :duplicate
      delete 'courses/:course_id/assignments/:id', action: :destroy, controller: :assignments
    end

    scope(controller: 'assignment_extensions') do
      post "courses/:course_id/assignments/:assignment_id/extensions", action: :create, as: "course_assignment_extensions_create"
    end

    scope(controller: :peer_reviews_api) do
      get 'courses/:course_id/assignments/:assignment_id/peer_reviews', action: :index
      get 'sections/:section_id/assignments/:assignment_id/peer_reviews', action: :index
      get 'courses/:course_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews', action: :index
      get 'sections/:section_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews', action: :index
      post 'courses/:course_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews', action: :create
      post 'sections/:section_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews', action: :create
      delete 'courses/:course_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews', action: :destroy
      delete 'sections/:section_id/assignments/:assignment_id/submissions/:submission_id/peer_reviews', action: :destroy
    end

    scope(controller: :moderation_set) do
      get 'courses/:course_id/assignments/:assignment_id/moderated_students', action: :index, as: :moderated_students
      post 'courses/:course_id/assignments/:assignment_id/moderated_students', action: :create, as: :add_moderated_students
    end

    scope(controller: :submissions_api) do
      [%w(course course), %w(section course_section)].each do |(context, path_prefix)|
        post "#{context.pluralize}/:#{context}_id/submissions/update_grades", action: :bulk_update
        put "#{context.pluralize}/:#{context}_id/assignments/:assignment_id/submissions/:user_id/read", action: :mark_submission_read, as: "#{context}_submission_mark_read"
        delete "#{context.pluralize}/:#{context}_id/assignments/:assignment_id/submissions/:user_id/read", action: :mark_submission_unread, as: "#{context}_submission_mark_unread"
        get "#{context.pluralize}/:#{context}_id/assignments/:assignment_id/submissions", action: :index, as: "#{path_prefix}_assignment_submissions"
        get "#{context.pluralize}/:#{context}_id/students/submissions", controller: :submissions_api, action: :for_students, as: "#{path_prefix}_student_submissions"
        get "#{context.pluralize}/:#{context}_id/assignments/:assignment_id/submissions/:user_id", action: :show, as: "#{path_prefix}_assignment_submission"
        post "#{context.pluralize}/:#{context}_id/assignments/:assignment_id/submissions", action: :create, controller: :submissions
        post "#{context.pluralize}/:#{context}_id/assignments/:assignment_id/submissions/:user_id/files", action: :create_file
        put "#{context.pluralize}/:#{context}_id/assignments/:assignment_id/submissions/:user_id", action: :update
        post "#{context.pluralize}/:#{context}_id/assignments/:assignment_id/submissions/update_grades", action: :bulk_update
        get "#{context.pluralize}/:#{context}_id/assignments/:assignment_id/submission_summary", action: :submission_summary, as: "#{path_prefix}_assignment_submission_summary"
      end
      get "courses/:course_id/assignments/:assignment_id/gradeable_students", action: :gradeable_students, as: "course_assignment_gradeable_students"
    end

    scope(controller: :anonymous_provisional_grades) do
      get "courses/:course_id/assignments/:assignment_id/anonymous_provisional_grades/status",
        action: :status, as: "course_assignment_anonymous_provisional_status"
    end

    scope(controller: :provisional_grades) do
      put "courses/:course_id/assignments/:assignment_id/provisional_grades/bulk_select",
        action: :bulk_select, as: 'bulk_select_provisional_grades'
      get "courses/:course_id/assignments/:assignment_id/provisional_grades/status",
        action: :status, as: "course_assignment_provisional_status"
      post "courses/:course_id/assignments/:assignment_id/provisional_grades/publish",
        action: :publish, as: 'publish_provisional_grades'
      put "courses/:course_id/assignments/:assignment_id/provisional_grades/:provisional_grade_id/select",
        action: :select, as: 'select_provisional_grade'
    end

    scope(controller: :submission_comments_api) do
      post '/courses/:course_id/assignments/:assignment_id/submissions/:user_id/comments/files', action: :create_file
      put 'courses/:course_id/assignments/:assignment_id/submissions/:user_id/comments/:id', action: :update
      delete 'courses/:course_id/assignments/:assignment_id/submissions/:user_id/comments/:id', action: :destroy
    end

    post '/courses/:course_id/assignments/:assignment_id/submissions/:user_id/annotation_notification', action: :annotation_notification, controller: :submission_comments_api

    scope(controller: :gradebook_history_api) do
      get "courses/:course_id/gradebook_history/days", action: :days, as: 'gradebook_history'
      get "courses/:course_id/gradebook_history/feed", action: :feed, as: 'gradebook_history_feed'
      get "courses/:course_id/gradebook_history/:date", action: :day_details, as: 'gradebook_history_for_day'
      get "courses/:course_id/gradebook_history/:date/graders/:grader_id/assignments/:assignment_id/submissions", action: :submissions, as: 'gradebook_history_submissions'
    end

    get 'courses/:course_id/assignment_groups', controller: :assignment_groups, action: :index
    scope(controller: :assignment_groups_api) do
      resources :assignment_groups, path: "courses/:course_id/assignment_groups", name_prefix: "course_", except: :index
    end

    scope(controller: :discussion_topics) do
      get 'courses/:course_id/discussion_topics', action: :index, as: 'course_discussion_topics'
      get 'groups/:group_id/discussion_topics', action: :index, as: 'group_discussion_topics'
    end

    scope(controller: :content_migrations) do
      %w(account course group user).each do |context|
        get "#{context.pluralize}/:#{context}_id/content_migrations/migrators", action: :available_migrators, as: "#{context}_content_migration_migrators_list"
        get "#{context.pluralize}/:#{context}_id/content_migrations/:id", action: :show, as: "#{context}_content_migration"
        get "#{context.pluralize}/:#{context}_id/content_migrations", action: :index, as: "#{context}_content_migration_list"
        post "#{context.pluralize}/:#{context}_id/content_migrations", action: :create, as: "#{context}_content_migration_create"
        put "#{context.pluralize}/:#{context}_id/content_migrations/:id", action: :update, as: "#{context}_content_migration_update"
        get "#{context.pluralize}/:#{context}_id/content_migrations/:id/selective_data", action: :content_list, as: "#{context}_content_migration_selective_data"
      end
    end

    scope(controller: :migration_issues) do
      %w(account course group user).each do |context|
        get "#{context.pluralize}/:#{context}_id/content_migrations/:content_migration_id/migration_issues/:id", action: :show, as: "#{context}_content_migration_migration_issue"
        get "#{context.pluralize}/:#{context}_id/content_migrations/:content_migration_id/migration_issues", action: :index, as: "#{context}_content_migration_migration_issue_list"
        post "#{context.pluralize}/:#{context}_id/content_migrations/:content_migration_id/migration_issues", action: :create, as: "#{context}_content_migration_migration_issue_create"
        put "#{context.pluralize}/:#{context}_id/content_migrations/:content_migration_id/migration_issues/:id", action: :update, as: "#{context}_content_migration_migration_issue_update"
      end
    end

    scope(controller: :discussion_topics_api) do
      %w(course group).each do |context|
        get "#{context.pluralize}/:#{context}_id/discussion_topics/:topic_id", action: :show, as: "#{context}_discussion_topic"
        post "#{context.pluralize}/:#{context}_id/discussion_topics", controller: :discussion_topics, action: :create
        put "#{context.pluralize}/:#{context}_id/discussion_topics/:topic_id", controller: :discussion_topics, action: :update
        post "#{context.pluralize}/:#{context}_id/discussion_topics/reorder", controller: :discussion_topics, action: :reorder
        delete "#{context.pluralize}/:#{context}_id/discussion_topics/:topic_id", controller: :discussion_topics, action: :destroy

        get "#{context.pluralize}/:#{context}_id/discussion_topics/:topic_id/view", action: :view, as: "#{context}_discussion_topic_view"
        post "#{context.pluralize}/:#{context}_id/discussion_topics/:topic_id/duplicate", action: :duplicate
        get "#{context.pluralize}/:#{context}_id/discussion_topics/:topic_id/entry_list", action: :entry_list, as: "#{context}_discussion_topic_entry_list"
        post "#{context.pluralize}/:#{context}_id/discussion_topics/:topic_id/entries", action: :add_entry, as: "#{context}_discussion_add_entry"
        get "#{context.pluralize}/:#{context}_id/discussion_topics/:topic_id/entries", action: :entries, as: "#{context}_discussion_entries"
        post "#{context.pluralize}/:#{context}_id/discussion_topics/:topic_id/entries/:entry_id/replies", action: :add_reply, as: "#{context}_discussion_add_reply"
        get "#{context.pluralize}/:#{context}_id/discussion_topics/:topic_id/entries/:entry_id/replies", action: :replies, as: "#{context}_discussion_replies"
        put "#{context.pluralize}/:#{context}_id/discussion_topics/:topic_id/entries/:id", controller: :discussion_entries, action: :update, as: "#{context}_discussion_update_reply"
        delete "#{context.pluralize}/:#{context}_id/discussion_topics/:topic_id/entries/:id", controller: :discussion_entries, action: :destroy, as: "#{context}_discussion_delete_reply"

        put "#{context.pluralize}/:#{context}_id/discussion_topics/:topic_id/read", action: :mark_topic_read, as: "#{context}_discussion_topic_mark_read"
        delete "#{context.pluralize}/:#{context}_id/discussion_topics/:topic_id/read", action: :mark_topic_unread, as: "#{context}_discussion_topic_mark_unread"
        put "#{context.pluralize}/:#{context}_id/discussion_topics/:topic_id/read_all", action: :mark_all_read, as: "#{context}_discussion_topic_mark_all_read"
        delete "#{context.pluralize}/:#{context}_id/discussion_topics/:topic_id/read_all", action: :mark_all_unread, as: "#{context}_discussion_topic_mark_all_unread"
        put "#{context.pluralize}/:#{context}_id/discussion_topics/:topic_id/entries/:entry_id/read", action: :mark_entry_read, as: "#{context}_discussion_topic_discussion_entry_mark_read"
        delete "#{context.pluralize}/:#{context}_id/discussion_topics/:topic_id/entries/:entry_id/read", action: :mark_entry_unread, as: "#{context}_discussion_topic_discussion_entry_mark_unread"
        post "#{context.pluralize}/:#{context}_id/discussion_topics/:topic_id/entries/:entry_id/rating",
             action: :rate_entry, as: "#{context}_discussion_topic_discussion_entry_rate"
        put "#{context.pluralize}/:#{context}_id/discussion_topics/:topic_id/subscribed", action: :subscribe_topic, as: "#{context}_discussion_topic_subscribe"
        delete "#{context.pluralize}/:#{context}_id/discussion_topics/:topic_id/subscribed", action: :unsubscribe_topic, as: "#{context}_discussion_topic_unsubscribe"
      end
    end

    scope(controller: :collaborations) do
      get 'collaborations/:id/members', action: :members, as: 'collaboration_members'
      get 'courses/:course_id/potential_collaborators', action: :potential_collaborators, as: 'course_potential_collaborators'
      get 'groups/:group_id/potential_collaborators', action: :potential_collaborators, as: 'group_potential_collaborators'
    end

    scope(controller: 'microsoft_sync/groups') do
      post "courses/:course_id/microsoft_sync/group", action: :create
      get "courses/:course_id/microsoft_sync/group", action: :show
      delete "courses/:course_id/microsoft_sync/group", action: :destroy
    end

    scope(controller: :external_tools) do
      post "/accounts/:account_id/external_tools/rce_favorites/:id", action: :add_rce_favorite, as: :account_external_tools_add_rce_favorite
      delete "/accounts/:account_id/external_tools/rce_favorites/:id", action: :remove_rce_favorite, as: :account_external_tools_remove_rce_favorite

      get "/courses/:course_id/external_tools/visible_course_nav_tools", action: :visible_course_nav_tools, as: :visible_course_nav_tools

      %w(course account).each do |context|
        get "#{context}s/:#{context}_id/external_tools/sessionless_launch", action: :generate_sessionless_launch, as: "#{context}_external_tool_sessionless_launch"
        get "#{context}s/:#{context}_id/external_tools/:external_tool_id", action: :show, as: "#{context}_external_tool_show"
        get "#{context}s/:#{context}_id/external_tools", action: :index, as: "#{context}_external_tools"
        post "#{context}s/:#{context}_id/external_tools", action: :create, as: "#{context}_external_tools_create"
        post "#{context}s/:#{context}_id/create_tool_with_verification", action: :create_tool_with_verification, as: "#{context}_create_tool_with_verification"
        put "#{context}s/:#{context}_id/external_tools/:external_tool_id", action: :update, as: "#{context}_external_tools_update"
        delete "#{context}s/:#{context}_id/external_tools/:external_tool_id", action: :destroy, as: "#{context}_external_tools_delete"
      end

      get "groups/:group_id/external_tools", action: :index, as: "group_external_tools"
    end

    scope(controller: 'lti/lti_apps') do
      %w(course account).each do |context|
        get "#{context}s/:#{context}_id/lti_apps/launch_definitions", action: :launch_definitions, as: "#{context}_launch_definitions"
        get "#{context}s/:#{context}_id/lti_apps", action: :index, as: "#{context}_app_definitions"
      end
    end

    scope(controller: 'lti/tool_proxy') do
      %w(course account).each do |context|
        delete "#{context}s/:#{context}_id/tool_proxies/:tool_proxy_id", action: :destroy,
               as: "#{context}_delete_tool_proxy"
        put "#{context}s/:#{context}_id/tool_proxies/:tool_proxy_id", action: :update,
            as: "#{context}_update_tool_proxy"

        delete "#{context}s/:#{context}_id/tool_proxies/:tool_proxy_id/update", action: :dismiss_update,
               as: "#{context}_dismiss_update_tool_proxy"
        put "#{context}s/:#{context}_id/tool_proxies/:tool_proxy_id/update", action: :accept_update,
            as: "#{context}_accept_update_tool_proxy"

        get "#{context}s/:#{context}_id/tool_proxies/:tool_proxy_id/recreate_subscriptions", action: :recreate_subscriptions,
            as: "#{context}_recreate_subscriptions_tool_proxy"
      end
    end

    scope(controller: :external_feeds) do
      %w(course group).each do |context|
        get "#{context}s/:#{context}_id/external_feeds", action: :index, as: "#{context}_external_feeds"
        post "#{context}s/:#{context}_id/external_feeds", action: :create, as: "#{context}_external_feeds_create"
        delete "#{context}s/:#{context}_id/external_feeds/:external_feed_id", action: :destroy, as: "#{context}_external_feeds_delete"
      end
    end

    scope(controller: :sis_imports_api) do
      post 'accounts/:account_id/sis_imports', action: :create
      put 'accounts/:account_id/sis_imports/abort_all_pending', action: :abort_all_pending
      get 'accounts/:account_id/sis_imports/importing', action: :importing
      get 'accounts/:account_id/sis_imports/:id', action: :show
      get 'accounts/:account_id/sis_imports', action: :index, as: "account_sis_imports"
      put 'accounts/:account_id/sis_imports/:id/abort', action: :abort
      put 'accounts/:account_id/sis_imports/:id/restore_states', action: :restore_states
    end

    scope(controller: :sis_import_errors_api) do
      get 'accounts/:account_id/sis_imports/:id/errors', action: :index, as: :sis_batch_import_errors
      get 'accounts/:account_id/sis_import_errors', action: :index, as: :account_sis_import_errors
    end

    scope(controller: :outcome_imports_api) do
      %w(account course).each do |context|
        post "#{context}s/:#{context}_id/outcome_imports", action: :create
        get "#{context}s/:#{context}_id/outcome_imports/:id", action: :show
      end
    end

    scope(controller: :outcome_proficiency_api) do
      post "accounts/:account_id/outcome_proficiency", action: :create
      get "accounts/:account_id/outcome_proficiency", action: :show
      post "courses/:course_id/outcome_proficiency", action: :create
      get "courses/:course_id/outcome_proficiency", action: :show
    end

    scope(controller: :users) do
      get 'users/self/activity_stream', action: :activity_stream, as: 'user_activity_stream'
      get 'users/activity_stream', action: :activity_stream # deprecated
      get 'users/self/activity_stream/summary', action: :activity_stream_summary, as: 'user_activity_stream_summary'
      delete 'users/self/activity_stream/:id', action: 'ignore_stream_item'
      delete 'users/self/activity_stream', action: 'ignore_all_stream_items'

      put "users/:user_id/followers/self", action: :follow
      delete "users/:user_id/followers/self", action: :unfollow

      get 'users/self/todo', action: :todo_items, as: 'user_todo_list_items'
      get 'users/self/todo_item_count', action: :todo_item_count
      get 'users/self/upcoming_events', action: :upcoming_events
      get 'users/:user_id/missing_submissions', action: :missing_submissions, as: 'user_missing_submissions'

      delete 'users/self/todo/:asset_string/:purpose', action: :ignore_item, as: 'users_todo_ignore'
      post 'accounts/:account_id/users', action: :create
      post 'accounts/:account_id/self_registration', action: :create_self_registered_user
      get 'accounts/:account_id/users', action: :api_index, as: 'account_users'

      get 'users/:id', action: :api_show
      put 'users/:id', action: :update
      delete 'users/:id', action: :destroy, as: 'destroy_user'
      post 'users/:user_id/files', action: :create_file

      get  'users/:user_id/files', controller: :files, action: :api_index, as: 'user_files'
      get 'users/:user_id/folders', controller: :folders, action: :list_all_folders, as: 'user_folders'
      post 'users/:user_id/folders', controller: :folders, action: :create
      get 'users/:user_id/folders/by_path/*full_path', controller: :folders, action: :resolve_path
      get 'users/:user_id/folders/by_path', controller: :folders, action: :resolve_path
      get 'users/:user_id/folders/:id', controller: :folders, action: :show, as: 'user_folder'

      get 'users/:id/settings', controller: 'users', action: 'settings'
      put 'users/:id/settings', controller: 'users', action: 'settings', as: 'user_settings'

      get 'users/:id/colors', controller: 'users', action: 'get_custom_colors'
      get 'users/:id/colors/:asset_string', controller: 'users', action: 'get_custom_color'
      put 'users/:id/colors/:asset_string', controller: 'users', action: 'set_custom_color'

      get 'users/:id/new_user_tutorial_statuses', action: 'get_new_user_tutorial_statuses'
      put 'users/:id/new_user_tutorial_statuses/:page_name', action: 'set_new_user_tutorial_status'

      get 'users/:id/dashboard_positions', controller: 'users', action: 'get_dashboard_positions'
      put 'users/:id/dashboard_positions', controller: 'users', action: 'set_dashboard_positions'

      put 'users/:id/merge_into/:destination_user_id', controller: 'users', action: 'merge_into'
      put 'users/:id/merge_into/accounts/:destination_account_id/users/:destination_user_id', controller: 'users', action: 'merge_into'
      post 'users/:id/split', controller: 'users', action: 'split', as: 'split'

      post 'users/self/pandata_events_token', controller: 'users', action: 'pandata_events_token'

      get 'dashboard/dashboard_cards', controller: 'users', action: 'dashboard_cards', as: :dashboard_dashboard_cards

      get 'users/:id/graded_submissions', controller: 'users', action: 'user_graded_submissions', as: :user_submissions

      post 'users/:id/clear_cache', :action => :clear_cache, :as => 'clear_cache'

      scope(controller: :user_observees) do
        get    'users/:user_id/observers', action: :observers, as: 'user_observers'
        get    'users/:user_id/observees', action: :index, as: 'user_observees'
        post   'users/:user_id/observees', action: :create
        get    'users/:user_id/observees/:observee_id', action: :show, as: 'user_observee'
        get    'users/:user_id/observers/:observer_id', action: :show_observer, as: 'user_observer'
        put    'users/:user_id/observees/:observee_id', action: :update
        delete 'users/:user_id/observees/:observee_id', action: :destroy
      end

      scope(controller: :observer_alerts_api) do
        get 'users/:user_id/observer_alerts/unread_count', action: :alerts_count
        get 'users/:user_id/observer_alerts/:student_id', action: :alerts_by_student, as: 'observer_alerts_by_student'
        put 'users/:user_id/observer_alerts/:observer_alert_id/:workflow_state', action: :update
      end

      scope(controller: :observer_alert_thresholds_api) do
        get 'users/:user_id/observer_alert_thresholds', action: :index
        post 'users/:user_id/observer_alert_thresholds', action: :create
        get 'users/:user_id/observer_alert_thresholds/:observer_alert_threshold_id', action: :show
        put 'users/:user_id/observer_alert_thresholds/:observer_alert_threshold_id', action: :update
        delete 'users/:user_id/observer_alert_thresholds/:observer_alert_threshold_id', action: :destroy
      end

      scope(controller: :observer_pairing_codes_api) do
        post 'users/:user_id/observer_pairing_codes', action: :create
      end
    end

    scope(controller: :custom_data) do
      glob = '(/*scope)'
      get "users/:user_id/custom_data#{glob}", action: 'get_data'
      put "users/:user_id/custom_data#{glob}", action: 'set_data'
      delete "users/:user_id/custom_data#{glob}", action: 'delete_data'
    end

    scope(controller: :pseudonyms) do
      get 'accounts/:account_id/logins', action: :index, as: 'account_pseudonyms'
      get 'users/:user_id/logins', action: :index, as: 'user_pseudonyms'
      post 'accounts/:account_id/logins', action: :create
      put 'accounts/:account_id/logins/:id', action: :update
      delete 'users/:user_id/logins/:id', action: :destroy
    end

    scope(controller: :accounts) do
      get 'accounts', action: :index, as: :accounts
      get 'course_accounts', :action => :course_accounts, :as => :course_accounts
      get 'accounts/:id', action: :show, as: :account
      put 'accounts/:id', action: :update
      get 'accounts/:account_id/terms_of_service', action: :terms_of_service
      get 'accounts/:account_id/help_links', action: :help_links
      get 'accounts/:account_id/courses', action: :courses_api, as: 'account_courses'
      get 'accounts/:account_id/sub_accounts', action: :sub_accounts, as: 'sub_accounts'
      get 'accounts/:account_id/courses/:id', controller: :courses, action: :show, as: 'account_course_show'
      get 'accounts/:account_id/permissions', action: :permissions
      delete 'accounts/:account_id/users/:user_id', action: :remove_user
      put 'accounts/:account_id/users/:user_id/restore', action: :restore_user
    end

    scope(controller: :sub_accounts) do
      post 'accounts/:account_id/sub_accounts', action: :create
      delete 'accounts/:account_id/sub_accounts/:id', action: :destroy
    end

    scope(controller: :role_overrides) do
      get 'accounts/:account_id/roles', action: :api_index, as: 'account_roles'
      get 'accounts/:account_id/roles/:id', action: :show
      post 'accounts/:account_id/roles', action: :add_role
      post 'accounts/:account_id/roles/:id/activate', action: :activate_role
      put 'accounts/:account_id/roles/:id', action: :update
      delete 'accounts/:account_id/roles/:id', action: :remove_role
      get 'accounts/:account_id/permissions/:permission', action: :check_account_permission
    end

    scope(controller: :account_reports) do
      get 'accounts/:account_id/reports/:report', action: :index
      get 'accounts/:account_id/reports', action: :available_reports
      get 'accounts/:account_id/reports/:report/:id', action: :show
      post 'accounts/:account_id/reports/:report', action: :create, as: 'account_create_report'
      delete 'accounts/:account_id/reports/:report/:id', action: :destroy
    end

    scope(controller: :admins) do
      post 'accounts/:account_id/admins', action: :create
      delete 'accounts/:account_id/admins/:user_id', action: :destroy
      get 'accounts/:account_id/admins', action: :index, as: 'account_admins'
    end

    scope(controller: :authentication_providers) do
      get 'accounts/:account_id/sso_settings', action: :show_sso_settings, as: 'account_show_sso_settings_url'
      put 'accounts/:account_id/sso_settings', action: :update_sso_settings, as: 'account_update_sso_settings_url'

      get 'accounts/:account_id/authentication_providers', action: :index
      get 'accounts/:account_id/authentication_providers/:id', action: :show
      post 'accounts/:account_id/authentication_providers', action: :create, as: 'account_create_ap'
      put 'accounts/:account_id/authentication_providers/:id', action: :update, as: 'account_update_ap'
      delete 'accounts/:account_id/authentication_providers/:id', action: :destroy, as: 'account_delete_ap'
    end

    get 'users/:user_id/page_views', controller: :page_views, action: :index, as: 'user_page_views'
    get 'users/:user_id/profile', controller: :profile, action: :settings
    get 'users/:user_id/avatars', controller: :profile, action: :profile_pics

    # deprecated routes, second one is solely for YARD. preferred API is api/v1/search/recipients
    get 'conversations/find_recipients', controller: :search, action: :recipients
    get 'conversations/find_recipients', controller: :conversations, action: :find_recipients

    scope(controller: :conversations) do
      get 'conversations', action: :index, as: 'conversations'
      post 'conversations', action: :create
      get 'conversations/deleted', action: :deleted_index, as: 'deleted_conversations'
      put 'conversations/restore', action: :restore_message
      post 'conversations/mark_all_as_read', action: :mark_all_as_read
      get 'conversations/batches', action: :batches, as: 'conversations_batches'
      get 'conversations/unread_count', action: :unread_count
      get 'conversations/:id', action: :show
      put 'conversations/:id', action: :update # stars, subscribed-ness, workflow_state
      delete 'conversations/:id', action: :destroy
      post 'conversations/:id/add_message', action: :add_message
      post 'conversations/:id/add_recipients', action: :add_recipients
      post 'conversations/:id/remove_messages', action: :remove_messages
      put 'conversations', action: :batch_update
      delete 'conversations/:id/delete_for_all', action: :delete_for_all
    end

    scope(controller: :communication_channels) do
      get 'users/:user_id/communication_channels', action: :index, as: 'communication_channels'
      post 'users/:user_id/communication_channels', action: :create
      post 'users/:user_id/communication_channels/:id', action: :reset_bounce_count, as: 'reset_bounce_count'
      get 'accounts/:account_id/bounced_communication_channels.csv', action: :bouncing_channel_report, defaults: { format: :csv }
      get 'accounts/:account_id/bounced_communication_channels', action: :bouncing_channel_report
      post 'accounts/:account_id/bounced_communication_channels/reset', action: :bulk_reset_bounce_counts
      get 'accounts/:account_id/unconfirmed_communication_channels.csv', action: :unconfirmed_channel_report, defaults: { format: :csv }
      get 'accounts/:account_id/unconfirmed_communication_channels', action: :unconfirmed_channel_report
      post 'accounts/:account_id/unconfirmed_communication_channels/confirm', action: :bulk_confirm
      delete 'users/self/communication_channels/push', action: :delete_push_token
      delete 'users/:user_id/communication_channels/:id', action: :destroy
      delete 'users/:user_id/communication_channels/:type/:address', action: :destroy, constraints: { address: %r{[^/?]+} }
    end

    scope(controller: :notification_preferences) do
      get 'users/:user_id/communication_channels/:communication_channel_id/notification_preferences', action: :index
      get 'users/:user_id/communication_channels/:communication_channel_id/notification_preference_categories', action: :category_index
      get 'users/:user_id/communication_channels/:type/:address/notification_preferences', action: :index, constraints: { address: %r{[^/?]+} }
      get 'users/:user_id/communication_channels/:communication_channel_id/notification_preferences/:notification', action: :show
      get 'users/:user_id/communication_channels/:type/:address/notification_preferences/:notification', action: :show, constraints: { address: %r{[^/?]+} }
      put 'users/self/communication_channels/:communication_channel_id/notification_preferences/:notification', action: :update
      put 'users/self/communication_channels/:type/:address/notification_preferences/:notification', action: :update, constraints: { address: %r{[^/?]+} }
      put 'users/self/communication_channels/:communication_channel_id/notification_preferences', action: :update_all
      put 'users/self/communication_channels/:type/:address/notification_preferences', action: :update_all, constraints: { address: %r{[^/?]+} }
      put 'users/self/communication_channels/:communication_channel_id/notification_preference_categories/:category', action: :update_preferences_by_category
    end

    scope(controller: :comm_messages_api) do
      get 'comm_messages', action: :index, as: 'comm_messages'
    end

    scope(controller: :services_api) do
      get 'services/kaltura', action: :show_kaltura_config
      post 'services/kaltura_session', action: :start_kaltura_session
    end

    scope(controller: :calendar_events_api) do
      get 'calendar_events', action: :index, as: 'calendar_events'
      get 'users/:user_id/calendar_events', action: :user_index, as: 'user_calendar_events'
      post 'calendar_events', action: :create
      get 'calendar_events/visible_contexts', action: :visible_contexts
      get 'calendar_events/:id', action: :show, as: 'calendar_event'
      put 'calendar_events/:id', action: :update
      delete 'calendar_events/:id', action: :destroy
      post 'calendar_events/:id/reservations', action: :reserve
      post 'calendar_events/:id/reservations/:participant_id', action: :reserve, as: 'calendar_event_reserve'
      get 'calendar_events/:id/participants', action: :participants, as: 'calendar_event_participants'
      post 'calendar_events/save_selected_contexts', action: :save_selected_contexts

      get 'courses/:course_id/calendar_events/timetable', action: :get_course_timetable
      post 'courses/:course_id/calendar_events/timetable', action: :set_course_timetable
      post 'courses/:course_id/calendar_events/timetable_events', action: :set_course_timetable_events
    end

    scope(controller: :appointment_groups) do
      get 'appointment_groups', action: :index, as: 'appointment_groups'
      post 'appointment_groups', action: :create
      get 'appointment_groups/next_appointment', action: :next_appointment
      get 'appointment_groups/:id', action: :show, as: 'appointment_group'
      put 'appointment_groups/:id', action: :update
      delete 'appointment_groups/:id', action: :destroy
      get 'appointment_groups/:id/users', action: :users, as: 'appointment_group_users'
      get 'appointment_groups/:id/groups', action: :groups, as: 'appointment_group_groups'
    end

    scope(controller: :groups) do
      resources :groups, except: :index
      get 'users/self/groups', action: :index, as: "current_user_groups"
      get 'accounts/:account_id/groups', action: :context_index, as: 'account_user_groups'
      get 'courses/:course_id/groups', action: :context_index, as: 'course_user_groups'
      get 'groups/:group_id/users', action: :users, as: 'group_users'
      get 'groups/:group_id/permissions', action: :permissions
      post 'groups/:group_id/invite', action: :invite
      post 'groups/:group_id/files', action: :create_file
      post 'groups/:group_id/preview_html', action: :preview_html
      post 'group_categories/:group_category_id/groups', action: :create
      get 'groups/:group_id/activity_stream', action: :activity_stream, as: 'group_activity_stream'
      get 'groups/:group_id/activity_stream/summary', action: :activity_stream_summary, as: 'group_activity_stream_summary'
      put "groups/:group_id/followers/self", action: :follow
      delete "groups/:group_id/followers/self", action: :unfollow
      get 'groups/:group_id/collaborations', controller: :collaborations, action: :api_index, as: 'group_collaborations_index'
      delete 'groups/:group_id/collaborations/:id', controller: :collaborations, action: :destroy

      scope(controller: :group_memberships) do
        resources :memberships, path: "groups/:group_id/memberships", name_prefix: "group_", controller: :group_memberships
        resources :users, path: "groups/:group_id/users", name_prefix: "group_", controller: :group_memberships, except: [:index, :create]
      end

      get  'groups/:group_id/files', controller: :files, action: :api_index, as: 'group_files'
      get 'groups/:group_id/folders', controller: :folders, action: :list_all_folders, as: 'group_folders'
      post 'groups/:group_id/folders', controller: :folders, action: :create
      get 'groups/:group_id/folders/by_path/*full_path', controller: :folders, action: :resolve_path
      get 'groups/:group_id/folders/by_path', controller: :folders, action: :resolve_path
      get 'groups/:group_id/folders/media', controller: :folders, action: :media_folder
      get 'groups/:group_id/folders/:id', controller: :folders, action: :show, as: 'group_folder'
    end

    scope(controller: :developer_key_account_bindings) do
      post 'accounts/:account_id/developer_keys/:developer_key_id/developer_key_account_bindings', action: :create_or_update
      get 'accounts/:account_id/developer_key_account_bindings', action: :index
    end

    scope(controller: :developer_keys) do
      delete 'developer_keys/:id', action: :destroy
      put 'developer_keys/:id', action: :update

      get 'accounts/:account_id/developer_keys', action: :index, as: 'account_developer_keys'
      post 'accounts/:account_id/developer_keys', action: :create
    end

    scope(controller: :internet_image) do
      get 'image_search', action: :image_search
      post 'image_selection/:id', action: :image_selection
    end

    scope(controller: :immersive_reader) do
      get 'immersive_reader/authenticate', action: :authenticate
    end

    scope(controller: :search) do
      get 'search/rubrics', action: 'rubrics', as: 'search_rubrics'
      get 'search/recipients', action: 'recipients', as: 'search_recipients'
      get 'search/all_courses', action: 'all_courses', as: 'search_all_courses'
    end

    post 'files/:id/create_success', controller: :files, action: :api_create_success, as: 'files_create_success'
    get 'files/:id/create_success', controller: :files, action: :api_create_success

    scope(controller: :files) do
      post 'files/:id/create_success', action: :api_create_success
      get 'files/:id/create_success', action: :api_create_success
      match '/api/v1/files/:id/create_success', via: [:options], action: :api_create_success_cors
      post 'files/capture', action: :api_capture, as: 'files_capture'


      # 'attachment' (rather than 'file') is used below so modules API can use polymorphic_url to generate an item API link
      get 'files/:id', action: :api_show, as: 'attachment'
      delete 'files/:id', action: :destroy
      put 'files/:id', action: :api_update
      post 'files/:id/reset_verifier', action: :reset_verifier

      # exists as an alias of GET for backwards compatibility
      #
      # older API clients were told to POST to the value of the Location header
      # returned after upload to S3, when that was the create_success URL.
      # that's no longer necessary, but they are still given a Location header
      # pointed at this endpoint which they can GET for the file details (which
      # create_success would have provided).
      #
      # such behavior is now undocumented, and subject to removal once open
      # sourcing of inst-fs is complete.
      #
      # to actually change the file metadata (e.g. rename), the PUT route above
      # must be used.
      post 'files/:id', action: :api_show

      get 'files/:id/:uuid/status', action: :api_file_status, as: 'file_status'
      get 'files/:id/public_url', action: :public_url
      %w(course group user).each do |context|
        get "#{context}s/:#{context}_id/files/quota", action: :api_quota
        get "#{context}s/:#{context}_id/files/:id", action: :api_show, as: "#{context}_attachment"
      end
    end

    scope(controller: :folders) do
      get 'folders/:id', action: :show
      get 'folders/:id/folders', action: :api_index, as: 'list_folders'
      get 'folders/:id/files', controller: :files, action: :api_index, as: 'list_files'
      delete 'folders/:id', action: :api_destroy
      put 'folders/:id', action: :update
      post 'folders/:folder_id/folders', action: :create, as: 'create_folder'
      post 'folders/:folder_id/files', action: :create_file
      post 'folders/:dest_folder_id/copy_file', action: :copy_file
      post 'folders/:dest_folder_id/copy_folder', action: :copy_folder
    end

    scope(controller: :favorites) do
      get "users/self/favorites/courses", action: :list_favorite_courses, as: :list_favorite_courses
      post "users/self/favorites/courses/:id", action: :add_favorite_course, as: :add_favorite_course
      delete "users/self/favorites/courses/:id", action: :remove_favorite_course, as: :remove_favorite_course
      delete "users/self/favorites/courses", action: :reset_course_favorites
      get "users/self/favorites/groups", action: :list_favorite_groups, as: :list_favorite_groups
      post "users/self/favorites/groups/:id", action: :add_favorite_groups, as: :add_favorite_groups
      delete "users/self/favorites/groups/:id", action: :remove_favorite_groups, as: :remove_favorite_groups
      delete "users/self/favorites/groups", action: :reset_groups_favorites
    end

    scope(controller: :wiki_pages_api) do
      get "courses/:course_id/front_page", action: :show_front_page
      get "groups/:group_id/front_page", action: :show_front_page
      put "courses/:course_id/front_page", action: :update_front_page
      put "groups/:group_id/front_page", action: :update_front_page
      post "courses/:course_id/pages/:url/duplicate", action: :duplicate

      get "courses/:course_id/pages", action: :index, as: 'course_wiki_pages'
      get "groups/:group_id/pages", action: :index, as: 'group_wiki_pages'
      get "courses/:course_id/pages/:url", action: :show, as: 'course_wiki_page'
      get "groups/:group_id/pages/:url", action: :show, as: 'group_wiki_page'
      get "courses/:course_id/pages/:url/revisions", action: :revisions, as: 'course_wiki_page_revisions'
      get "groups/:group_id/pages/:url/revisions", action: :revisions, as: 'group_wiki_page_revisions'
      get "courses/:course_id/pages/:url/revisions/latest", action: :show_revision
      get "groups/:group_id/pages/:url/revisions/latest", action: :show_revision
      get "courses/:course_id/pages/:url/revisions/:revision_id", action: :show_revision
      get "groups/:group_id/pages/:url/revisions/:revision_id", action: :show_revision
      post "courses/:course_id/pages/:url/revisions/:revision_id", action: :revert
      post "groups/:group_id/pages/:url/revisions/:revision_id", action: :revert
      post "courses/:course_id/pages", action: :create
      post "groups/:group_id/pages", action: :create
      put "courses/:course_id/pages/:url", action: :update
      put "groups/:group_id/pages/:url", action: :update
      delete "courses/:course_id/pages/:url", action: :destroy
      delete "groups/:group_id/pages/:url", action: :destroy
    end

    scope(controller: :context_modules_api) do
      get "courses/:course_id/modules", action: :index, as: 'course_context_modules'
      get "courses/:course_id/modules/:id", action: :show, as: 'course_context_module'
      put "courses/:course_id/modules", action: :batch_update
      post "courses/:course_id/modules/:module_id/duplicate", action: :duplicate
      post "courses/:course_id/modules", action: :create, as: 'course_context_module_create'
      put "courses/:course_id/modules/:id", action: :update, as: 'course_context_module_update'
      delete "courses/:course_id/modules/:id", action: :destroy
      put "courses/:course_id/modules/:id/relock", action: :relock
    end

    scope(controller: :context_module_items_api) do
      get "courses/:course_id/modules/:module_id/items", action: :index, as: 'course_context_module_items'
      get "courses/:course_id/modules/:module_id/items/:id", action: :show, as: 'course_context_module_item'
      put "courses/:course_id/modules/:module_id/items/:id/done", action: :mark_as_done, as: 'course_context_module_item_done'
      delete "courses/:course_id/modules/:module_id/items/:id/done", action: :mark_as_not_done, as: 'course_context_module_item_not_done'
      get "courses/:course_id/module_item_redirect/:id", action: :redirect, as: 'course_context_module_item_redirect'
      get "courses/:course_id/module_item_sequence", action: :item_sequence
      post "courses/:course_id/modules/:module_id/items", action: :create, as: 'course_context_module_items_create'
      put "courses/:course_id/modules/:module_id/items/:id", action: :update, as: 'course_context_module_item_update'
      delete "courses/:course_id/modules/:module_id/items/:id", action: :destroy
      post "courses/:course_id/modules/:module_id/items/:id/mark_read", action: :mark_item_read
      post "courses/:course_id/modules/:module_id/items/:id/select_mastery_path", action: :select_mastery_path
      post "courses/:course_id/modules/items/:id/duplicate", action: :duplicate, as: :course_context_module_item_duplicate
    end

    scope(controller: 'quizzes/quiz_assignment_overrides') do
      get "courses/:course_id/quizzes/assignment_overrides", action: :index, as: 'course_quiz_assignment_overrides'
      get "courses/:course_id/new_quizzes/assignment_overrides", action: :new_quizzes, as: 'course_new_quizzes_assignment_overrides'
    end

    scope(controller: 'quizzes/quizzes_api') do
      get "courses/:course_id/quizzes", action: :index, as: 'course_quizzes'
      post "courses/:course_id/quizzes", action: :create, as: 'course_quiz_create'
      get "courses/:course_id/quizzes/:id", action: :show, as: 'course_quiz'
      put "courses/:course_id/quizzes/:id", action: :update, as: 'course_quiz_update'
      delete "courses/:course_id/quizzes/:id", action: :destroy, as: 'course_quiz_destroy'
      post "courses/:course_id/quizzes/:id/reorder", action: :reorder, as: 'course_quiz_reorder'
      post "courses/:course_id/quizzes/:id/validate_access_code", action: :validate_access_code, as: 'course_quiz_validate_access_code'
    end

    scope(controller: 'quizzes_next/quizzes_api') do
      get "courses/:course_id/all_quizzes", action: :index, as: 'course_all_quizzes'
    end

    scope(controller: 'quizzes/quiz_submission_users') do
      get "courses/:course_id/quizzes/:id/submission_users", action: :index, as: 'course_quiz_submission_users'
      post "courses/:course_id/quizzes/:id/submission_users/message", action: :message, as: 'course_quiz_submission_users_message'
    end

    scope(controller: 'quizzes/quiz_groups') do
      get "courses/:course_id/quizzes/:quiz_id/groups/:id", action: :show, as: 'course_quiz_group'
      post "courses/:course_id/quizzes/:quiz_id/groups", action: :create, as: 'course_quiz_group_create'
      put "courses/:course_id/quizzes/:quiz_id/groups/:id", action: :update, as: 'course_quiz_group_update'
      delete "courses/:course_id/quizzes/:quiz_id/groups/:id", action: :destroy, as: 'course_quiz_group_destroy'
      post "courses/:course_id/quizzes/:quiz_id/groups/:id/reorder", action: :reorder, as: 'course_quiz_group_reorder'
    end

    scope(controller: 'quizzes/quiz_questions') do
      get "courses/:course_id/quizzes/:quiz_id/questions", action: :index, as: 'course_quiz_questions'
      get "courses/:course_id/quizzes/:quiz_id/questions/:id", action: :show, as: 'course_quiz_question'
      post "courses/:course_id/quizzes/:quiz_id/questions", action: :create, as: 'course_quiz_question_create'
      put "courses/:course_id/quizzes/:quiz_id/questions/:id", action: :update, as: 'course_quiz_question_update'
      delete "courses/:course_id/quizzes/:quiz_id/questions/:id", action: :destroy, as: 'course_quiz_question_destroy'
    end

    scope(controller: 'quizzes/quiz_reports') do
      post "courses/:course_id/quizzes/:quiz_id/reports", action: :create, as: 'course_quiz_reports_create'
      delete "courses/:course_id/quizzes/:quiz_id/reports/:id", action: :abort, as: 'course_quiz_reports_abort'
      get "courses/:course_id/quizzes/:quiz_id/reports", action: :index, as: 'course_quiz_reports'
      get "courses/:course_id/quizzes/:quiz_id/reports/:id", action: :show, as: 'course_quiz_report'
    end

    scope(controller: 'quizzes/quiz_submission_files') do
      post 'courses/:course_id/quizzes/:quiz_id/submissions/self/files', action: :create, as: 'quiz_submission_files'
    end

    scope(controller: 'quizzes/quiz_submissions_api') do
      get 'courses/:course_id/quizzes/:quiz_id/submission', action: :submission, as: 'course_quiz_user_submission'
      get 'courses/:course_id/quizzes/:quiz_id/submissions', action: :index, as: 'course_quiz_submissions'
      get 'courses/:course_id/quizzes/:quiz_id/submissions/:id', action: :show, as: 'course_quiz_submission'
      get 'courses/:course_id/quizzes/:quiz_id/submissions/:id/time', action: :time, as: 'course_quiz_submission_time'
      post 'courses/:course_id/quizzes/:quiz_id/submissions', action: :create, as: 'course_quiz_submission_create'
      put 'courses/:course_id/quizzes/:quiz_id/submissions/:id', action: :update, as: 'course_quiz_submission_update'
      post 'courses/:course_id/quizzes/:quiz_id/submissions/:id/complete', action: :complete, as: 'course_quiz_submission_complete'
    end

    scope(:controller => 'quizzes/outstanding_quiz_submissions') do
      get 'courses/:course_id/quizzes/:quiz_id/outstanding_quiz_submissions', :action => :index, :path_name => 'outstanding_quiz_submission_index'
      post 'courses/:course_id/quizzes/:quiz_id/outstanding_quiz_submissions', :action => :grade, :path_name => 'outstanding_quiz_submission_grade'
    end

    scope(controller: 'quizzes/quiz_extensions') do
      post 'courses/:course_id/quizzes/:quiz_id/extensions', action: :create, as: 'course_quiz_extensions_create'
    end

    scope(controller: 'quizzes/course_quiz_extensions') do
      post 'courses/:course_id/quiz_extensions', action: :create
    end

    scope(controller: "quizzes/quiz_submission_events_api") do
      get "courses/:course_id/quizzes/:quiz_id/submissions/:id/events", action: :index, as: 'course_quiz_submission_events'
      post "courses/:course_id/quizzes/:quiz_id/submissions/:id/events", action: :create, as: 'create_quiz_submission_events'
    end

    scope(controller: 'quizzes/quiz_submission_questions') do
      get '/quiz_submissions/:quiz_submission_id/questions', action: :index, as: 'quiz_submission_questions'
      post '/quiz_submissions/:quiz_submission_id/questions', action: :answer, as: 'quiz_submission_question_answer'
      get '/quiz_submissions/:quiz_submission_id/questions/:id/formatted_answer', action: :formatted_answer, as: 'quiz_submission_question_formatted_answer'
      get '/quiz_submissions/:quiz_submission_id/questions/:id', action: :show, as: 'quiz_submission_question'
      put '/quiz_submissions/:quiz_submission_id/questions/:id/flag', action: :flag, as: 'quiz_submission_question_flag'
      put '/quiz_submissions/:quiz_submission_id/questions/:id/unflag', action: :unflag, as: 'quiz_submission_question_unflag'
    end

    scope(controller: 'quizzes/quiz_ip_filters') do
      get 'courses/:course_id/quizzes/:quiz_id/ip_filters', action: :index, as: 'course_quiz_ip_filters'
    end

    scope(controller: 'quizzes/quiz_statistics') do
      get 'courses/:course_id/quizzes/:quiz_id/statistics', action: :index, as: 'course_quiz_statistics'
    end

    scope(controller: 'polling/polls') do
      get "polls", action: :index, as: 'polls'
      post "polls", action: :create, as: 'poll_create'
      get "polls/:id", action: :show, as: 'poll'
      put "polls/:id", action: :update, as: 'poll_update'
      delete "polls/:id", action: :destroy, as: 'poll_destroy'
    end

    scope(controller: 'polling/poll_choices') do
      get "polls/:poll_id/poll_choices", action: :index, as: 'poll_choices'
      post "polls/:poll_id/poll_choices", action: :create, as: 'poll_choices_create'
      get "polls/:poll_id/poll_choices/:id", action: :show, as: 'poll_choice'
      put "polls/:poll_id/poll_choices/:id", action: :update, as: 'poll_choice_update'
      delete "polls/:poll_id/poll_choices/:id", action: :destroy, as: 'poll_choice_destroy'
    end

    scope(controller: 'polling/poll_sessions') do
      get "polls/:poll_id/poll_sessions", action: :index, as: 'poll_sessions'
      post "polls/:poll_id/poll_sessions", action: :create, as: 'poll_sessions_create'
      get "polls/:poll_id/poll_sessions/:id", action: :show, as: 'poll_session'
      put "polls/:poll_id/poll_sessions/:id", action: :update, as: 'poll_session_update'
      delete "polls/:poll_id/poll_sessions/:id", action: :destroy, as: 'poll_session_destroy'
      get "polls/:poll_id/poll_sessions/:id/open", action: :open, as: 'poll_session_publish'
      get "polls/:poll_id/poll_sessions/:id/close", action: :close, as: 'poll_session_close'

      get "poll_sessions/opened", action: :opened, as: 'poll_sessions_opened'
      get "poll_sessions/closed", action: :closed, as: 'poll_sessions_closed'
    end

    scope(controller: 'polling/poll_submissions') do
      post "polls/:poll_id/poll_sessions/:poll_session_id/poll_submissions", action: :create, as: 'poll_submissions_create'
      get "polls/:poll_id/poll_sessions/:poll_session_id/poll_submissions/:id", action: :show, as: 'poll_submission'
    end

    scope(controller: 'live_assessments/assessments') do
      get "courses/:course_id/live_assessments", action: :index, as: "course_live_assessments"
      post "courses/:course_id/live_assessments", action: :create, as: "course_live_assessment_create"
    end

    scope(controller: 'live_assessments/results') do
      get "courses/:course_id/live_assessments/:assessment_id/results", action: :index, as: "course_live_assessment_results"
      post "courses/:course_id/live_assessments/:assessment_id/results", action: :create, as: "course_live_assessment_result_create"
    end

    scope(controller: 'support_helpers/turnitin') do
      get "support_helpers/turnitin/md5", action: :md5
      get "support_helpers/turnitin/error2305", action: :error2305
      get "support_helpers/turnitin/shard", action: :shard
      get "support_helpers/turnitin/assignment", action: :assignment
      get "support_helpers/turnitin/pending", action: :pending
      get "support_helpers/turnitin/expired", action: :expired
      get "support_helpers/turnitin/refresh_lti_attachment", action: :lti_attachment
    end

    scope(controller: 'support_helpers/plagiarism_platform') do
      get "support_helpers/plagiarism_platform/add_service", action: :add_service
      get "support_helpers/plagiarism_platform/resubmit_for_assignment/:assignment_id", action: :resubmit_for_assignment
    end

    scope(controller: 'support_helpers/crocodoc') do
      get "support_helpers/crocodoc/shard", action: :shard
      get "support_helpers/crocodoc/submission", action: :submission
    end

    scope(controller: 'support_helpers/due_date_cache') do
      get "support_helpers/due_date_cache/course", action: :course
    end

    scope(controller: :outcome_groups_api) do
      %w(global account course).each do |context|
        prefix = (context == "global" ? context : "#{context}s/:#{context}_id")
        unless context == "global"
          get "#{prefix}/outcome_groups", action: :index, as: "#{context}_outcome_groups"
          get "#{prefix}/outcome_group_links", action: :link_index, as: "#{context}_outcome_group_links"
        end
        get "#{prefix}/root_outcome_group", action: :redirect, as: "#{context}_redirect"
        get "#{prefix}/outcome_groups/account_chain", action: :account_chain, as: "#{context}_account_chain"
        get "#{prefix}/outcome_groups/:id", action: :show, as: "#{context}_outcome_group"
        put "#{prefix}/outcome_groups/:id", action: :update
        delete "#{prefix}/outcome_groups/:id", action: :destroy
        get "#{prefix}/outcome_groups/:id/outcomes", action: :outcomes, as: "#{context}_outcome_group_outcomes"
        get "#{prefix}/outcome_groups/:id/available_outcomes", action: :available_outcomes, as: "#{context}_outcome_group_available_outcomes"
        post "#{prefix}/outcome_groups/:id/outcomes", action: :link
        put "#{prefix}/outcome_groups/:id/outcomes/:outcome_id", action: :link, as: "#{context}_outcome_link"
        delete "#{prefix}/outcome_groups/:id/outcomes/:outcome_id", action: :unlink
        get "#{prefix}/outcome_groups/:id/subgroups", action: :subgroups, as: "#{context}_outcome_group_subgroups"
        post "#{prefix}/outcome_groups/:id/subgroups", action: :create
        post "#{prefix}/outcome_groups/:id/import", action: :import, as: "#{context}_outcome_group_import"
        post "#{prefix}/outcome_groups/:id/batch", action: :batch, as: "#{context}_outcome_group_batch"
      end
    end

    scope(controller: :outcomes_api) do
      get "outcomes/:id", action: :show, as: "outcome"
      put "outcomes/:id", action: :update
      delete "outcomes/:id", action: :destroy
      get "courses/:course_id/outcome_alignments", action: :outcome_alignments
    end

    scope(controller: :outcome_results) do
      get 'courses/:course_id/outcome_rollups', action: :rollups, as: 'course_outcome_rollups'
      get 'courses/:course_id/outcome_results', action: :index, as: 'course_outcome_results'
    end

    scope(controller: :outcomes_academic_benchmark_import_api) do
      # These can be uncommented when implemented
      # get  "global/outcomes_import",            action: :index
      # get  "global/outcomes_import/:id",        action: :show
      # put  "global/outcomes_import/:id",        action: :cancel
      # get  "global/outcomes_import/list/:guid", action: :list
      get  "global/outcomes_import/available",  action: :available
      post "global/outcomes_import",            action: :create
      get  "global/outcomes_import/migration_status/:migration_id", action: :migration_status
    end

    scope(controller: :group_categories) do
      resources :group_categories, except: [:index, :create]
      get 'accounts/:account_id/group_categories', action: :index, as: 'account_group_categories'
      get 'courses/:course_id/group_categories', action: :index, as: 'course_group_categories'
      post 'accounts/:account_id/group_categories', action: :create
      post 'courses/:course_id/group_categories', action: :create
      post 'group_categories/:group_category_id/import', action: :import
      get 'group_categories/:group_category_id/groups', action: :groups, as: 'group_category_groups'
      get 'group_categories/:group_category_id/users', action: :users, as: 'group_category_users'
      get 'group_categories/:group_category_id/export', action: :export, as: 'group_category_export', defaults: { format: :csv }
      post 'group_categories/:group_category_id/assign_unassigned_members', action: 'assign_unassigned_members', as: 'group_category_assign_unassigned_members'
    end

    scope(controller: :progress) do
      get "progress/:id", action: :show, as: "progress"
    end

    scope(controller: :app_center) do
      %w(course account).each do |context|
        prefix = "#{context}s/:#{context}_id/app_center"
        get  "#{prefix}/apps",                      action: :index,   as: "#{context}_app_center_apps"
        get  "#{prefix}/apps/:app_id/reviews",      action: :reviews, as: "#{context}_app_center_app_reviews"
        get  "#{prefix}/apps/:app_id/reviews/self", action: :review,  as: "#{context}_app_center_app_review"
        post "#{prefix}/apps/:app_id/reviews/self", action: :add_review
      end
    end

    scope(controller: :feature_flags) do
      %w(course account user).each do |context|
        prefix = "#{context}s/:#{context}_id/features"
        get "#{prefix}", action: :index, as: "#{context}_features"
        get "#{prefix}/enabled", action: :enabled_features, as: "#{context}_enabled_features"
        get "#{prefix}/flags/:feature", action: :show
        put "#{prefix}/flags/:feature", action: :update
        delete "#{prefix}/flags/:feature", action: :delete
      end
      get "features/environment", action: :environment
    end

    scope(controller: :conferences) do
      %w(course group).each do |context|
        prefix = "#{context}s/:#{context}_id/conferences"
        get prefix, action: :index, as: "#{context}_conferences"
        post "#{prefix}", action: :create
        post "#{prefix}/:conference_id/recording_ready", action: :recording_ready, as: "#{context}_conferences_recording_ready"
      end

      get "conferences", action: :for_user, as: "conferences"
    end

    scope(controller: :custom_gradebook_columns_api) do
      prefix = "courses/:course_id/custom_gradebook_columns"
      get prefix, action: :index, as: "course_custom_gradebook_columns"
      post prefix, action: :create
      post "#{prefix}/reorder", action: :reorder, as: "custom_gradebook_columns_reorder"
      put "#{prefix}/:id", action: :update, as: "course_custom_gradebook_column"
      delete "#{prefix}/:id", action: :destroy
    end

    scope(controller: :custom_gradebook_column_data_api) do
      prefix = "courses/:course_id/custom_gradebook_columns/:id/data"
      get prefix, action: :index, as: "course_custom_gradebook_column_data"
      put "#{prefix}/:user_id", action: :update, as: "course_custom_gradebook_column_datum"
      put "courses/:course_id/custom_gradebook_column_data", action: :bulk_update, as: "course_custom_gradebook_column_bulk_data"
    end

    scope(controller: :content_exports_api) do
      %w(course group user).each do |context|
        context_prefix = "#{context.pluralize}/:#{context}_id"
        prefix = "#{context_prefix}/content_exports"
        get prefix, action: :index, as: "#{context}_content_exports"
        post prefix, action: :create
        get "#{prefix}/:id", action: :show
        put "#{prefix}/:id/fail", action: :fail
      end
      get "courses/:course_id/content_list", action: :content_list, as: "course_content_list"
    end

    scope(controller: :epub_exports) do
      get 'courses/:course_id/epub_exports/:id', {
        action: :show
      }
      get 'epub_exports', {
        action: :index
      }
      post 'courses/:course_id/epub_exports', {
        action: :create
      }
    end

    scope(controller: :web_zip_exports) do
      get 'courses/:course_id/web_zip_exports', action: :index, as: "web_zip_exports"
      get 'courses/:course_id/web_zip_exports/:id', action: :show
    end

    scope(controller: :grading_standards_api) do
      get 'courses/:course_id/grading_standards', action: :context_index
      get 'accounts/:account_id/grading_standards', action: :context_index
      get 'courses/:course_id/grading_standards/:grading_standard_id', action: :context_show
      get 'accounts/:account_id/grading_standards/:grading_standard_id', action: :context_show
      post 'accounts/:account_id/grading_standards', action: :create
      post 'courses/:course_id/grading_standards', action: :create
    end

    get '/crocodoc_session', controller: 'crocodoc_sessions', action: 'show', as: :crocodoc_session
    get '/canvadoc_session', controller: 'canvadoc_sessions', action: 'show', as: :canvadoc_session
    post '/canvadoc_session', controller: 'canvadoc_sessions', action: 'create'

    scope(controller: :grading_period_sets) do
      get 'accounts/:account_id/grading_period_sets', action: :index, as: :account_grading_period_sets
      post 'accounts/:account_id/grading_period_sets', action: :create
      patch 'accounts/:account_id/grading_period_sets/:id', action: :update, as: :account_grading_period_set
      delete 'accounts/:account_id/grading_period_sets/:id', action: :destroy
    end

    scope(controller: :grading_periods) do
      # FIXME: This route will be removed/replaced with CNVS-27101
      get 'accounts/:account_id/grading_periods', action: :index, as: :account_grading_periods

      get 'courses/:course_id/grading_periods', action: :index, as: :course_grading_periods
      get 'courses/:course_id/grading_periods/:id', action: :show, as: :course_grading_period
      patch 'courses/:course_id/grading_periods/batch_update',
            action: :batch_update, as: :course_grading_period_batch_update
      put 'courses/:course_id/grading_periods/:id', action: :update, as: :course_grading_period_update
      delete 'courses/:course_id/grading_periods/:id', action: :destroy, as: :course_grading_period_destroy
      delete 'accounts/:account_id/grading_periods/:id', action: :destroy, as: :account_grading_period_destroy

      patch 'grading_period_sets/:set_id/grading_periods/batch_update',
            action: :batch_update, as: :grading_period_set_periods_update
    end

    scope(controller: :usage_rights) do
      %w(course group user).each do |context|
        content_prefix = "#{context.pluralize}/:#{context}_id"
        put "#{content_prefix}/usage_rights", action: :set_usage_rights
        delete "#{content_prefix}/usage_rights", action: :remove_usage_rights
        get "#{content_prefix}/content_licenses", action: :licenses
      end
    end

    scope(controller: 'bookmarks/bookmarks') do
      get 'users/self/bookmarks/', action: :index, as: :bookmarks
      get 'users/self/bookmarks/:id', action: :show
      post 'users/self/bookmarks', action: :create
      delete 'users/self/bookmarks/:id', action: :destroy
      put 'users/self/bookmarks/:id', action: :update
    end

    scope(controller: :course_nicknames) do
      get 'users/self/course_nicknames', action: :index, as: :course_nicknames
      get 'users/self/course_nicknames/:course_id', action: :show
      put 'users/self/course_nicknames/:course_id', action: :update
      delete 'users/self/course_nicknames/:course_id', action: :delete
      delete 'users/self/course_nicknames', action: :clear
    end

    scope(controller: :shared_brand_configs) do
      post 'accounts/:account_id/shared_brand_configs', action: :create
      put 'accounts/:account_id/shared_brand_configs/:id', action: :update
      delete 'shared_brand_configs/:id', action: :destroy
    end

    scope(controller: :errors) do
      post "error_reports", action: :create
    end

    scope(controller: :jwts) do
      post 'jwts', action: :create
      post 'jwts/refresh', action: :refresh
    end

    scope(controller: :gradebook_settings) do
      put 'courses/:course_id/gradebook_settings', action: :update, as: :course_gradebook_settings_update
    end

    scope(controller: :announcements_api) do
      get 'announcements', action: :index, as: :announcements
    end

    scope(controller: :rubrics_api) do
      get 'accounts/:account_id/rubrics', action: :index, as: :account_rubrics
      get 'accounts/:account_id/rubrics/:id', action: :show
      get 'courses/:course_id/rubrics', action: :index, as: :course_rubrics
      get 'courses/:course_id/rubrics/:id', action: :show
      post 'courses/:course_id/rubrics', controller: :rubrics, action: :create
      put 'courses/:course_id/rubrics/:id', controller: :rubrics, action: :update
      delete 'courses/:course_id/rubrics/:id', controller: :rubrics, action: :destroy
    end

    scope(controller: :rubric_associations) do
      post 'courses/:course_id/rubric_associations', action: :create
      put 'courses/:course_id/rubric_associations/:id', action: :update
      delete 'courses/:course_id/rubric_associations/:id', action: :destroy
    end

    scope(controller: :rubric_assessment_api) do
      post 'courses/:course_id/rubric_associations/:rubric_association_id/rubric_assessments', controller: :rubric_assessments, action: :create
      put 'courses/:course_id/rubric_associations/:rubric_association_id/rubric_assessments/:id', controller: :rubric_assessments, action: :update
      delete 'courses/:course_id/rubric_associations/:rubric_association_id/rubric_assessments/:id', controller: :rubric_assessments, action: :destroy
    end

    scope(controller: 'master_courses/master_templates') do
      get 'courses/:course_id/blueprint_templates/:template_id', action: :show
      get 'courses/:course_id/blueprint_templates/:template_id/associated_courses', action: :associated_courses, as: :course_blueprint_associated_courses
      put 'courses/:course_id/blueprint_templates/:template_id/update_associations', action: :update_associations
      get 'courses/:course_id/blueprint_templates/:template_id/unsynced_changes', action: :unsynced_changes, as: :course_blueprint_unsynced_changes

      post 'courses/:course_id/blueprint_templates/:template_id/migrations', action: :queue_migration
      get 'courses/:course_id/blueprint_templates/:template_id/migrations', action: :migrations_index, as: :course_blueprint_migrations
      get 'courses/:course_id/blueprint_templates/:template_id/migrations/:id', action: :migrations_show
      get 'courses/:course_id/blueprint_templates/:template_id/migrations/:id/details', action: :migration_details

      put 'courses/:course_id/blueprint_templates/:template_id/restrict_item', action: :restrict_item

      get 'courses/:course_id/blueprint_subscriptions', action: :subscriptions_index, as: :course_blueprint_subscriptions
      get 'courses/:course_id/blueprint_subscriptions/:subscription_id/migrations', action: :imports_index, as: :course_blueprint_imports
      get 'courses/:course_id/blueprint_subscriptions/:subscription_id/migrations/:id', action: :imports_show
      get 'courses/:course_id/blueprint_subscriptions/:subscription_id/migrations/:id/details', action: :import_details
    end

    scope(controller: :late_policy) do
      get 'courses/:id/late_policy', action: :show
      post 'courses/:id/late_policy', action: :create
      patch 'courses/:id/late_policy', action: :update
    end

    scope(controller: :planner) do
      get 'planner/items', action: :index, as: :planner_items
      get 'users/:user_id/planner/items', action: :index, as: :user_planner_items
    end

    scope(controller: :planner_overrides) do
      get 'planner/overrides', action: :index, as: :planner_overrides
      get 'planner/overrides/:id', action: :show
      put 'planner/overrides/:id', action: :update
      post 'planner/overrides', action: :create
      delete 'planner/overrides/:id', action: :destroy
    end

    scope(controller: :planner_notes) do
      get 'planner_notes', action: :index, as: :planner_notes
      get 'planner_notes/:id', action: :show, as: :planner_notes_show
      put 'planner_notes/:id', action: :update
      post 'planner_notes', action: :create
      delete 'planner_notes/:id', action: :destroy
    end

    scope(controller: :content_shares) do
      post 'users/:user_id/content_shares', action: :create
      get 'users/:user_id/content_shares/sent', action: :index, defaults: { list: 'sent' }, as: :user_sent_content_shares
      get 'users/:user_id/content_shares/received', action: :index, defaults: { list: 'received' }, as: :user_received_content_shares
      get 'users/:user_id/content_shares/unread_count', action: :unread_count
      get 'users/:user_id/content_shares/:id', action: :show
      delete 'users/:user_id/content_shares/:id', action: :destroy
      post 'users/:user_id/content_shares/:id/add_users', action: :add_users
      put 'users/:user_id/content_shares/:id', action: :update
    end

    scope(:controller => :csp_settings) do
      %w(course account).each do |context|
        get "#{context.pluralize}/:#{context}_id/csp_settings", :action => :get_csp_settings
        put "#{context.pluralize}/:#{context}_id/csp_settings", :action => :set_csp_setting
      end
      put "accounts/:account_id/csp_settings/lock", :action => :set_csp_lock
      post "accounts/:account_id/csp_settings/domains", :action => :add_domain
      post "accounts/:account_id/csp_settings/domains/batch_create", :action => :add_multiple_domains
      delete "accounts/:account_id/csp_settings/domains", :action => :remove_domain
      get "accounts/:account_id/csp_log", action: :csp_log
    end

    scope(:controller => :context) do
      post 'media_objects', action: 'create_media_object', as: :create_media_object
    end

    scope(:controller => :media_objects) do
      put 'media_objects/:media_object_id', action: 'update_media_object', as: :update_media_object
    end

    scope(:controller => :media_tracks) do
      get 'media_objects/:media_object_id/media_tracks', action: 'index', as: :list_media_tracks
      put 'media_objects/:media_object_id/media_tracks', action: 'update', as: :update_media_tracks
    end

    scope(controller: 'conditional_release/rules') do
      # TODO: can rearrange so assignment is in path if desired once we're no longer maintaining backwards compat
      get 'courses/:course_id/mastery_paths/rules', action: 'index'
      get 'courses/:course_id/mastery_paths/rules/:id', action: 'show'
      post 'courses/:course_id/mastery_paths/rules', action: 'create'
      put 'courses/:course_id/mastery_paths/rules/:id', action: 'update'
      delete 'courses/:course_id/mastery_paths/rules/:id', action: 'destroy'
    end

    scope(controller: 'conditional_release/stats') do
      # TODO: can rearrange so assignment is in path if desired once we're no longer maintaining backwards compat
      get 'courses/:course_id/mastery_paths/stats/students_per_range', action: 'students_per_range'
      get 'courses/:course_id/mastery_paths/stats/student_details', action: 'student_details'
    end

    scope(controller: :history) do
      get 'users/:user_id/history', action: 'index', as: :user_history
    end

    scope(controller: :gradebooks) do
      put "courses/:course_id/update_final_grade_overrides", action: "update_final_grade_overrides"
    end
  end

    # this is not a "normal" api endpoint in the sense that it is not documented or
    # generally available to hosted customers. it also does not respect the normal
    # pagination options; however, jobs_controller already accepts `limit` and `offset`
    # paramaters and defines a sane default limit
    ApiRouteSet::V1.draw(self) do
      scope(controller: :jobs) do
        get 'jobs', action: :index
        get 'jobs/:id', action: :show
        post 'jobs/batch_update', action: :batch_update
      end
    end

  # this is not a "normal" api endpoint in the sense that it is not documented
  # or called directly, it's used as the redirect in the file upload process
  # for local files. it also doesn't use the normal oauth authentication
  # system, so we can't put it in the api uri namespace.
  post 'files_api' => 'files#api_create', as: :api_v1_files_create

  get 'login/oauth2/auth' => 'oauth2_provider#auth', as: :oauth2_auth
  post 'login/oauth2/token' => 'oauth2_provider#token', as: :oauth2_token
  get 'login/oauth2/confirm' => 'oauth2_provider#confirm', as: :oauth2_auth_confirm
  post 'login/oauth2/accept' => 'oauth2_provider#accept', as: :oauth2_auth_accept
  get 'login/oauth2/deny' => 'oauth2_provider#deny', as: :oauth2_auth_deny
  delete 'login/oauth2/token' => 'oauth2_provider#destroy', as: :oauth2_logout
  get 'login/oauth2/jwks' => 'oauth2_provider#jwks', as: :oauth2_jwks

  ApiRouteSet.draw(self, "/api/lti/v1") do
    post "tools/:tool_id/grade_passback", controller: :lti_api, action: :grade_passback, as: "lti_grade_passback_api"
    post "tools/:tool_id/ext_grade_passback", controller: :lti_api, action: :legacy_grade_passback, as: "blti_legacy_grade_passback_api"
    post "xapi/:token", controller: :lti_api, action: :xapi_service, as: "lti_xapi"
    post "caliper/:token", controller: :lti_api, action: :caliper_service, as: "lti_caliper"
    post "logout_service/:token", controller: :lti_api, action: :logout_service, as: "lti_logout_service"
    post "turnitin/outcomes_placement/:tool_id", controller: :lti_api, action: :turnitin_outcomes_placement, as: "lti_turnitin_outcomes_placement"
  end

  ApiRouteSet.draw(self, "/api/lti") do

    scope(controller: 'lti/tool_configurations_api') do
      put 'developer_keys/:developer_key_id/tool_configuration', action: :update
      post 'accounts/:account_id/developer_keys/tool_configuration', action: :create
      delete 'developer_keys/:developer_key_id/tool_configuration', action: :destroy

      %w(account course).each do |context|
        get "#{context}s/:#{context}_id/developer_keys/:developer_key_id/tool_configuration", action: :show, as: "#{context}_show_tool_configuration"
      end
    end

    scope(controller: 'lti/subscriptions_api') do
      post "subscriptions", action: :create
      delete "subscriptions/:id", action: :destroy
      get "subscriptions/:id", action: :show
      put "subscriptions/:id", action: :update
      get "subscriptions", action: :index
    end

    scope(controller: 'lti/users_api') do
      get 'users/:id', action: :show
      get 'groups/:group_id/users', action: :group_index, as: 'lti_user_group_index'
    end

    scope(controller: 'lti/plagiarism_assignments_api') do
      get 'assignments/:assignment_id', action: :show
    end

    scope(controller: 'lti/ims/authentication') do
      post 'authorize_redirect', action: :authorize_redirect
      get 'authorize_redirect', action: :authorize_redirect
      get 'authorize', action: :authorize, as: :lti_1_3_authorization
    end

    %w(course account).each do |context|
      prefix = "#{context}s/:#{context}_id"

      post "#{prefix}/authorize", controller: 'lti/ims/authorization', action: :authorize, as: "#{context}_lti_oauth2_authorize"
      get  "#{prefix}/tool_consumer_profile(/:tool_consumer_profile_id)", controller: 'lti/ims/tool_consumer_profile',
           action: 'show', as: "#{context}_tool_consumer_profile"
      post "#{prefix}/tool_proxy", controller: 'lti/ims/tool_proxy', action: :re_reg,
           as: "re_reg_#{context}_lti_tool_proxy", constraints: Lti::ReRegConstraint.new
      post "#{prefix}/tool_proxy", controller: 'lti/ims/tool_proxy', action: :create,
           as: "create_#{context}_lti_tool_proxy"
      get "#{prefix}/jwt_token", controller: 'external_tools', action: :jwt_token
      get "tool_proxy/:tool_proxy_guid/#{prefix}/tool_setting", controller: 'lti/ims/tool_setting', action: :show, as: "show_#{context}_tool_setting"
      get "tool_proxy/:tool_proxy_guid/#{prefix}/resource_link_id/:resource_link_id/tool_setting", controller: 'lti/ims/tool_setting', action: :show, as: "show_#{context}_resource_link_id_tool_setting"
      put "tool_proxy/:tool_proxy_guid/#{prefix}/tool_setting", controller: 'lti/ims/tool_setting', action: :update, as: "update_#{context}_tool_setting"
      put "tool_proxy/:tool_proxy_guid/#{prefix}/resource_link_id/:resource_link_id/tool_setting", controller: 'lti/ims/tool_setting', action: :update, as: "update_#{context}_update_resource_link_id_tool_setting"
    end
    #Tool Setting Services
    get "tool_settings/:tool_setting_id",  controller: 'lti/ims/tool_setting', action: :show, as: :show_lti_tool_settings
    get "tool_proxy/:tool_proxy_guid/tool_setting", controller: 'lti/ims/tool_setting', action: :show, as: :show_tool_proxy_lti_tool_settings
    put "tool_settings/:tool_setting_id",  controller: 'lti/ims/tool_setting', action: :update, as: :update_lti_tool_settings
    put "tool_proxy/:tool_proxy_guid/tool_setting", controller: 'lti/ims/tool_setting', action: :update, as: :update_tool_proxy_lti_tool_settings

    #Tool Proxy Services
    get  "tool_proxy/:tool_proxy_guid", controller: 'lti/ims/tool_proxy', action: :show, as: "show_lti_tool_proxy"

    # Membership Service
    get "courses/:course_id/membership_service", controller: "lti/membership_service", action: :course_index, as: :course_membership_service
    get "groups/:group_id/membership_service", controller: "lti/membership_service", action: :group_index, as: :group_membership_service

    # Submissions Service
    scope(controller: 'lti/submissions_api') do
      get "assignments/:assignment_id/submissions/:submission_id", action: :show
      get "assignments/:assignment_id/submissions/:submission_id/history", action: :history
      get "assignments/:assignment_id/submissions/:submission_id/attachment/:attachment_id", action: :attachment, as: :lti_submission_attachment_download
    end

    # Originality Report Service
    scope(controller: 'lti/originality_reports_api') do
      post "assignments/:assignment_id/submissions/:submission_id/originality_report", action: :create
      put "assignments/:assignment_id/submissions/:submission_id/originality_report/:id", action: :update
      put "assignments/:assignment_id/files/:file_id/originality_report", action: :update
      get "assignments/:assignment_id/submissions/:submission_id/originality_report/:id", action: :show
      get "assignments/:assignment_id/files/:file_id/originality_report", action: :show
    end

    # Line Item Service (LTI AGS)
    scope(controller: 'lti/ims/line_items') do
      post "courses/:course_id/line_items", action: :create, as: :lti_line_item_create
      get "courses/:course_id/line_items/:id", action: :show, as: :lti_line_item_show
      get "courses/:course_id/line_items", action: :index, as: :lti_line_item_index
      put "courses/:course_id/line_items/:id", action: :update, as: :lti_line_item_edit
      delete "courses/:course_id/line_items/:id", action: :destroy, as: :lti_line_item_delete
    end

    # Scores Service (LTI AGS)
    scope(controller: 'lti/ims/scores') do
      post "courses/:course_id/line_items/:line_item_id/scores", action: :create, as: :lti_result_create
    end

    # Result Service (LTI AGS)
    scope(controller: 'lti/ims/results') do
      get "courses/:course_id/line_items/:line_item_id/results/:id", action: :show, as: :lti_result_show
      get "courses/:course_id/line_items/:line_item_id/results", action: :index
    end

    # Progress Service (LTI AGS)
    scope(controller: 'lti/ims/progress') do
      get "courses/:course_id/progress/:id", action: :show, as: :lti_progress_show
    end

    # Public JWK Service
    scope(controller: 'lti/public_jwk') do
      put "/developer_key/update_public_jwk", action: :update, as: :public_jwk_update
    end

    # Context External Tools Service
    scope(controller: 'lti/account_external_tools') do
      post "/accounts/:account_id/external_tools", action: :create, as: :account_external_tools_create
      get "/accounts/:account_id/external_tools/:external_tool_id", action: :show, as: :account_external_tools_show
      get "/accounts/:account_id/external_tools", action: :index, as: :account_external_tools_index
      delete "/accounts/:account_id/external_tools/:external_tool_id", action: :destroy, as: :account_external_tools_destroy
    end

    # Data Services Service
    scope(controller: 'lti/data_services') do
      post "/accounts/:account_id/data_services", action: :create, as: :data_services_create
      get "/accounts/:account_id/data_services/:id", action: :show, as: :data_services_show
      put "/accounts/:account_id/data_services/:id", action: :update, as: :data_services_update
      get "/accounts/:account_id/data_services", action: :index, as: :data_services_index
      get "/accounts/:account_id/event_types", action: :event_types_index, as: :data_services_event_types
      delete "/accounts/:account_id/data_services/:id", action: :destroy, as: :data_services_destroy
    end

    # Account Lookup service
    scope(controller: 'lti/account_lookup') do
      get "/accounts/:account_id", action: :show
    end

    # Names and Roles Provisioning (NRPS) v2 Service
    scope(controller: 'lti/ims/names_and_roles') do
      get "courses/:course_id/names_and_roles", controller: "lti/ims/names_and_roles", action: :course_index, as: :course_names_and_roles
      get "groups/:group_id/names_and_roles", controller: "lti/ims/names_and_roles", action: :group_index, as: :group_names_and_roles
    end

    # Security
    scope(controller: 'lti/ims/security') do
      get "security/jwks", action: :jwks, as: :jwks_show
    end

    # Feature Flags
    scope(controller: 'lti/feature_flags') do
      %w(course account).each do |context|
        prefix = "#{context}s/:#{context}_id"
        get "/#{prefix}/feature_flags/:feature", action: :show
      end
    end
  end

  ApiRouteSet.draw(self, '/api/sis') do
    scope(controller: :sis_api) do
      get 'accounts/:account_id/assignments', action: 'sis_assignments', as: :sis_account_assignments
      get 'courses/:course_id/assignments', action: 'sis_assignments', as: :sis_course_assignments
    end
    scope(controller: :disable_post_to_sis_api) do
      put 'courses/:course_id/disable_post_to_sis', action: 'disable_post_to_sis', as: :disable_post_to_sis_course_assignments
    end
  end
end
Rails.application.routes.draw do
  root to: "redirects#new"
  resources :redirects, only: [:new, :create, :index] do
    member do
      get '/update', to: "redirects#update"
    end
  end
end
Mercury::Engine.routes.draw do
end
Trestle::Engine.routes.draw do
  controller "trestle/auth/sessions" do
    if Trestle.config.auth.enable_login
      get  'login'  => :new, as: :login
      post 'login'  => :create
    end

    if Trestle.config.auth.enable_logout
      get 'logout' => :destroy, as: :logout
    end
  end
end
Rails.application.routes.draw do
  root to: 'visitors#index'
end
Rails.application.routes.draw do
  root "home#index"

  devise_for :users, controllers: { omniauth_callbacks: "omniauth_callbacks" }

  resources :projects

  %w(404 422 500).each do |status_code|
    get status_code, to: "errors#show", code: status_code
  end
end
Rails.application.routes.draw do
  resources :feedbacks, :only => [:new, :create]  
  
  namespace :manage do
    resources :feedbacks
    resources :feedback_answers, :only => [:create, :update, :destroy]
  end
end
RailsAdmin::Engine.routes.draw do
  controller 'main' do
    RailsAdmin::Config::Actions.all(:root).each { |action| match "/#{action.route_fragment}", action: action.action_name, as: action.action_name, via: action.http_methods }
    scope ':model_name' do
      RailsAdmin::Config::Actions.all(:collection).each { |action| match "/#{action.route_fragment}", action: action.action_name, as: action.action_name, via: action.http_methods }
      post '/bulk_action', action: :bulk_action, as: 'bulk_action'
      scope ':id' do
        RailsAdmin::Config::Actions.all(:member).each { |action| match "/#{action.route_fragment}", action: action.action_name, as: action.action_name, via: action.http_methods }
      end
    end
  end
end
Rails.application.routes.draw do
  root 'hello#index'
  # The priority is based upon order of creation: first created -> highest priority.
  # See how all your routes lay out with "rake routes".

  # You can have the root of your site routed with "root"
  # root 'welcome#index'

  # Example of regular route:
  #   get 'products/:id' => 'catalog#view'

  # Example of named route that can be invoked with purchase_url(id: product.id)
  #   get 'products/:id/purchase' => 'catalog#purchase', as: :purchase

  # Example resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Example resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Example resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Example resource route with more complex sub-resources:
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', on: :collection
  #     end
  #   end

  # Example resource route with concerns:
  #   concern :toggleable do
  #     post 'toggle'
  #   end
  #   resources :posts, concerns: :toggleable
  #   resources :photos, concerns: :toggleable

  # Example resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end
end
Rails.application.routes.draw do
  root 'application#hello' #action hello
end
Rails.application.routes.draw do
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html

  # Serve websocket cable requests in-process
  # mount ActionCable.server => '/cable'

  root "pages#index"

  get "simple", to: "pages#simple"
  get "no-router", to: "pages#no_router"

  # React Router needs a wildcard
  get "react-router(/*all)", to: "pages#index"

  resources :comments
  mount ActionCable.server => "/cable"
end
# frozen_string_literal: true

Spree::Core::Engine.routes.draw do
  namespace :admin do
    resources :orders, only: [] do
      resources :shipments, only: [] do
        resources :return_authorizations, only: %i[new create]
      end
    end

    resources :shipments, only: :destroy do
      member do
        post :push_shipment_order
      end
    end
  end
end
Rails.application.routes.draw do
  # The priority is based upon order of creation: first created -> highest priority.
  # See how all your routes lay out with "rake routes".

  # You can have the root of your site routed with "root"
  # root 'welcome#index'

  # Example of regular route:
  #   get 'products/:id' => 'catalog#view'

  # Example of named route that can be invoked with purchase_url(id: product.id)
  #   get 'products/:id/purchase' => 'catalog#purchase', as: :purchase

  # Example resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Example resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Example resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Example resource route with more complex sub-resources:
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', on: :collection
  #     end
  #   end

  # Example resource route with concerns:
  #   concern :toggleable do
  #     post 'toggle'
  #   end
  #   resources :posts, concerns: :toggleable
  #   resources :photos, concerns: :toggleable

  # Example resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end
end
Rails.application.routes.draw do
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
  scope AppConfig[:public_proxy_prefix] do
    root to: "welcome#show"

    get '/welcome', to: 'welcome#show'

    get '/*ark_tag/:naan/:id' => 'ark_name#show', constraints: { ark_tag: 'ark:' }

    # I don't think this is used anywhere...
    post '/cite', to: 'cite#show'

    # RESOURCES
    get "resources/:slug_or_id" => 'resources#show'
    get "repositories/:repo_slug/resources/:slug_or_id" => 'resources#show'

    get  'repositories/resources' => 'resources#index'
    get  "repositories/:repo_id/resources/:id/search" => 'resources#search'
    get  "repositories/:rid/resources/:id" => 'resources#show'
    post "repositories/:rid/resources/:id/pdf" => 'pdf#resource'
    get  "repositories/:rid/resources/:id/inventory" => 'resources#inventory'
    get  'repositories/:rid/resources/:id/resolve/:ref_id' => 'resources#resolve'
    get  "repositories/:rid/resources" => 'resources#index'
    get  "repositories/:rid/resources/:id/collection_organization" => 'resources#infinite'
    get  "repositories/:rid/resources/:id/infinite/waypoints" => 'resources#waypoints'
    get  "repositories/:rid/resources/:id/tree/root" => 'resources#tree_root'
    get  "repositories/:rid/resources/:id/tree/waypoint" => 'resources#tree_waypoint'
    get  "repositories/:rid/resources/:id/tree/node" => 'resources#tree_node'
    get  "repositories/:rid/resources/:id/tree/node_from_root" => 'resources#tree_node_from_root'

    #ACCESSIONS
    get "accessions/:slug_or_id" => 'accessions#show'
    get "repositories/:repo_slug/accessions/:slug_or_id" => 'accessions#show'

    get  'accessions/search' => 'accessions#search'
    get  'accessions' => 'accessions#index'
    get  "repositories/:rid/accessions" => 'accessions#index'
    get  "repositories/:rid/accessions/:id" => 'accessions#show'

    #DIGITAL OBJECTS
    get "repositories/:rid/digital_objects" => 'objects#index'
    get "repositories/:rid/digital_objects/:id/tree/root" => 'digital_objects#tree_root'
    get "repositories/:rid/digital_objects/:id/tree/waypoint" => 'digital_objects#tree_waypoint'
    get "repositories/:rid/digital_objects/:id/tree/node" => 'digital_objects#tree_node'
    get "repositories/:rid/digital_objects/:id/tree/node_from_root" => 'digital_objects#tree_node_from_root'

    #CLASSIFICATIONS
    get "classifications/:slug_or_id" => 'classifications#show'
    get "repositories/:repo_slug/classifications/:slug_or_id" => 'classifications#show'

    get 'classifications/search' => 'classifications#search'
    get 'classifications' => 'classifications#index'
    get "repositories/:rid/classifications/:id" => 'classifications#show'
    get "repositories/:rid/classifications/" => 'classifications#index'

    get "repositories/:rid/classifications/:id/tree/root" => 'classifications#tree_root'
    get "repositories/:rid/classifications/:id/tree/waypoint" => 'classifications#tree_waypoint'
    get "repositories/:rid/classifications/:id/tree/node" => 'classifications#tree_node'
    get "repositories/:rid/classifications/:id/tree/node_from_root" => 'classifications#tree_node_from_root'

    #CLASSIFICATION TERMS
    get  "repositories/:repo_slug/classification_terms/:slug_or_id" => 'classifications#term'
    get  "classification_terms/:slug_or_id" => 'classifications#term'

    #SUBJECTS
    get "subjects/:slug_or_id" => 'subjects#show'
    get 'subjects/search' => 'subjects#search'
    get 'subjects' => 'subjects#index'
    get "repositories/:rid/subjects" => 'subjects#index'

    #AGENTS
    get "agents/:slug_or_id" => 'agents#show'

    get 'agents/search' => 'agents#search'
    get "agents/:eid/:id" => 'agents#show'
    get 'agents' => 'agents#index'
    get "repositories/:rid/agents" => 'agents#index'

    #REPOSITORIES
    get "repositories/:slug_or_id" => 'repositories#show'
    get '/repositories', to: 'repositories#index'
    get "repositories/:rid/search" => 'search#search'

    #TOP CONTAINERS
    get "repositories/:rid/top_containers/:id" => 'containers#show'

    # SLUGGED OBJECTS (# ARCHIVAL OBJECTS, DIGITAL OBJECTS, DIGITAL OBJECT COMPONENTS)
    get ":obj_type/:slug_or_id" => 'objects#show'
    get "repositories/:repo_slug/:obj_type/:slug_or_id" => 'objects#show'

    #OBJECTS (generic, pass in the object_type as a param)
    get 'objects/search' => 'objects#search'
    get 'objects' => 'objects#index'
    get "repositories/:rid/:obj_type/:id" => 'objects#show'
    get "repositories/:rid/objects" => 'objects#index'
    get "repositories/:rid/records" => 'objects#index'

    # OTHER (NOT SLUGGED YET)

    post 'fill_request' => 'requests#make_request'

    get '/search', to: 'search#search'
  end
end
# See https://github.com/voltrb/volt#routes for more info on routes

get '/about', _action: 'about'

# Routes for login and signup, provided by user-templates component gem
get '/signup', _controller: 'user-templates', _action: 'signup'
get '/login', _controller: 'user-templates', _action: 'login'

# The main route, this should be last. It will match any params not
# previously matched.
get '/', {}
# frozen_string_literal: true

Rails.application.routes.draw do
  resources :appointments
  root 'appointments#welcome'
end
Rails.application.routes.draw do
  # The priority is based upon order of creation: first created -> highest priority.
  # See how all your routes lay out with "rake routes".

  # You can have the root of your site routed with "root"
  root 'sessions#index'

  # Example of regular route:
  #   get 'products/:id' => 'catalog#view'

  # Example of named route that can be invoked with purchase_url(id: product.id)
  #   get 'products/:id/purchase' => 'catalog#purchase', as: :purchase

  # Example resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Example resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Example resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Example resource route with more complex sub-resources:
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', on: :collection
  #     end
  #   end

  # Example resource route with concerns:
  #   concern :toggleable do
  #     post 'toggle'
  #   end
  #   resources :posts, concerns: :toggleable
  #   resources :photos, concerns: :toggleable

  # Example resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end
end
# frozen_string_literal: true

if Hacktoberfest.sidekiq_enterprise_available?
  require 'sidekiq-ent/web'
else
  require 'sidekiq/web'
  require 'sidekiq-scheduler/web'
end

Rails.application.routes.draw do
  # Sessions
  get '/auth/:provider/callback', to: 'sessions#create'
  get '/logout', to: 'sessions#destroy', as: :logout
  get '/login', to: 'sessions#new'

  # Sign up
  get '/register', to: 'users#registration', as: :register_form
  patch '/register', to: 'users#register', as: :register

  # Users
  get '/profile', to: 'users#show', as: :profile
  get '/profile/edit', to: 'users#edit', as: :profile_edit
  patch '/profile/edit', to: 'users#update'

  # Pages
  get '/details', to: 'pages#details'
  get '/events', to: 'pages#events'
  get '/eventkit', to: 'pages#event_kit', as: :event_kit
  get '/faq', to: 'pages#faqs'
  get '/api-error', to: 'pages#api_error'
  get '/unauthorized-error', to: 'pages#github_unauthorized_error'
  get '/suspended-error', to: 'pages#github_suspended_error'
  get '/tshirt', to: 'pages#tshirt'
  get '/tree', to: 'pages#tree'
  get '/hacktoberfest-update', to: 'pages#hacktoberfest_update'
  get '/languages/projects(/:language_id)', to: 'languages#projects'
  get '/report', to: 'reports#new'
  post '/report', to: 'reports#create'

  # Sidekiq
  if Rails.env.production? || Rails.env.staging?
    Sidekiq::Web.use Rack::Auth::Basic do |username, password|
      ActiveSupport::SecurityUtils
        .secure_compare(::Digest::SHA256.hexdigest(username),
                        ::Digest::SHA256.hexdigest(ENV['SIDEKIQ_USERNAME'])) &
        ActiveSupport::SecurityUtils
        .secure_compare(::Digest::SHA256.hexdigest(password),
                        ::Digest::SHA256.hexdigest(ENV['SIDEKIQ_PASSWORD']))
    end
    mount Sidekiq::Web, at: '/sidekiq' if ENV['SIDEKIQ_PASSWORD'].present?
  else
    mount Sidekiq::Web, at: '/sidekiq'
  end

  # Diagnostics
  health_check_routes
  get '/boom', to: 'boom#show'
  unless Rails.env.production?
    get '/impersonate/:id', to: 'sessions#impersonate', as: :impersonate
  end

  # Partner user state api
  get '/api/state/:user', to: 'api#state', as: :api_state

  # Default
  root to: 'pages#index'

  # Redirects
  get '/meetups', to: redirect('/events')
end
DemoApp::Application.routes.draw do
  resources :microposts

  resources :users

  # The priority is based upon order of creation:
  # first created -> highest priority.

  # Sample of regular route:
  #   match 'products/:id' => 'catalog#view'
  # Keep in mind you can assign values other than :controller and :action

  # Sample of named route:
  #   match 'products/:id/purchase' => 'catalog#purchase', :as => :purchase
  # This route can be invoked with purchase_url(:id => product.id)

  # Sample resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Sample resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Sample resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Sample resource route with more complex sub-resources
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', :on => :collection
  #     end
  #   end

  # Sample resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end

  # You can have the root of your site routed with "root"
  # just remember to delete public/index.html.
  # root :to => 'welcome#index'

  # See how all your routes lay out with "rake routes"

  # This is a legacy wild controller route that's not recommended for RESTful applications.
  # Note: This route will make all actions in every controller accessible via GET requests.
  # match ':controller(/:action(/:id))(.:format)'
end
Rails.application.routes.draw do
	get 'home/hello' => 'home#hello'
  # The priority is based upon order of creation: first created -> highest priority.
  # See how all your routes lay out with "rake routes".

  # You can have the root of your site routed with "root"
  # root 'welcome#index'

  # Example of regular route:
  #   get 'products/:id' => 'catalog#view'

  # Example of named route that can be invoked with purchase_url(id: product.id)
  #   get 'products/:id/purchase' => 'catalog#purchase', as: :purchase

  # Example resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Example resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Example resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Example resource route with more complex sub-resources:
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', on: :collection
  #     end
  #   end

  # Example resource route with concerns:
  #   concern :toggleable do
  #     post 'toggle'
  #   end
  #   resources :posts, concerns: :toggleable
  #   resources :photos, concerns: :toggleable

  # Example resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end
end
Rails.application.routes.draw do
  devise_for :customers
  namespace :forest do
    post '/actions/approve' => 'actions#approve'
    post '/actions/disapprove' => 'actions#disapprove'
    get '/Actor/:actor_id/top_movies' => 'actors#top_movies'
  end

  mount ForestLiana::Engine => '/forest'

  post '/api/stats/movies_per_country' => 'stats#movies_per_country'
  post '/api/stats/avg_rentals_per_user' => 'stats#avg_rentals_per_user'
  post '/api/stats/customer_paid_vs_free' => 'stats#customer_paid_vs_free'

  # The priority is based upon order of creation: first created -> highest priority.
  # See how all your routes lay out with "rake routes".

  # You can have the root of your site routed with "root"
  # root 'welcome#index'

  # Example of regular route:
  #   get 'products/:id' => 'catalog#view'

  # Example of named route that can be invoked with purchase_url(id: product.id)
  #   get 'products/:id/purchase' => 'catalog#purchase', as: :purchase

  # Example resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Example resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Example resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Example resource route with more complex sub-resources:
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', on: :collection
  #     end
  #   end

  # Example resource route with concerns:
  #   concern :toggleable do
  #     post 'toggle'
  #   end
  #   resources :posts, concerns: :toggleable
  #   resources :photos, concerns: :toggleable

  # Example resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end
end
Asyncapi::Server::Engine.routes.draw do

  namespace :v1 do
    resources :jobs
  end

end
Asyncapi::Server::Engine.routes.draw do

  namespace :v1 do
    resources :jobs
  end

end
Rails.application.routes.draw do
  root 'top#index'
  get  '/top'                          => 'top#index'
  get  '/json-converters/select-csv'   => 'json_converters#select_csv'
  post '/json-converters/download'     => 'json_converters#download'
  get  '/converse-api/select-data'     => 'converse_api#select_data'
  post '/converse-api/generate-matrix' => 'converse_api#generate_matrix'
  post '/converse-api/export-matrix'   => 'converse_api#export_matrix', default: { format: :csv }

  get '/json-converters/download'     => redirect('/json-converters/select-csv')
  get '/converse-api/generate-matrix' => redirect('/converse-api/select-data')
end
Rails.application.routes.draw do
  namespace 'api' do
    resources :articles
    resources :users
    post '/session', to: 'session#create'
  end
end
# frozen_string_literal: true

Rails.application.routes.draw do
end
# frozen_string_literal: true

# Redmine - project management software
# Copyright (C) 2006-2021  Jean-Philippe Lang
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

Rails.application.routes.draw do
  root :to => 'welcome#index', :as => 'home'

  match 'login', :to => 'account#login', :as => 'signin', :via => [:get, :post]
  match 'logout', :to => 'account#logout', :as => 'signout', :via => [:get, :post]
  match 'account/twofa/confirm', :to => 'account#twofa_confirm', :via => :get
  match 'account/twofa/resend', :to => 'account#twofa_resend', :via => :post
  match 'account/twofa', :to => 'account#twofa', :via => [:get, :post]
  match 'account/register', :to => 'account#register', :via => [:get, :post], :as => 'register'
  match 'account/lost_password', :to => 'account#lost_password', :via => [:get, :post], :as => 'lost_password'
  match 'account/activate', :to => 'account#activate', :via => :get
  get 'account/activation_email', :to => 'account#activation_email', :as => 'activation_email'

  match '/news/preview', :controller => 'previews', :action => 'news', :as => 'preview_news', :via => [:get, :post, :put, :patch]
  match '/issues/preview', :to => 'previews#issue', :as => 'preview_issue', :via => [:get, :post, :put, :patch]
  match '/preview/text', :to => 'previews#text', :as => 'preview_text', :via => [:get, :post, :put, :patch]

  match 'projects/:id/wiki/destroy', :to => 'wikis#destroy', :via => [:get, :post]

  match 'boards/:board_id/topics/new', :to => 'messages#new', :via => [:get, :post], :as => 'new_board_message'
  get 'boards/:board_id/topics/:id', :to => 'messages#show', :as => 'board_message'
  match 'boards/:board_id/topics/quote/:id', :to => 'messages#quote', :via => [:get, :post]
  get 'boards/:board_id/topics/:id/edit', :to => 'messages#edit'

  post 'boards/:board_id/topics/preview', :to => 'messages#preview', :as => 'preview_board_message'
  post 'boards/:board_id/topics/:id/replies', :to => 'messages#reply'
  post 'boards/:board_id/topics/:id/edit', :to => 'messages#edit'
  post 'boards/:board_id/topics/:id/destroy', :to => 'messages#destroy'

  # Auto complate routes
  match '/issues/auto_complete', :to => 'auto_completes#issues', :via => :get, :as => 'auto_complete_issues'
  match '/wiki_pages/auto_complete', :to => 'auto_completes#wiki_pages', :via => :get, :as => 'auto_complete_wiki_pages'

  # Misc issue routes. TODO: move into resources
  match '/issues/context_menu', :to => 'context_menus#issues', :as => 'issues_context_menu', :via => [:get, :post]
  match '/issues/changes', :to => 'journals#index', :as => 'issue_changes', :via => :get
  match '/issues/:id/quoted', :to => 'journals#new', :id => /\d+/, :via => :post, :as => 'quoted_issue'

  resources :journals, :only => [:edit, :update] do
    member do
      get 'diff'
    end
  end

  get '/projects/:project_id/issues/gantt', :to => 'gantts#show', :as => 'project_gantt'
  get '/issues/gantt', :to => 'gantts#show'

  get '/projects/:project_id/issues/calendar', :to => 'calendars#show', :as => 'project_calendar'
  get '/issues/calendar', :to => 'calendars#show'

  get 'projects/:id/issues/report', :to => 'reports#issue_report', :as => 'project_issues_report'
  get 'projects/:id/issues/report/:detail', :to => 'reports#issue_report_details', :as => 'project_issues_report_details'

  get   '/issues/imports/new', :to => 'imports#new',
        :defaults => {:type => 'IssueImport'}, :as => 'new_issues_import'
  get   '/time_entries/imports/new', :to => 'imports#new',
        :defaults => {:type => 'TimeEntryImport'}, :as => 'new_time_entries_import'
  get   '/users/imports/new', :to => 'imports#new',
        :defaults => {:type => 'UserImport'}, :as => 'new_users_import'
  post  '/imports', :to => 'imports#create', :as => 'imports'
  get   '/imports/:id', :to => 'imports#show', :as => 'import'
  match '/imports/:id/settings', :to => 'imports#settings', :via => [:get, :post], :as => 'import_settings'
  match '/imports/:id/mapping', :to => 'imports#mapping', :via => [:get, :post], :as => 'import_mapping'
  match '/imports/:id/run', :to => 'imports#run', :via => [:get, :post], :as => 'import_run'

  match 'my/account', :controller => 'my', :action => 'account', :via => [:get, :put]
  match 'my/account/destroy', :controller => 'my', :action => 'destroy', :via => [:get, :post]
  match 'my/page', :controller => 'my', :action => 'page', :via => :get
  post 'my/page', :to => 'my#update_page'
  match 'my', :controller => 'my', :action => 'index', :via => :get # Redirects to my/page
  get 'my/api_key', :to => 'my#show_api_key', :as => 'my_api_key'
  post 'my/api_key', :to => 'my#reset_api_key'
  post 'my/rss_key', :to => 'my#reset_rss_key', :as => 'my_rss_key'
  match 'my/password', :controller => 'my', :action => 'password', :via => [:get, :post]
  match 'my/add_block', :controller => 'my', :action => 'add_block', :via => :post
  match 'my/remove_block', :controller => 'my', :action => 'remove_block', :via => :post
  match 'my/order_blocks', :controller => 'my', :action => 'order_blocks', :via => :post
  match 'my/twofa/activate/init', :controller => 'twofa', :action => 'activate_init', :via => :post
  match 'my/twofa/:scheme/activate/init', :controller => 'twofa', :action => 'activate_init', :via => :post
  match 'my/twofa/:scheme/activate/confirm', :controller => 'twofa', :action => 'activate_confirm', :via => :get
  match 'my/twofa/:scheme/activate', :controller => 'twofa', :action => 'activate', :via => [:get, :post]
  match 'my/twofa/:scheme/deactivate/init', :controller => 'twofa', :action => 'deactivate_init', :via => :post
  match 'my/twofa/:scheme/deactivate/confirm', :controller => 'twofa', :action => 'deactivate_confirm', :via => :get
  match 'my/twofa/:scheme/deactivate', :controller => 'twofa', :action => 'deactivate', :via => [:get, :post]
  match 'my/twofa/select_scheme', :controller => 'twofa', :action => 'select_scheme', :via => :get
  match 'my/twofa/backup_codes/init', :controller => 'twofa_backup_codes', :action => 'init', :via => :post
  match 'my/twofa/backup_codes/confirm', :controller => 'twofa_backup_codes', :action => 'confirm', :via => :get
  match 'my/twofa/backup_codes/create', :controller => 'twofa_backup_codes', :action => 'create', :via => [:get, :post]
  match 'my/twofa/backup_codes', :controller => 'twofa_backup_codes', :action => 'show', :via => [:get]
  match 'users/:user_id/twofa/deactivate', :controller => 'twofa', :action => 'admin_deactivate', :via => :post

  resources :users do
    resources :memberships, :controller => 'principal_memberships'
    resources :email_addresses, :only => [:index, :create, :update, :destroy]
  end

  post 'watchers/watch', :to => 'watchers#watch', :as => 'watch'
  delete 'watchers/watch', :to => 'watchers#unwatch'
  get 'watchers/new', :to => 'watchers#new', :as => 'new_watchers'
  post 'watchers', :to => 'watchers#create'
  post 'watchers/append', :to => 'watchers#append'
  delete 'watchers', :to => 'watchers#destroy'
  get 'watchers/autocomplete_for_user', :to => 'watchers#autocomplete_for_user'
  # Specific routes for issue watchers API
  post 'issues/:object_id/watchers', :to => 'watchers#create', :object_type => 'issue'
  delete 'issues/:object_id/watchers/:user_id' => 'watchers#destroy', :object_type => 'issue'

  resources :projects do
    collection do
      get 'autocomplete'
    end

    member do
      get 'settings(/:tab)', :action => 'settings', :as => 'settings'
      post 'archive'
      post 'unarchive'
      post 'close'
      post 'reopen'
      match 'copy', :via => [:get, :post]
      match 'bookmark', :via => [:delete, :post]
    end

    shallow do
      resources :memberships, :controller => 'members' do
        collection do
          get 'autocomplete'
        end
      end
    end

    resource :enumerations, :controller => 'project_enumerations', :only => [:update, :destroy]

    get 'issues/:copy_from/copy', :to => 'issues#new', :as => 'copy_issue'
    resources :issues, :only => [:index, :new, :create]
    # Used when updating the form of a new issue
    post 'issues/new', :to => 'issues#new'

    resources :files, :only => [:index, :new, :create]

    resources :versions, :except => [:index, :show, :edit, :update, :destroy] do
      collection do
        put 'close_completed'
      end
    end
    get 'versions.:format', :to => 'versions#index'
    get 'roadmap', :to => 'versions#index', :format => false
    get 'versions', :to => 'versions#index'

    resources :news, :except => [:show, :edit, :update, :destroy]
    resources :time_entries, :controller => 'timelog', :except => [:show, :edit, :update, :destroy] do
      get 'report', :on => :collection
    end
    resources :queries, :only => [:new, :create]
    shallow do
      resources :issue_categories
    end
    resources :documents, :except => [:show, :edit, :update, :destroy]
    resources :boards
    shallow do
      resources :repositories, :except => [:index, :show] do
        member do
          match 'committers', :via => [:get, :post]
        end
      end
    end

    match 'wiki/index', :controller => 'wiki', :action => 'index', :via => :get
    resources :wiki, :except => [:index, :create], :as => 'wiki_page' do
      member do
        get 'rename'
        post 'rename'
        get 'history'
        get 'diff'
        match 'preview', :via => [:post, :put, :patch]
        post 'protect'
        post 'add_attachment'
      end
      collection do
        get 'export'
        get 'date_index'
        post 'new'
      end
    end
    match 'wiki', :controller => 'wiki', :action => 'show', :via => :get
    get 'wiki/:id/:version', :to => 'wiki#show', :constraints => {:version => /\d+/}
    delete 'wiki/:id/:version', :to => 'wiki#destroy_version'
    get 'wiki/:id/:version/annotate', :to => 'wiki#annotate'
    get 'wiki/:id/:version/diff', :to => 'wiki#diff'
  end

  resources :issues do
    member do
      # Used when updating the form of an existing issue
      patch 'edit', :to => 'issues#edit'
      get 'tab/:name', :action => 'issue_tab', :as => 'tab'
    end
    collection do
      match 'bulk_edit', :via => [:get, :post]
      post 'bulk_update'
    end
    resources :time_entries, :controller => 'timelog', :only => [:new, :create]
    shallow do
      resources :relations, :controller => 'issue_relations', :only => [:index, :show, :create, :destroy]
    end
  end
  # Used when updating the form of a new issue outside a project
  post '/issues/new', :to => 'issues#new'
  match '/issues', :controller => 'issues', :action => 'destroy', :via => :delete

  resources :queries, :except => [:show]
  get '/queries/filter', :to => 'queries#filter', :as => 'queries_filter'

  resources :news, :only => [:index, :show, :edit, :update, :destroy, :create, :new]
  match '/news/:id/comments', :to => 'comments#create', :via => :post
  match '/news/:id/comments/:comment_id', :to => 'comments#destroy', :via => :delete

  resources :versions, :only => [:show, :edit, :update, :destroy] do
    post 'status_by', :on => :member
  end

  resources :documents, :only => [:show, :edit, :update, :destroy] do
    post 'add_attachment', :on => :member
  end

  match '/time_entries/context_menu', :to => 'context_menus#time_entries', :as => :time_entries_context_menu, :via => [:get, :post]

  resources :time_entries, :controller => 'timelog', :except => :destroy do
    member do
      # Used when updating the edit form of an existing time entry
      patch 'edit', :to => 'timelog#edit'
    end
    collection do
      get 'report'
      get 'bulk_edit'
      post 'bulk_update'
    end
  end
  match '/time_entries/:id', :to => 'timelog#destroy', :via => :delete, :id => /\d+/
  # TODO: delete /time_entries for bulk deletion
  match '/time_entries/destroy', :to => 'timelog#destroy', :via => :delete
  # Used to update the new time entry form
  post '/time_entries/new', :to => 'timelog#new'
  # Used to update the bulk edit time entry form
  post '/time_entries/bulk_edit', :to => 'timelog#bulk_edit'

  get 'projects/:id/activity', :to => 'activities#index', :as => :project_activity
  get 'activity', :to => 'activities#index'

  # repositories routes
  get 'projects/:id/repository/:repository_id/statistics', :to => 'repositories#stats'
  get 'projects/:id/repository/:repository_id/graph', :to => 'repositories#graph'
  post 'projects/:id/repository/:repository_id/fetch_changesets', :to => 'repositories#fetch_changesets'

  get 'projects/:id/repository/:repository_id/revisions/:rev', :to => 'repositories#revision'
  get 'projects/:id/repository/:repository_id/revision', :to => 'repositories#revision'
  post   'projects/:id/repository/:repository_id/revisions/:rev/issues', :to => 'repositories#add_related_issue'
  delete 'projects/:id/repository/:repository_id/revisions/:rev/issues/:issue_id', :to => 'repositories#remove_related_issue'
  get 'projects/:id/repository/:repository_id/revisions', :to => 'repositories#revisions'
  %w(browse show entry raw annotate).each do |action|
    get "projects/:id/repository/:repository_id/revisions/:rev/#{action}(/*path)",
        :controller => 'repositories',
        :action => action,
        :format => 'html',
        :constraints => {:rev => /[a-z0-9\.\-_]+/, :path => /.*/}
  end

  %w(browse entry raw changes annotate).each do |action|
    get "projects/:id/repository/:repository_id/#{action}(/*path)",
        :controller => 'repositories',
        :action => action,
        :format => 'html',
        :constraints => {:path => /.*/}
  end

  get "projects/:id/repository/:repository_id/revisions/:rev/diff(/*path)",
      :to => 'repositories#diff',
      :format => false,
      :constraints => {:rev => /[a-z0-9\.\-_]+/, :path => /.*/}
  get "projects/:id/repository/:repository_id/diff(/*path)",
      :to => 'repositories#diff',
      :format => false,
      :constraints => {:path => /.*/}

  get 'projects/:id/repository/:repository_id/show/*path', :to => 'repositories#show', :format => 'html', :constraints => {:path => /.*/}

  get 'projects/:id/repository/:repository_id', :to => 'repositories#show', :path => nil
  get 'projects/:id/repository', :to => 'repositories#show', :path => nil

  # additional routes for having the file name at the end of url
  get 'attachments/:id/:filename', :to => 'attachments#show', :id => /\d+/, :filename => /.*/, :as => 'named_attachment', :format => 'html'
  get 'attachments/download/:id/:filename', :to => 'attachments#download', :id => /\d+/, :filename => /.*/, :as => 'download_named_attachment'
  get 'attachments/download/:id', :to => 'attachments#download', :id => /\d+/
  get 'attachments/thumbnail/:id(/:size)', :to => 'attachments#thumbnail', :id => /\d+/, :size => /\d+/, :as => 'thumbnail'
  resources :attachments, :only => [:show, :update, :destroy]
  get 'attachments/:object_type/:object_id/edit', :to => 'attachments#edit_all', :as => :object_attachments_edit
  patch 'attachments/:object_type/:object_id', :to => 'attachments#update_all', :as => :object_attachments
  get 'attachments/:object_type/:object_id/download', :to => 'attachments#download_all', :as => :object_attachments_download

  resources :groups do
    resources :memberships, :controller => 'principal_memberships'
    member do
      get 'autocomplete_for_user'
    end
  end

  get 'groups/:id/users/new', :to => 'groups#new_users', :id => /\d+/, :as => 'new_group_users'
  post 'groups/:id/users', :to => 'groups#add_users', :id => /\d+/, :as => 'group_users'
  delete 'groups/:id/users/:user_id', :to => 'groups#remove_user', :id => /\d+/, :as => 'group_user'

  resources :trackers, :except => :show do
    collection do
      match 'fields', :via => [:get, :post]
    end
  end
  resources :issue_statuses, :except => :show do
    collection do
      post 'update_issue_done_ratio'
    end
  end
  resources :custom_fields, :except => :show do
    resources :enumerations, :controller => 'custom_field_enumerations', :except => [:show, :new, :edit]
    put 'enumerations', :to => 'custom_field_enumerations#update_each'
  end
  resources :roles do
    collection do
      get 'permissions'
      post 'permissions', :to => 'roles#update_permissions'
    end
  end
  resources :enumerations, :except => :show
  match 'enumerations/:type', :to => 'enumerations#index', :via => :get

  get 'projects/:id/search', :controller => 'search', :action => 'index'
  get 'search', :controller => 'search', :action => 'index'


  get  'mail_handler', :to => 'mail_handler#new'
  post 'mail_handler', :to => 'mail_handler#index'

  get 'admin', :to => 'admin#index'
  get 'admin/projects', :to => 'admin#projects'
  get 'admin/plugins', :to => 'admin#plugins'
  get 'admin/info', :to => 'admin#info'
  post 'admin/test_email', :to => 'admin#test_email', :as => 'test_email'
  post 'admin/default_configuration', :to => 'admin#default_configuration'

  resources :auth_sources do
    member do
      get 'test_connection', :as => 'try_connection'
    end
    collection do
      get 'autocomplete_for_new_user'
    end
  end

  match 'workflows', :controller => 'workflows', :action => 'index', :via => :get
  match 'workflows/edit', :controller => 'workflows', :action => 'edit', :via => [:get, :post]
  match 'workflows/permissions', :controller => 'workflows', :action => 'permissions', :via => [:get, :post]
  match 'workflows/copy', :controller => 'workflows', :action => 'copy', :via => [:get, :post]
  match 'settings', :controller => 'settings', :action => 'index', :via => :get
  match 'settings/edit', :controller => 'settings', :action => 'edit', :via => [:get, :post]
  match 'settings/plugin/:id', :controller => 'settings', :action => 'plugin', :via => [:get, :post], :as => 'plugin_settings'

  match 'sys/projects', :to => 'sys#projects', :via => :get
  match 'sys/projects/:id/repository', :to => 'sys#create_project_repository', :via => :post
  match 'sys/fetch_changesets', :to => 'sys#fetch_changesets', :via => [:get, :post]

  match 'uploads', :to => 'attachments#upload', :via => :post

  get 'robots', :to => 'welcome#robots'

  Dir.glob File.expand_path("#{Redmine::Plugin.directory}/*") do |plugin_dir|
    file = File.join(plugin_dir, "config/routes.rb")
    if File.exists?(file)
      begin
        instance_eval File.read(file)
      rescue SyntaxError, StandardError => e
        puts "An error occurred while loading the routes definition of #{File.basename(plugin_dir)} plugin (#{file}): #{e.message}."
        exit 1
      end
    end
  end
end
# The priority is based upon order of creation:
# first created -> highest priority.
# Routes with asterisks should go at the end of the file if they are ambiguous.
CloudController::Application.routes.draw do
  get    'info'                      => 'default#info',         :as => :cloud_info
  get    'info/services'             => 'default#service_info', :as => :cloud_service_info
  get    'info/runtimes'             => 'default#runtime_info', :as => :cloud_runtime_info
  get    'users'                     => 'users#list',           :as => :list_users
  post   'users'                     => 'users#create',         :as => :create_user
  get    'users/*email'              => 'users#info',           :as => :user_info
  delete 'users/*email'              => 'users#delete',         :as => :delete_user
  put    'users/*email'              => 'users#update',         :as => :update_user
  post   'users/*email/tokens'       => 'user_tokens#create',   :as => :create_token
  post   'apps'                      => 'apps#create',          :as => :app_create
  get    'apps'                      => 'apps#list',            :as => :list_apps
  get    'apps/:name'                => 'apps#get',             :as => :app_get
  put    'apps/:name'                => 'apps#update',          :as => :app_update
  delete 'apps/:name'                => 'apps#delete',          :as => :app_delete

  put    'apps/:name/application'    => 'apps#upload',          :as => :app_upload
  get    'apps/:name/crashes'        => 'apps#crashes',         :as => :app_crashes
  post   'resources'                 => 'resource_pool#match',  :as => :resource_match
  get    'apps/:name/application'    => 'apps#download',        :as => :app_download
  get    'staged_droplets/:id/:hash' => 'apps#download_staged', :as => :app_download_staged
  get    'apps/:name/instances'      => 'apps#instances',       :as => :app_instances
  get    'apps/:name/stats'          => 'apps#stats',           :as => :app_stats
  get    'apps/:name/update'         => 'apps#check_update'
  put    'apps/:name/update'         => 'apps#start_update'

  #bulk APIs for health manager v.2 and billing
  #retrieving batches of items. An opaque token is returned with every request to resume the retrieval
  #from where the last request left off.
  get    'bulk/apps'                 => 'bulk#apps',            :as => :bulk_apps
  get    'bulk/counts'               => 'bulk#counts',          :as => :bulk_counts

  # Stagers interact with the CC via these urls
  post   'staging/droplet/:id/:upload_id' => 'staging#upload_droplet', :as => :upload_droplet
  get    'staging/app/:id'                => 'staging#download_app',   :as => :download_unstaged_app

  get    'services/v1/offerings'                     => 'services#list',           :as => :service_list
  post   'services/v1/offerings'                     => 'services#create',         :as => :service_create
  delete 'services/v1/offerings/:label(/:provider)'              => 'services#delete',         :as => :service_delete,         :label => /[^\/]+/, :provider => /[^\/]+/
  get    'services/v1/offerings/:label(/:provider)/handles'      => 'services#list_handles',   :as => :service_list_handles,   :label => /[^\/]+/, :provider => /[^\/]+/
  get    'services/v1/offerings/:label(/:provider)'              => 'services#get',            :as => :service_get,            :label => /[^\/]+/, :provider => /[^\/]+/
  post   'services/v1/offerings/:label(/:provider)/handles/:id'  => 'services#update_handle',  :as => :service_update_handle,  :label => /[^\/]+/, :provider => /[^\/]+/
  post   'services/v1/configurations'                => 'services#provision',      :as => :service_provision
  delete 'services/v1/configurations/:id'            => 'services#unprovision',    :as => :service_unprovision,    :id    => /[^\/]+/
  post   'services/v1/bindings'                      => 'services#bind',           :as => :service_bind
  post   'services/v1/bindings/external'             => 'services#bind_external',  :as => :service_bind_external
  delete 'services/v1/bindings/:binding_token'       => 'services#unbind',         :as => :service_unbind,         :binding_token => /[^\/]+/
  post   'services/v1/binding_tokens'                => 'binding_tokens#create',   :as => :binding_token_create
  get    'services/v1/binding_tokens/:binding_token' => 'binding_tokens#get',      :as => :binding_token_get,      :binding_token => /[^\/]+/
  delete 'services/v1/binding_tokens/:binding_token' => 'binding_tokens#delete',   :as => :binding_token_delete,   :binding_token => /[^\/]+/

  # Proxied (Brokered and Marketplace) Services
  get    'proxied_services/v1/offerings' => 'services#list_proxied_services',   :as => :service_list_proxied_services

  # Service lifecycle apis
  post   'services/v1/configurations/:id/snapshots'          => 'services#create_snapshot',      :as => :service_create_snapshot,       :id   => /[^\/]+/
  get    'services/v1/configurations/:id/snapshots'          => 'services#enum_snapshots',       :as => :service_enum_snapshots,        :id   => /[^\/]+/
  get    'services/v1/configurations/:id/snapshots/:sid'     => 'services#snapshot_details',     :as => :service_snapshot_details,      :id   => /[^\/]+/, :sid => /[^\/]+/
  post   'services/v1/configurations/:id/snapshots/:sid/name'=> 'services#update_snapshot_name', :as => :service_update_snapshot_name,  :id   => /[^\/]+/, :sid => /[^\/]+/
  put    'services/v1/configurations/:id/snapshots/:sid'     => 'services#rollback_snapshot',    :as => :service_rollback_snapshot,     :id   => /[^\/]+/, :sid => /[^\/]+/
  delete 'services/v1/configurations/:id/snapshots/:sid'     => 'services#delete_snapshot',      :as => :service_delete_snapshot,     :id   => /[^\/]+/, :sid => /[^\/]+/
  post   'services/v1/configurations/:id/serialized/url/snapshots/:sid'     => 'services#create_serialized_url',       :as => :service_create_serialized_url,    :id   => /[^\/]+/, :sid => /[^\/]+/
  get    'services/v1/configurations/:id/serialized/url/snapshots/:sid'     => 'services#serialized_url',       :as => :service_serialized_url,    :id   => /[^\/]+/, :sid => /[^\/]+/
  put    'services/v1/configurations/:id/serialized/url'     => 'services#import_from_url',      :as => :service_import_from_url,       :id   => /[^\/]+/
  put    'services/v1/configurations/:id/serialized/data'    => 'services#import_from_data',     :as => :service_import_from_data,      :id   => /[^\/]+/
  get    'services/v1/configurations/:id/jobs/:job_id'       => 'services#job_info',             :as => :service_job_info,              :id   => /[^\/]+/, :job_id => /[^\/]+/


  # Legacy services implementation (for old vmc)
  get     'services'        => 'legacy_services#list',        :as => :legacy_service_list
  post    'services'        => 'legacy_services#provision',   :as => :legacy_service_provision
  delete  'services/:alias' => 'legacy_services#unprovision', :as => :legacy_service_unprovision, :alias => /[^\/]+/
  get     'services/:alias' => 'legacy_services#get',         :as => :legacy_service_get,         :alias => /[^\/]+/
  # Not yet re-implemented
  post    'services/:label/tokens' => 'default#not_implemented'
  delete  'services/:label/tokens' => 'default#not_implemented'

  # download app files from a DEA instance
  get 'apps/:name/instances/:instance_id/files'       => 'apps#files'
  get 'apps/:name/instances/:instance_id/files/*path' => 'apps#files'

  # Index route should be last.
  root :to => "default#index"

  match '*a', :to => 'default#route_not_found'

end
# frozen_string_literal: true

require "sidekiq/web"
require "mini_scheduler/web"

# The following constants have been replaced with `RouteFormat` and are deprecated.
USERNAME_ROUTE_FORMAT = /[%\w.\-]+?/ unless defined? USERNAME_ROUTE_FORMAT
BACKUP_ROUTE_FORMAT = /.+\.(sql\.gz|tar\.gz|tgz)/i unless defined? BACKUP_ROUTE_FORMAT

Discourse::Application.routes.draw do
  scope path: nil, constraints: { format: /(json|html|\*\/\*)/ } do
    relative_url_root = (defined?(Rails.configuration.relative_url_root) && Rails.configuration.relative_url_root) ? Rails.configuration.relative_url_root + '/' : '/'

    match "/404", to: "exceptions#not_found", via: [:get, :post]
    get "/404-body" => "exceptions#not_found_body"

    get "/bootstrap" => "bootstrap#index"

    post "webhooks/aws" => "webhooks#aws"
    post "webhooks/mailgun"  => "webhooks#mailgun"
    post "webhooks/mailjet"  => "webhooks#mailjet"
    post "webhooks/mandrill" => "webhooks#mandrill"
    post "webhooks/postmark" => "webhooks#postmark"
    post "webhooks/sendgrid" => "webhooks#sendgrid"
    post "webhooks/sparkpost" => "webhooks#sparkpost"

    scope path: nil, constraints: { format: /.*/ } do
      if Rails.env.development?
        mount Sidekiq::Web => "/sidekiq"
        mount Logster::Web => "/logs"
      else
        # only allow sidekiq in master site
        mount Sidekiq::Web => "/sidekiq", constraints: AdminConstraint.new(require_master: true)
        mount Logster::Web => "/logs", constraints: AdminConstraint.new
      end
    end

    resources :about do
      collection do
        get "live_post_counts"
      end
    end

    get "finish-installation" => "finish_installation#index"
    get "finish-installation/register" => "finish_installation#register"
    post "finish-installation/register" => "finish_installation#register"
    get "finish-installation/confirm-email" => "finish_installation#confirm_email"
    put "finish-installation/resend-email" => "finish_installation#resend_email"

    get "pub/check-slug" => "published_pages#check_slug"
    get "pub/by-topic/:topic_id" => "published_pages#details"
    put "pub/by-topic/:topic_id" => "published_pages#upsert"
    delete "pub/by-topic/:topic_id" => "published_pages#destroy"
    get "pub/:slug" => "published_pages#show"

    resources :directory_items

    get "site" => "site#site"
    namespace :site do
      get "settings"
      get "custom_html"
      get "banner"
      get "emoji"
    end

    get "site/basic-info" => 'site#basic_info'
    get "site/statistics" => 'site#statistics'

    get "srv/status" => "forums#status"

    get "wizard" => "wizard#index"
    get 'wizard/steps' => 'steps#index'
    get 'wizard/steps/:id' => "wizard#index"
    put 'wizard/steps/:id' => "steps#update"

    namespace :admin, constraints: StaffConstraint.new do
      get "" => "admin#index"

      get 'plugins' => 'plugins#index'

      resources :site_settings, constraints: AdminConstraint.new do
        collection do
          get "category/:id" => "site_settings#index"
        end

        put "user_count" => "site_settings#user_count"
      end

      get "reports" => "reports#index"
      get "reports/bulk" => "reports#bulk"
      get "reports/:type" => "reports#show"

      resources :groups, only: [:create] do
        member do
          put "owners" => "groups#add_owners"
          delete "owners" => "groups#remove_owner"
          put "primary" => "groups#set_primary"
        end
      end
      resources :groups, except: [:create], constraints: AdminConstraint.new do
        collection do
          put "automatic_membership_count" => "groups#automatic_membership_count"
        end
      end

      get "groups/:type" => "groups#show", constraints: AdminConstraint.new
      get "groups/:type/:id" => "groups#show", constraints: AdminConstraint.new

      resources :users, id: RouteFormat.username, except: [:show] do
        collection do
          get "list" => "users#index"
          get "list/:query" => "users#index"
          get "ip-info" => "users#ip_info"
          delete "delete-others-with-same-ip" => "users#delete_other_accounts_with_same_ip"
          get "total-others-with-same-ip" => "users#total_other_accounts_with_same_ip"
          put "approve-bulk" => "users#approve_bulk"
        end
        delete "penalty_history", constraints: AdminConstraint.new
        put "suspend"
        put "delete_posts_batch"
        put "unsuspend"
        put "revoke_admin", constraints: AdminConstraint.new
        put "grant_admin", constraints: AdminConstraint.new
        put "revoke_moderation", constraints: AdminConstraint.new
        put "grant_moderation", constraints: AdminConstraint.new
        put "approve"
        post "log_out", constraints: AdminConstraint.new
        put "activate"
        put "deactivate"
        put "silence"
        put "unsilence"
        put "trust_level"
        put "trust_level_lock"
        put "primary_group"
        post "groups" => "users#add_group", constraints: AdminConstraint.new
        delete "groups/:group_id" => "users#remove_group", constraints: AdminConstraint.new
        get "badges"
        get "leader_requirements" => "users#tl3_requirements"
        get "tl3_requirements"
        put "anonymize"
        post "merge"
        post "reset_bounce_score"
        put "disable_second_factor"
        delete "sso_record"
      end
      get "users/:id.json" => 'users#show', defaults: { format: 'json' }
      get 'users/:id/:username' => 'users#show', constraints: { username: RouteFormat.username }
      get 'users/:id/:username/badges' => 'users#show'
      get 'users/:id/:username/tl3_requirements' => 'users#show'

      post "users/sync_sso" => "users#sync_sso", constraints: AdminConstraint.new

      resources :impersonate, constraints: AdminConstraint.new

      resources :email, constraints: AdminConstraint.new do
        collection do
          post "test"
          get "sent"
          get "skipped"
          get "bounced"
          get "received"
          get "rejected"
          get "/incoming/:id/raw" => "email#raw_email"
          get "/incoming/:id" => "email#incoming"
          get "/incoming_from_bounced/:id" => "email#incoming_from_bounced"
          get "preview-digest" => "email#preview_digest"
          get "send-digest" => "email#send_digest"
          get "smtp_should_reject"
          post "handle_mail"
          get "advanced-test"
          post "advanced-test" => "email#advanced_test"
        end
      end

      scope "/logs" do
        resources :staff_action_logs,     only: [:index]
        get 'staff_action_logs/:id/diff' => 'staff_action_logs#diff'
        resources :screened_emails,       only: [:index, :destroy]
        resources :screened_ip_addresses, only: [:index, :create, :update, :destroy] do
          collection do
            post "roll_up"
          end
        end
        resources :screened_urls,         only: [:index]
        resources :search_logs,           only: [:index]
        get 'search_logs/term/' => 'search_logs#term'
      end

      get "/logs" => "staff_action_logs#index"

      # alias
      get '/logs/watched_words', to: redirect(relative_url_root + 'admin/customize/watched_words'), constraints: AdminConstraint.new
      get '/logs/watched_words/*path', to: redirect(relative_url_root + 'admin/customize/watched_words/%{path}'), constraints: AdminConstraint.new

      get "customize" => "color_schemes#index", constraints: AdminConstraint.new
      get "customize/themes" => "themes#index", constraints: AdminConstraint.new
      get "customize/colors" => "color_schemes#index", constraints: AdminConstraint.new
      get "customize/colors/:id" => "color_schemes#index", constraints: AdminConstraint.new
      get "customize/permalinks" => "permalinks#index", constraints: AdminConstraint.new
      get "customize/embedding" => "embedding#show", constraints: AdminConstraint.new
      put "customize/embedding" => "embedding#update", constraints: AdminConstraint.new

      resources :themes, constraints: AdminConstraint.new

      post "themes/import" => "themes#import"
      post "themes/upload_asset" => "themes#upload_asset"
      post "themes/generate_key_pair" => "themes#generate_key_pair"
      get "themes/:id/preview" => "themes#preview"
      put "themes/:id/setting" => "themes#update_single_setting"

      scope "/customize", constraints: AdminConstraint.new do
        resources :user_fields, constraints: AdminConstraint.new
        resources :emojis, constraints: AdminConstraint.new

        get 'themes/:id/:target/:field_name/edit' => 'themes#index'
        get 'themes/:id' => 'themes#index'
        get "themes/:id/export" => "themes#export"

        # They have periods in their URLs often:
        get 'site_texts'             => 'site_texts#index'
        get 'site_texts/:id.json'    => 'site_texts#show',   constraints: { id: /[\w.\-\+\%\&]+/i }
        get 'site_texts/:id'         => 'site_texts#show',   constraints: { id: /[\w.\-\+\%\&]+/i }
        put 'site_texts/:id.json'    => 'site_texts#update', constraints: { id: /[\w.\-\+\%\&]+/i }
        put 'site_texts/:id'         => 'site_texts#update', constraints: { id: /[\w.\-\+\%\&]+/i }
        delete 'site_texts/:id.json' => 'site_texts#revert', constraints: { id: /[\w.\-\+\%\&]+/i }
        delete 'site_texts/:id'      => 'site_texts#revert', constraints: { id: /[\w.\-\+\%\&]+/i }

        get 'reseed' => 'site_texts#get_reseed_options'
        post 'reseed' => 'site_texts#reseed'

        get 'email_templates'          => 'email_templates#index'
        get 'email_templates/(:id)'    => 'email_templates#show',   constraints: { id: /[0-9a-z_.]+/ }
        put 'email_templates/(:id)'    => 'email_templates#update', constraints: { id: /[0-9a-z_.]+/ }
        delete 'email_templates/(:id)' => 'email_templates#revert', constraints: { id: /[0-9a-z_.]+/ }

        get 'robots' => 'robots_txt#show'
        put 'robots.json' => 'robots_txt#update'
        delete 'robots.json' => 'robots_txt#reset'

        resource :email_style, only: [:show, :update]
        get 'email_style/:field' => 'email_styles#show', constraints: { field: /html|css/ }

        resources :watched_words, only: [:index, :create, :update, :destroy] do
          collection do
            get "action/:id" => "watched_words#index"
            get "action/:id/download" => "watched_words#download"
            delete "action/:id" => "watched_words#clear_all"
          end
        end
        post "watched_words/upload" => "watched_words#upload"
      end

      resources :embeddable_hosts, constraints: AdminConstraint.new
      resources :color_schemes, constraints: AdminConstraint.new

      resources :permalinks, constraints: AdminConstraint.new

      get "version_check" => "versions#show"

      get "dashboard" => "dashboard#index"
      get "dashboard/general" => "dashboard#general"
      get "dashboard/moderation" => "dashboard#moderation"
      get "dashboard/security" => "dashboard#security"
      get "dashboard/reports" => "dashboard#reports"
      get "dashboard/new-features" => "dashboard#new_features"
      put "dashboard/mark-new-features-as-seen" => "dashboard#mark_new_features_as_seen"

      resources :dashboard, only: [:index] do
        collection do
          get "problems"
        end
      end

      resources :api, only: [:index], constraints: AdminConstraint.new do
        collection do
          resources :keys, controller: 'api', only: [:index, :show, :update, :create, :destroy] do
            collection do
              get 'scopes' => 'api#scopes'
            end

            member do
              post "revoke" => "api#revoke_key"
              post "undo-revoke" => "api#undo_revoke_key"
            end
          end

          resources :web_hooks
          get 'web_hook_events/:id' => 'web_hooks#list_events', as: :web_hook_events
          get 'web_hooks/:id/events' => 'web_hooks#list_events'
          get 'web_hooks/:id/events/bulk' => 'web_hooks#bulk_events'
          post 'web_hooks/:web_hook_id/events/:event_id/redeliver' => 'web_hooks#redeliver_event'
          post 'web_hooks/:id/ping' => 'web_hooks#ping'
        end
      end

      resources :backups, only: [:index, :create], constraints: AdminConstraint.new do
        member do
          get "" => "backups#show", constraints: { id: RouteFormat.backup }
          put "" => "backups#email", constraints: { id: RouteFormat.backup }
          delete "" => "backups#destroy", constraints: { id: RouteFormat.backup }
          post "restore" => "backups#restore", constraints: { id: RouteFormat.backup }
        end
        collection do
          get "logs" => "backups#logs"
          get "status" => "backups#status"
          delete "cancel" => "backups#cancel"
          post "rollback" => "backups#rollback"
          put "readonly" => "backups#readonly"
          get "upload" => "backups#check_backup_chunk"
          post "upload" => "backups#upload_backup_chunk"
          get "upload_url" => "backups#create_upload_url"
        end
      end

      resources :badges, constraints: AdminConstraint.new do
        collection do
          get "/award/:badge_id" => "badges#award"
          post "/award/:badge_id" => "badges#mass_award"
          get "types" => "badges#badge_types"
          post "badge_groupings" => "badges#save_badge_groupings"
          post "preview" => "badges#preview"
        end
      end

    end # admin namespace

    get "email/unsubscribe/:key" => "email#unsubscribe", as: "email_unsubscribe"
    get "email/unsubscribed" => "email#unsubscribed", as: "email_unsubscribed"
    post "email/unsubscribe/:key" => "email#perform_unsubscribe", as: "email_perform_unsubscribe"

    get "extra-locales/:bundle" => "extra_locales#show"

    resources :session, id: RouteFormat.username, only: [:create, :destroy, :become] do
      if !Rails.env.production?
        get 'become'
      end

      collection do
        post "forgot_password"
      end
    end

    get "review" => "reviewables#index" # For ember app
    get "review/:reviewable_id" => "reviewables#show", constraints: { reviewable_id: /\d+/ }
    get "review/:reviewable_id/explain" => "reviewables#explain", constraints: { reviewable_id: /\d+/ }
    get "review/count" => "reviewables#count"
    get "review/topics" => "reviewables#topics"
    get "review/settings" => "reviewables#settings"
    put "review/settings" => "reviewables#settings"
    put "review/:reviewable_id/perform/:action_id" => "reviewables#perform", constraints: {
      reviewable_id: /\d+/,
      action_id: /[a-z\_]+/
    }
    put "review/:reviewable_id" => "reviewables#update", constraints: { reviewable_id: /\d+/ }
    delete "review/:reviewable_id" => "reviewables#destroy", constraints: { reviewable_id: /\d+/ }

    resources :reviewable_claimed_topics

    get "session/sso" => "session#sso"
    get "session/sso_login" => "session#sso_login"
    get "session/sso_provider" => "session#sso_provider"
    get "session/current" => "session#current"
    get "session/csrf" => "session#csrf"
    get "session/hp" => "session#get_honeypot_value"
    get "session/email-login/:token" => "session#email_login_info"
    post "session/email-login/:token" => "session#email_login"
    get "session/otp/:token" => "session#one_time_password", constraints: { token: /[0-9a-f]+/ }
    post "session/otp/:token" => "session#one_time_password", constraints: { token: /[0-9a-f]+/ }
    get "composer_messages" => "composer_messages#index"

    resources :static
    post "login" => "static#enter"
    get "login" => "static#show", id: "login"
    get "password-reset" => "static#show", id: "password_reset"
    get "faq" => "static#show", id: "faq"
    get "tos" => "static#show", id: "tos", as: 'tos'
    get "privacy" => "static#show", id: "privacy", as: 'privacy'
    get "signup" => "static#show", id: "signup"
    get "login-preferences" => "static#show", id: "login"

    %w{guidelines rules conduct}.each do |faq_alias|
      get faq_alias => "static#show", id: "guidelines", as: faq_alias
    end

    get "my/*path", to: 'users#my_redirect'
    get ".well-known/change-password", to: redirect(relative_url_root + 'my/preferences/account', status: 302)

    get "user-cards" => "users#cards", format: :json

    %w{users u}.each_with_index do |root_path, index|
      get "#{root_path}" => "users#index", constraints: { format: 'html' }

      resources :users, except: [:index, :new, :show, :update, :destroy], path: root_path do
        collection do
          get "check_username"
          get "check_email"
          get "is_local_username"
        end
      end

      post "#{root_path}/second_factors" => "users#list_second_factors"
      put "#{root_path}/second_factor" => "users#update_second_factor"

      post "#{root_path}/create_second_factor_security_key" => "users#create_second_factor_security_key"
      post "#{root_path}/register_second_factor_security_key" => "users#register_second_factor_security_key"
      put "#{root_path}/security_key" => "users#update_security_key"
      post "#{root_path}/create_second_factor_totp" => "users#create_second_factor_totp"
      post "#{root_path}/enable_second_factor_totp" => "users#enable_second_factor_totp"
      put "#{root_path}/disable_second_factor" => "users#disable_second_factor"

      put "#{root_path}/second_factors_backup" => "users#create_second_factor_backup"

      put "#{root_path}/update-activation-email" => "users#update_activation_email"
      post "#{root_path}/email-login" => "users#email_login"
      get "#{root_path}/admin-login" => "users#admin_login"
      put "#{root_path}/admin-login" => "users#admin_login"
      post "#{root_path}/toggle-anon" => "users#toggle_anon"
      post "#{root_path}/read-faq" => "users#read_faq"
      get "#{root_path}/search/users" => "users#search_users"

      get({ "#{root_path}/account-created/" => "users#account_created" }.merge(index == 1 ? { as: :users_account_created } : { as: :old_account_created }))

      get "#{root_path}/account-created/resent" => "users#account_created"
      get "#{root_path}/account-created/edit-email" => "users#account_created"
      get({ "#{root_path}/password-reset/:token" => "users#password_reset_show" }.merge(index == 1 ? { as: :password_reset_token } : {}))
      get "#{root_path}/confirm-email-token/:token" => "users#confirm_email_token", constraints: { format: 'json' }
      put "#{root_path}/password-reset/:token" => "users#password_reset_update"
      get "#{root_path}/activate-account/:token" => "users#activate_account"
      put({ "#{root_path}/activate-account/:token" => "users#perform_account_activation" }.merge(index == 1 ? { as: 'perform_activate_account' } : {}))

      get "#{root_path}/confirm-old-email/:token" => "users_email#show_confirm_old_email"
      put "#{root_path}/confirm-old-email" => "users_email#confirm_old_email"

      get "#{root_path}/confirm-new-email/:token" => "users_email#show_confirm_new_email"
      put "#{root_path}/confirm-new-email" => "users_email#confirm_new_email"

      get({
        "#{root_path}/confirm-admin/:token" => "users#confirm_admin",
        constraints: { token: /[0-9a-f]+/ }
      }.merge(index == 1 ? { as: 'confirm_admin' } : {}))
      post "#{root_path}/confirm-admin/:token" => "users#confirm_admin", constraints: { token: /[0-9a-f]+/ }
      get "#{root_path}/:username/private-messages" => "user_actions#private_messages", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/private-messages/:filter" => "user_actions#private_messages", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/messages" => "user_actions#private_messages", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/messages/:filter" => "user_actions#private_messages", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/messages/group/:group_name" => "user_actions#private_messages", constraints: { username: RouteFormat.username, group_name: RouteFormat.username }
      get "#{root_path}/:username/messages/group/:group_name/archive" => "user_actions#private_messages", constraints: { username: RouteFormat.username, group_name: RouteFormat.username }
      get "#{root_path}/:username/messages/tags/:tag_id" => "user_actions#private_messages", constraints: StaffConstraint.new
      get "#{root_path}/:username.json" => "users#show", constraints: { username: RouteFormat.username }, defaults: { format: :json }
      get({ "#{root_path}/:username" => "users#show", constraints: { username: RouteFormat.username } }.merge(index == 1 ? { as: 'user' } : {}))
      put "#{root_path}/:username" => "users#update", constraints: { username: RouteFormat.username }, defaults: { format: :json }
      get "#{root_path}/:username/emails" => "users#check_emails", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/sso-email" => "users#check_sso_email", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/sso-payload" => "users#check_sso_payload", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/preferences" => "users#preferences", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/preferences/email" => "users_email#index", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/preferences/account" => "users#preferences", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/preferences/security" => "users#preferences", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/preferences/profile" => "users#preferences", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/preferences/emails" => "users#preferences", constraints: { username: RouteFormat.username }
      put "#{root_path}/:username/preferences/primary-email" => "users#update_primary_email", format: :json, constraints: { username: RouteFormat.username }
      delete "#{root_path}/:username/preferences/email" => "users#destroy_email", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/preferences/notifications" => "users#preferences", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/preferences/categories" => "users#preferences", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/preferences/users" => "users#preferences", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/preferences/tags" => "users#preferences", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/preferences/interface" => "users#preferences", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/preferences/apps" => "users#preferences", constraints: { username: RouteFormat.username }
      post "#{root_path}/:username/preferences/email" => "users_email#create", constraints: { username: RouteFormat.username }
      put "#{root_path}/:username/preferences/email" => "users_email#update", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/preferences/badge_title" => "users#preferences", constraints: { username: RouteFormat.username }
      put "#{root_path}/:username/preferences/badge_title" => "users#badge_title", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/preferences/username" => "users#preferences", constraints: { username: RouteFormat.username }
      put "#{root_path}/:username/preferences/username" => "users#username", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/preferences/second-factor" => "users#preferences", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/preferences/second-factor-backup" => "users#preferences", constraints: { username: RouteFormat.username }
      delete "#{root_path}/:username/preferences/user_image" => "users#destroy_user_image", constraints: { username: RouteFormat.username }
      put "#{root_path}/:username/preferences/avatar/pick" => "users#pick_avatar", constraints: { username: RouteFormat.username }
      put "#{root_path}/:username/preferences/avatar/select" => "users#select_avatar", constraints: { username: RouteFormat.username }
      post "#{root_path}/:username/preferences/revoke-account" => "users#revoke_account", constraints: { username: RouteFormat.username }
      post "#{root_path}/:username/preferences/revoke-auth-token" => "users#revoke_auth_token", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/staff-info" => "users#staff_info", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/summary" => "users#summary", constraints: { username: RouteFormat.username }
      put "#{root_path}/:username/notification_level" => "users#notification_level", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/invited" => "users#invited", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/invited/:filter" => "users#invited", constraints: { username: RouteFormat.username }
      post "#{root_path}/action/send_activation_email" => "users#send_activation_email"
      get "#{root_path}/:username/summary" => "users#show", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/activity/topics.rss" => "list#user_topics_feed", format: :rss, constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/activity.rss" => "posts#user_posts_feed", format: :rss, constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/activity.json" => "posts#user_posts_feed", format: :json, constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/activity" => "users#show", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/activity/:filter" => "users#show", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/badges" => "users#badges", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/bookmarks" => "users#bookmarks", constraints: { username: RouteFormat.username, format: /(json|ics)/ }
      get "#{root_path}/:username/notifications" => "users#show", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/notifications/:filter" => "users#show", constraints: { username: RouteFormat.username }
      delete "#{root_path}/:username" => "users#destroy", constraints: { username: RouteFormat.username }
      get "#{root_path}/by-external/:external_id" => "users#show", constraints: { external_id: /[^\/]+/ }
      get "#{root_path}/by-external/:external_provider/:external_id" => "users#show", constraints: { external_id: /[^\/]+/ }
      get "#{root_path}/:username/flagged-posts" => "users#show", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/deleted-posts" => "users#show", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/topic-tracking-state" => "users#topic_tracking_state", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/profile-hidden" => "users#profile_hidden"
      put "#{root_path}/:username/feature-topic" => "users#feature_topic", constraints: { username: RouteFormat.username }
      put "#{root_path}/:username/clear-featured-topic" => "users#clear_featured_topic", constraints: { username: RouteFormat.username }
      get "#{root_path}/:username/card.json" => "users#show_card", format: :json, constraints: { username: RouteFormat.username }
    end

    get "user-badges/:username.json" => "user_badges#username", constraints: { username: RouteFormat.username }, defaults: { format: :json }
    get "user-badges/:username" => "user_badges#username", constraints: { username: RouteFormat.username }

    post "user_avatar/:username/refresh_gravatar" => "user_avatars#refresh_gravatar", constraints: { username: RouteFormat.username }
    get "letter_avatar/:username/:size/:version.png" => "user_avatars#show_letter", constraints: { hostname: /[\w\.-]+/, size: /\d+/, username: RouteFormat.username, format: :png }
    get "user_avatar/:hostname/:username/:size/:version.png" => "user_avatars#show", constraints: { hostname: /[\w\.-]+/, size: /\d+/, username: RouteFormat.username, format: :png }

    get "letter_avatar_proxy/:version/letter/:letter/:color/:size.png" => "user_avatars#show_proxy_letter", constraints: { format: :png }

    get "svg-sprite/:hostname/svg-:theme_ids-:version.js" => "svg_sprite#show", constraints: { hostname: /[\w\.-]+/, version: /\h{40}/, theme_ids: /([0-9]+(,[0-9]+)*)?/, format: :js }
    get "svg-sprite/search/:keyword" => "svg_sprite#search", format: false, constraints: { keyword: /[-a-z0-9\s\%]+/ }
    get "svg-sprite/picker-search" => "svg_sprite#icon_picker_search", defaults: { format: :json }
    get "svg-sprite/:hostname/icon(/:color)/:name.svg" => "svg_sprite#svg_icon", constraints: { hostname: /[\w\.-]+/, name: /[-a-z0-9\s\%]+/, color: /(\h{3}{1,2})/, format: :svg }

    get "highlight-js/:hostname/:version.js" => "highlight_js#show", constraints: { hostname: /[\w\.-]+/, format: :js }

    get "stylesheets/:name.css.map" => "stylesheets#show_source_map", constraints: { name: /[-a-z0-9_]+/ }
    get "stylesheets/:name.css" => "stylesheets#show", constraints: { name: /[-a-z0-9_]+/ }
    get "color-scheme-stylesheet/:id(/:theme_id)" => "stylesheets#color_scheme", constraints: { format: :json }
    get "theme-javascripts/:digest.js" => "theme_javascripts#show", constraints: { digest: /\h{40}/ }
    get "theme-javascripts/tests/:theme_id.js" => "theme_javascripts#show_tests"

    post "uploads/lookup-metadata" => "uploads#metadata"
    post "uploads" => "uploads#create"
    post "uploads/lookup-urls" => "uploads#lookup_urls"

    # used to download original images
    get "uploads/:site/:sha(.:extension)" => "uploads#show", constraints: { site: /\w+/, sha: /\h{40}/, extension: /[a-z0-9\._]+/i }
    get "uploads/short-url/:base62(.:extension)" => "uploads#show_short", constraints: { site: /\w+/, base62: /[a-zA-Z0-9]+/, extension: /[a-zA-Z0-9\._-]+/i }, as: :upload_short
    # used to download attachments
    get "uploads/:site/original/:tree:sha(.:extension)" => "uploads#show", constraints: { site: /\w+/, tree: /([a-z0-9]+\/)+/i, sha: /\h{40}/, extension: /[a-z0-9\._]+/i }
    if Rails.env.test?
      get "uploads/:site/test_:index/original/:tree:sha(.:extension)" => "uploads#show", constraints: { site: /\w+/, index: /\d+/, tree: /([a-z0-9]+\/)+/i, sha: /\h{40}/, extension: /[a-z0-9\._]+/i }
    end
    # used to download attachments (old route)
    get "uploads/:site/:id/:sha" => "uploads#show", constraints: { site: /\w+/, id: /\d+/, sha: /\h{16}/, format: /.*/ }
    get "secure-media-uploads/*path(.:extension)" => "uploads#show_secure", constraints: { extension: /[a-z0-9\._]+/i }

    get "posts" => "posts#latest", id: "latest_posts", constraints: { format: /(json|rss)/ }
    get "private-posts" => "posts#latest", id: "private_posts", constraints: { format: /(json|rss)/ }
    get "posts/by_number/:topic_id/:post_number" => "posts#by_number"
    get "posts/by-date/:topic_id/:date" => "posts#by_date"
    get "posts/:id/reply-history" => "posts#reply_history"
    get "posts/:id/reply-ids"     => "posts#reply_ids"
    get "posts/:id/reply-ids/all" => "posts#all_reply_ids"
    get "posts/:username/deleted" => "posts#deleted_posts", constraints: { username: RouteFormat.username }
    get "posts/:username/flagged" => "posts#flagged_posts", constraints: { username: RouteFormat.username }

    %w{groups g}.each do |root_path|
      resources :groups, id: RouteFormat.username, path: root_path do
        get "posts.rss" => "groups#posts_feed", format: :rss
        get "mentions.rss" => "groups#mentions_feed", format: :rss

        get 'members'
        get 'posts'
        get 'mentions'
        get 'counts'
        get 'mentionable'
        get 'messageable'
        get 'logs' => 'groups#histories'

        collection do
          get "check-name" => 'groups#check_name'
          get 'custom/new' => 'groups#new', constraints: StaffConstraint.new
          get "search" => "groups#search"
        end

        member do
          %w{
            activity
            activity/:filter
            requests
            messages
            messages/inbox
            messages/archive
            manage
            manage/profile
            manage/members
            manage/membership
            manage/interaction
            manage/email
            manage/categories
            manage/tags
            manage/logs
          }.each do |path|
            get path => 'groups#show'
          end

          get "permissions" => "groups#permissions"
          put "members" => "groups#add_members"
          delete "members" => "groups#remove_member"
          post "request_membership" => "groups#request_membership"
          put "handle_membership_request" => "groups#handle_membership_request"
          post "notifications" => "groups#set_notifications"
        end
      end
    end

    # aliases so old API code works
    delete "admin/groups/:id/members" => "groups#remove_member", constraints: AdminConstraint.new
    put "admin/groups/:id/members" => "groups#add_members", constraints: AdminConstraint.new

    resources :posts do
      delete "bookmark", to: "posts#destroy_bookmark"
      put "wiki"
      put "post_type"
      put "rebake"
      put "unhide"
      put "locked"
      put "notice"
      get "replies"
      get "revisions/latest" => "posts#latest_revision"
      get "revisions/:revision" => "posts#revisions", constraints: { revision: /\d+/ }
      put "revisions/:revision/hide" => "posts#hide_revision", constraints: { revision: /\d+/ }
      put "revisions/:revision/show" => "posts#show_revision", constraints: { revision: /\d+/ }
      put "revisions/:revision/revert" => "posts#revert", constraints: { revision: /\d+/ }
      put "recover"
      collection do
        delete "destroy_many"
        put "merge_posts"
      end
    end

    resources :bookmarks, only: %i[create destroy update] do
      put "toggle_pin"
    end

    resources :notifications, except: :show do
      collection do
        put 'mark-read' => 'notifications#mark_read'
        # creating an alias cause the api was extended to mark a single notification
        # this allows us to cleanly target it
        put 'read' => 'notifications#mark_read'
      end
    end

    match "/auth/failure", to: "users/omniauth_callbacks#failure", via: [:get, :post]
    get "/auth/:provider", to: "users/omniauth_callbacks#confirm_request"
    match "/auth/:provider/callback", to: "users/omniauth_callbacks#complete", via: [:get, :post]
    get "/associate/:token", to: "users/associate_accounts#connect_info", constraints: { token: /\h{32}/ }
    post "/associate/:token", to: "users/associate_accounts#connect", constraints: { token: /\h{32}/ }

    resources :clicks do
      collection do
        post "track"
      end
    end

    get "excerpt" => "excerpt#show"

    resources :post_action_users
    resources :post_readers, only: %i[index]
    resources :post_actions do
      collection do
        get "users"
        post "defer_flags"
      end
    end
    resources :user_actions

    resources :badges, only: [:index]
    get "/badges/:id(/:slug)" => "badges#show", constraints: { format: /(json|html|rss)/ }
    resources :user_badges, only: [:index, :create, :destroy]

    get '/c', to: redirect(relative_url_root + 'categories')

    resources :categories, except: [:show, :new, :edit]
    post "categories/reorder" => "categories#reorder"

    scope path: 'category/:category_id' do
      post "/move" => "categories#move"
      post "/notifications" => "categories#set_notifications"
      put "/slug" => "categories#update_slug"
    end

    get "category/*path" => "categories#redirect"

    get "categories_and_latest" => "categories#categories_and_latest"
    get "categories_and_top" => "categories#categories_and_top"

    get "c/:id/show" => "categories#show"

    get "c/*category_slug/find_by_slug" => "categories#find_by_slug"
    get "c/*category_slug/edit(/:tab)" => "categories#find_by_slug", constraints: { format: 'html' }
    get "/new-category" => "categories#show", constraints: { format: 'html' }

    get "c/*category_slug_path_with_id.rss" => "list#category_feed", format: :rss
    scope path: 'c/*category_slug_path_with_id' do
      get "/none" => "list#category_none_latest"

      TopTopic.periods.each do |period|
        get "/none/l/top/#{period}" => "list#category_none_top_#{period}", as: "category_none_top_#{period}"
        get "/l/top/#{period}" => "list#category_top_#{period}", as: "category_top_#{period}"
      end

      Discourse.filters.each do |filter|
        get "/none/l/#{filter}" => "list#category_none_#{filter}", as: "category_none_#{filter}"
        get "/l/#{filter}" => "list#category_#{filter}", as: "category_#{filter}"
      end

      get "/all" => "list#category_default", as: "category_all", constraints: { format: 'html' }
      get "/" => "list#category_default", as: "category_default"
    end

    get "hashtags" => "hashtags#show"

    TopTopic.periods.each do |period|
      get "top/#{period}.rss" => "list#top_#{period}_feed", format: :rss
      get "top/#{period}" => "list#top_#{period}"
    end

    Discourse.anonymous_filters.each do |filter|
      get "#{filter}.rss" => "list##{filter}_feed", format: :rss
    end

    Discourse.filters.each do |filter|
      get "#{filter}" => "list##{filter}"
    end

    get "search/query" => "search#query"
    get "search" => "search#show"
    post "search/click" => "search#click"

    # Topics resource
    get "t/:id" => "topics#show"
    put "t/:id" => "topics#update"
    delete "t/:id" => "topics#destroy"
    put "t/:id/archive-message" => "topics#archive_message"
    put "t/:id/move-to-inbox" => "topics#move_to_inbox"
    put "t/:id/convert-topic/:type" => "topics#convert_topic"
    put "t/:id/publish" => "topics#publish"
    put "t/:id/shared-draft" => "topics#update_shared_draft"
    put "t/:id/reset-bump-date" => "topics#reset_bump_date"
    put "topics/bulk"
    put "topics/reset-new" => 'topics#reset_new'
    post "topics/timings"

    get 'topics/similar_to' => 'similar_topics#index'
    resources :similar_topics

    get "topics/feature_stats"

    scope "/topics", username: RouteFormat.username do
      get "created-by/:username" => "list#topics_by", as: "topics_by", defaults: { format: :json }
      get "private-messages/:username" => "list#private_messages", as: "topics_private_messages", defaults: { format: :json }
      get "private-messages-sent/:username" => "list#private_messages_sent", as: "topics_private_messages_sent", defaults: { format: :json }
      get "private-messages-archive/:username" => "list#private_messages_archive", as: "topics_private_messages_archive", defaults: { format: :json }
      get "private-messages-unread/:username" => "list#private_messages_unread", as: "topics_private_messages_unread", defaults: { format: :json }
      get "private-messages-tags/:username/:tag_id.json" => "list#private_messages_tag", as: "topics_private_messages_tag", defaults: { format: :json }
      get "groups/:group_name" => "list#group_topics", as: "group_topics", group_name: RouteFormat.username

      scope "/private-messages-group/:username", group_name: RouteFormat.username do
        get ":group_name.json" => "list#private_messages_group", as: "topics_private_messages_group"
        get ":group_name/archive.json" => "list#private_messages_group_archive", as: "topics_private_messages_group_archive"
      end
    end

    get 'embed/topics' => 'embed#topics'
    get 'embed/comments' => 'embed#comments'
    get 'embed/count' => 'embed#count'
    get 'embed/info' => 'embed#info'

    get "new-topic" => "list#latest"
    get "new-message" => "list#latest"

    # Topic routes
    get "t/id_for/:slug" => "topics#id_for_slug"
    get "t/:slug/:topic_id/print" => "topics#show", format: :html, print: true, constraints: { topic_id: /\d+/ }
    get "t/:slug/:topic_id/wordpress" => "topics#wordpress", constraints: { topic_id: /\d+/ }
    get "t/:topic_id/wordpress" => "topics#wordpress", constraints: { topic_id: /\d+/ }
    get "t/:slug/:topic_id/moderator-liked" => "topics#moderator_liked", constraints: { topic_id: /\d+/ }
    get "t/:slug/:topic_id/summary" => "topics#show", defaults: { summary: true }, constraints: { topic_id: /\d+/ }
    get "t/:topic_id/summary" => "topics#show", constraints: { topic_id: /\d+/ }
    put "t/:slug/:topic_id" => "topics#update", constraints: { topic_id: /\d+/ }
    put "t/:slug/:topic_id/star" => "topics#star", constraints: { topic_id: /\d+/ }
    put "t/:topic_id/star" => "topics#star", constraints: { topic_id: /\d+/ }
    put "t/:slug/:topic_id/status" => "topics#status", constraints: { topic_id: /\d+/ }
    put "t/:topic_id/status" => "topics#status", constraints: { topic_id: /\d+/ }
    put "t/:topic_id/clear-pin" => "topics#clear_pin", constraints: { topic_id: /\d+/ }
    put "t/:topic_id/re-pin" => "topics#re_pin", constraints: { topic_id: /\d+/ }
    put "t/:topic_id/mute" => "topics#mute", constraints: { topic_id: /\d+/ }
    put "t/:topic_id/unmute" => "topics#unmute", constraints: { topic_id: /\d+/ }
    post "t/:topic_id/timer" => "topics#timer", constraints: { topic_id: /\d+/ }
    put "t/:topic_id/make-banner" => "topics#make_banner", constraints: { topic_id: /\d+/ }
    put "t/:topic_id/remove-banner" => "topics#remove_banner", constraints: { topic_id: /\d+/ }
    put "t/:topic_id/remove-allowed-user" => "topics#remove_allowed_user", constraints: { topic_id: /\d+/ }
    put "t/:topic_id/remove-allowed-group" => "topics#remove_allowed_group", constraints: { topic_id: /\d+/ }
    put "t/:topic_id/recover" => "topics#recover", constraints: { topic_id: /\d+/ }
    get "t/:topic_id/:post_number" => "topics#show", constraints: { topic_id: /\d+/, post_number: /\d+/ }
    get "t/:topic_id/last" => "topics#show", post_number: 99999999, constraints: { topic_id: /\d+/ }
    get "t/:slug/:topic_id.rss" => "topics#feed", format: :rss, constraints: { topic_id: /\d+/ }
    get "t/:slug/:topic_id" => "topics#show", constraints: { topic_id: /\d+/ }
    get "t/:slug/:topic_id/:post_number" => "topics#show", constraints: { topic_id: /\d+/, post_number: /\d+/ }
    get "t/:slug/:topic_id/last" => "topics#show", post_number: 99999999, constraints: { topic_id: /\d+/ }
    get "t/:topic_id/posts" => "topics#posts", constraints: { topic_id: /\d+/ }, format: :json
    get "t/:topic_id/post_ids" => "topics#post_ids", constraints: { topic_id: /\d+/ }, format: :json
    get "t/:topic_id/excerpts" => "topics#excerpts", constraints: { topic_id: /\d+/ }, format: :json
    post "t/:topic_id/timings" => "topics#timings", constraints: { topic_id: /\d+/ }
    post "t/:topic_id/invite" => "topics#invite", constraints: { topic_id: /\d+/ }
    post "t/:topic_id/invite-group" => "topics#invite_group", constraints: { topic_id: /\d+/ }
    post "t/:topic_id/move-posts" => "topics#move_posts", constraints: { topic_id: /\d+/ }
    post "t/:topic_id/merge-topic" => "topics#merge_topic", constraints: { topic_id: /\d+/ }
    post "t/:topic_id/change-owner" => "topics#change_post_owners", constraints: { topic_id: /\d+/ }
    put "t/:topic_id/change-timestamp" => "topics#change_timestamps", constraints: { topic_id: /\d+/ }
    delete "t/:topic_id/timings" => "topics#destroy_timings", constraints: { topic_id: /\d+/ }
    put "t/:topic_id/bookmark" => "topics#bookmark", constraints: { topic_id: /\d+/ }
    put "t/:topic_id/remove_bookmarks" => "topics#remove_bookmarks", constraints: { topic_id: /\d+/ }
    put "t/:topic_id/tags" => "topics#update_tags", constraints: { topic_id: /\d+/ }
    put "t/:topic_id/slow_mode" => "topics#set_slow_mode", constraints: { topic_id: /\d+/ }

    post "t/:topic_id/notifications" => "topics#set_notifications" , constraints: { topic_id: /\d+/ }

    get "p/:post_id(/:user_id)" => "posts#short_link"
    get "/posts/:id/cooked" => "posts#cooked"
    get "/posts/:id/expand-embed" => "posts#expand_embed"
    get "/posts/:id/raw" => "posts#markdown_id"
    get "/posts/:id/raw-email" => "posts#raw_email"
    get "raw/:topic_id(/:post_number)" => "posts#markdown_num"

    resources :invites, except: [:show]
    get "/invites/:id" => "invites#show", constraints: { format: :html }
    put "/invites/:id" => "invites#update"

    post "invites/upload_csv" => "invites#upload_csv"
    post "invites/destroy-all-expired" => "invites#destroy_all_expired"
    post "invites/reinvite" => "invites#resend_invite"
    post "invites/reinvite-all" => "invites#resend_all_invites"
    delete "invites" => "invites#destroy"
    put "invites/show/:id" => "invites#perform_accept_invitation", as: 'perform_accept_invite'
    get "invites/retrieve" => "invites#retrieve"

    resources :export_csv do
      collection do
        post "export_entity" => "export_csv#export_entity"
      end
    end

    get "onebox" => "onebox#show"
    get "inline-onebox" => "inline_onebox#show"

    get "exception" => "list#latest"

    get "message-bus/poll" => "message_bus#poll"

    resources :drafts, only: [:index]
    get "draft" => "draft#show"
    post "draft" => "draft#update"
    delete "draft" => "draft#destroy"

    if service_worker_asset = Rails.application.assets_manifest.assets['service-worker.js']
      # https://developers.google.com/web/fundamentals/codelabs/debugging-service-workers/
      # Normally the browser will wait until a user closes all tabs that contain the
      # current site before updating to a new Service Worker.
      # Support the old Service Worker path to avoid routing error filling up the
      # logs.
      get "/service-worker.js" => redirect(relative_url_root + service_worker_asset, status: 302), format: :js
      get service_worker_asset => "static#service_worker_asset", format: :js
    elsif Rails.env.development?
      get "/service-worker.js" => "static#service_worker_asset", format: :js
    end

    get "cdn_asset/:site/*path" => "static#cdn_asset", format: false, constraints: { format: /.*/ }
    get "brotli_asset/*path" => "static#brotli_asset", format: false, constraints: { format: /.*/ }

    get "favicon/proxied" => "static#favicon", format: false

    get "robots.txt" => "robots_txt#index"
    get "robots-builder.json" => "robots_txt#builder"
    get "offline.html" => "offline#index"
    get "manifest.webmanifest" => "metadata#manifest", as: :manifest
    get "manifest.json" => "metadata#manifest"
    get ".well-known/assetlinks.json" => "metadata#app_association_android"
    get "apple-app-site-association" => "metadata#app_association_ios", format: false
    get "opensearch" => "metadata#opensearch", constraints: { format: :xml }

    scope '/tag/:tag_id' do
      constraints format: :json do
        get '/' => 'tags#show', as: 'tag_show'
        get '/info' => 'tags#info'
        get '/notifications' => 'tags#notifications'
        put '/notifications' => 'tags#update_notifications'
        put '/' => 'tags#update'
        delete '/' => 'tags#destroy'
        post '/synonyms' => 'tags#create_synonyms'
        delete '/synonyms/:synonym_id' => 'tags#destroy_synonym'

        Discourse.filters.each do |filter|
          get "/l/#{filter}" => "tags#show_#{filter}", as: "tag_show_#{filter}"
        end
      end

      constraints format: :rss do
        get '/' => 'tags#tag_feed'
      end
    end

    scope "/tags" do
      get '/' => 'tags#index'
      get '/filter/list' => 'tags#index'
      get '/filter/search' => 'tags#search'
      get '/personal_messages/:username' => 'tags#personal_messages'
      post '/upload' => 'tags#upload'
      get '/unused' => 'tags#list_unused'
      delete '/unused' => 'tags#destroy_unused'

      constraints(tag_id: /[^\/]+?/, format: /json|rss/) do
        scope path: '/c/*category_slug_path_with_id' do
          Discourse.filters.each do |filter|
            get "/none/:tag_id/l/#{filter}" => "tags#show_#{filter}", as: "tag_category_none_show_#{filter}", defaults: { no_subcategories: true }
          end

          get '/none/:tag_id' => 'tags#show', as: 'tag_category_none_show', defaults: { no_subcategories: true }

          Discourse.filters.each do |filter|
            get "/:tag_id/l/#{filter}" => "tags#show_#{filter}", as: "tag_category_show_#{filter}"
          end

          get '/:tag_id' => 'tags#show', as: 'tag_category_show'
        end

        get '/intersection/:tag_id/*additional_tag_ids' => 'tags#show', as: 'tag_intersection'
      end

      get '*tag_id', to: redirect(relative_url_root + 'tag/%{tag_id}')
    end

    resources :tag_groups, constraints: StaffConstraint.new, except: [:edit] do
      collection do
        get '/filter/search' => 'tag_groups#search'
      end
    end

    Discourse.filters.each do |filter|
      root to: "list##{filter}", constraints: HomePageConstraint.new("#{filter}"), as: "list_#{filter}"
    end
    # special case for categories
    root to: "categories#index", constraints: HomePageConstraint.new("categories"), as: "categories_index"

    root to: 'finish_installation#index', constraints: HomePageConstraint.new("finish_installation"), as: 'installation_redirect'

    get "/user-api-key/new" => "user_api_keys#new"
    post "/user-api-key" => "user_api_keys#create"
    post "/user-api-key/revoke" => "user_api_keys#revoke"
    post "/user-api-key/undo-revoke" => "user_api_keys#undo_revoke"
    get "/user-api-key/otp" => "user_api_keys#otp"
    post "/user-api-key/otp" => "user_api_keys#create_otp"

    get "/safe-mode" => "safe_mode#index"
    post "/safe-mode" => "safe_mode#enter", as: "safe_mode_enter"

    unless Rails.env.production?
      get "/qunit" => "qunit#index"
      get "/wizard/qunit" => "wizard#qunit"
    end

    post "/push_notifications/subscribe" => "push_notification#subscribe"
    post "/push_notifications/unsubscribe" => "push_notification#unsubscribe"

    resources :csp_reports, only: [:create]

    get "/permalink-check", to: 'permalinks#check'

    post "/do-not-disturb" => "do_not_disturb#create"
    delete "/do-not-disturb" => "do_not_disturb#destroy"

    if Rails.env.development?
      mount DiscourseDev::Engine => "/dev/"
    end

    get "*url", to: 'permalinks#show', constraints: PermalinkConstraint.new
  end
end
SwaggerYard::Rails::Engine.routes.draw do
  get '/doc', to: 'swagger#doc'

  scope default: {format: 'json'} do
    get '/swagger', to: 'swagger#index'
    get '/openapi', to: 'swagger#openapi'
    get '/api', to: 'swagger#index'
  end
end
# We want to add a new collection action to Catalog, without over-writing
# what's already there. This SEEMS to do it. 
Rails.application.routes.draw do 
#  match "catalog/range_limit" => "catalog#range_limit"
end

if Rails::VERSION::MAJOR >= 3
  RedmineApp::Application.routes.draw do
    match '/estimate_timelog/:action', :controller => 'estimate_timelog', :via => [:get, :post]
    #match '/estimate_timelog/:action', :to => 'estimate_timelog#report'
  end
else
  ActionController::Routing::Routes.draw do |map|
    map.connect ':controller/:action'
  end
end

Rails.application.routes.draw do
  get 'help', action: :show, controller: 'help'

  resources :pings, only: %i(create)
end
Rails.application.routes.draw do
  mount AhoyEmail::Engine => "/ahoy" if AhoyEmail.api
end

AhoyEmail::Engine.routes.draw do
  scope module: "ahoy" do
    get "click" => "messages#click"

    # legacy
    resources :messages, only: [] do
      get :open, on: :member
      get :click, on: :member
    end
  end
end
Dummy::Application.routes.draw do
  # The priority is based upon order of creation:
  # first created -> highest priority.

  # Sample of regular route:
  #   match 'products/:id' => 'catalog#view'
  # Keep in mind you can assign values other than :controller and :action

  # Sample of named route:
  #   match 'products/:id/purchase' => 'catalog#purchase', :as => :purchase
  # This route can be invoked with purchase_url(:id => product.id)

  # Sample resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Sample resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Sample resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Sample resource route with more complex sub-resources
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', :on => :collection
  #     end
  #   end

  # Sample resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end

  # You can have the root of your site routed with "root"
  # just remember to delete public/index.html.
  # root :to => "welcome#index"

  # See how all your routes lay out with "rake routes"

  # This is a legacy wild controller route that's not recommended for RESTful applications.
  # Note: This route will make all actions in every controller accessible via GET requests.
  # match ':controller(/:action(/:id(.:format)))'
end
Rails.application.routes.draw do
  # The priority is based upon order of creation: first created -> highest priority.
  # See how all your routes lay out with "rake routes".

  # You can have the root of your site routed with "root"
  # root 'welcome#index'

  # Example of regular route:
  #   get 'products/:id' => 'catalog#view'

  # Example of named route that can be invoked with purchase_url(id: product.id)
  #   get 'products/:id/purchase' => 'catalog#purchase', as: :purchase

  # Example resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Example resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Example resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Example resource route with more complex sub-resources:
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', on: :collection
  #     end
  #   end

  # Example resource route with concerns:
  #   concern :toggleable do
  #     post 'toggle'
  #   end
  #   resources :posts, concerns: :toggleable
  #   resources :photos, concerns: :toggleable

  # Example resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end
end
DemoApp::Application.routes.draw do
  resources :microposts

  resources :users

  # The priority is based upon order of creation:
  # first created -> highest priority.

  # Sample of regular route:
  #   match 'products/:id' => 'catalog#view'
  # Keep in mind you can assign values other than :controller and :action

  # Sample of named route:
  #   match 'products/:id/purchase' => 'catalog#purchase', :as => :purchase
  # This route can be invoked with purchase_url(:id => product.id)

  # Sample resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Sample resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Sample resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Sample resource route with more complex sub-resources
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', :on => :collection
  #     end
  #   end

  # Sample resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end

  # You can have the root of your site routed with "root"
  # just remember to delete public/index.html.
  # root :to => "welcome#index"

  # See how all your routes lay out with "rake routes"

  # This is a legacy wild controller route that's not recommended for RESTful applications.
  # Note: This route will make all actions in every controller accessible via GET requests.
  # match ':controller(/:action(/:id(.:format)))'
end
Rails.application.routes.draw do
  get 'sync/refetch', controller: 'sync/refetches', action: 'show'
endRails.application.routes.draw do
  resources :desserts
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
end
# frozen_string_literal: true

Rails.application.routes.draw do
  # Resources for testing
  resources :users, only: [:index] do
    member do
      get :expire
      get :accept
      get :edit_form
      put :update_form
    end

    authenticate do
      post :exhibit, on: :member
    end
  end

  resources :admins, only: [:index]

  resources :streaming, only: [:index]

  # Users scope
  devise_for :users, controllers: { omniauth_callbacks: "users/omniauth_callbacks" }

  devise_for :user_on_main_apps,
    class_name: 'UserOnMainApp',
    router_name: :main_app,
    module: :devise

  devise_for :user_on_engines,
    class_name: 'UserOnEngine',
    router_name: :fake_engine,
    module: :devise

  devise_for :user_without_email,
    class_name: 'UserWithoutEmail',
    router_name: :main_app,
    module: :devise

  as :user do
    get "/as/sign_in", to: "devise/sessions#new"
  end

  get "/sign_in", to: "devise/sessions#new"

  # Routes for custom controller testing
  devise_for :user, only: [:registrations], controllers: { registrations: "custom/registrations" }, as: :custom, path: :custom

  # Admin scope
  devise_for :admin, path: "admin_area", controllers: { sessions: :"admins/sessions" }, skip: :passwords

  get "/admin_area/home", to: "admins#index", as: :admin_root
  get "/anywhere", to: "foo#bar", as: :new_admin_password

  authenticate(:admin) do
    get "/private", to: "home#private", as: :private
  end

  authenticate(:admin, lambda { |admin| admin.active? }) do
    get "/private/active", to: "home#private", as: :private_active
  end

  authenticated :admin do
    get "/dashboard", to: "home#admin_dashboard"
  end

  authenticated :admin, lambda { |admin| admin.active? } do
    get "/dashboard/active", to: "home#admin_dashboard"
  end

  authenticated do
    get "/dashboard", to: "home#user_dashboard"
  end

  unauthenticated do
    get "/join", to: "home#join"
  end

  # Routes for constraints testing
  devise_for :headquarters_admin, class_name: "Admin", path: "headquarters", constraints: {host: /192\.168\.1\.\d\d\d/}

  constraints(host: /192\.168\.1\.\d\d\d/) do
    devise_for :homebase_admin, class_name: "Admin", path: "homebase"
  end

  scope(subdomain: 'sub') do
    devise_for :subdomain_users, class_name: "User", only: [:sessions]
  end

  devise_for :skip_admin, class_name: "Admin", skip: :all

  # Routes for format=false testing
  devise_for :htmlonly_admin, class_name: "Admin", skip: [:confirmations, :unlocks], path: "htmlonly_admin", format: false, skip_helpers: [:confirmations, :unlocks]
  devise_for :htmlonly_users, class_name: "User", only: [:confirmations, :unlocks], path: "htmlonly_users", format: false, skip_helpers: true

  # Other routes for routing_test.rb
  devise_for :reader, class_name: "User", only: :passwords

  scope host: "sub.example.com" do
    devise_for :sub_admin, class_name: "Admin"
  end

  namespace :publisher, path_names: { sign_in: "i_dont_care", sign_out: "get_out" } do
    devise_for :accounts, class_name: "Admin", path_names: { sign_in: "get_in" }
  end

  scope ":locale", module: :invalid do
    devise_for :accounts, singular: "manager", class_name: "Admin",
      path_names: {
        sign_in: "login", sign_out: "logout",
        password: "secret", confirmation: "verification",
        unlock: "unblock", sign_up: "register",
        registration: "management",
        cancel: "giveup", edit: "edit/profile"
      }, failure_app: lambda { |env| [404, {"Content-Type" => "text/plain"}, ["Oops, not found"]] }, module: :devise
  end

  namespace :sign_out_via, module: "devise" do
    devise_for :deletes, sign_out_via: :delete, class_name: "Admin"
    devise_for :posts, sign_out_via: :post, class_name: "Admin"
    devise_for :gets, sign_out_via: :get, class_name: "Admin"
    devise_for :delete_or_posts, sign_out_via: [:delete, :post], class_name: "Admin"
  end

  get "/set", to: "home#set"
  get "/unauthenticated", to: "home#unauthenticated"
  get "/custom_strategy/new"

  root to: "home#index", via: [:get, :post]
end
Rails.application.routes.draw do
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
end
Rails.application.routes.draw do
  # The priority is based upon order of creation: first created -> highest priority.
  # See how all your routes lay out with "rake routes".
  

  resources :appointments, only: [:new, :create, :show]
  
  resources :pets, only: [:new, :create]

  
  get "doctors/index"
  
  # You can have the root of your site routed with "root"
  # root 'welcome#index'

  # Example of regular route:
  #   get 'products/:id' => 'catalog#view'

  # Example of named route that can be invoked with purchase_url(id: product.id)
  #   get 'products/:id/purchase' => 'catalog#purchase', as: :purchase

  # Example resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Example resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Example resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Example resource route with more complex sub-resources:
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', on: :collection
  #     end
  #   end

  # Example resource route with concerns:
  #   concern :toggleable do
  #     post 'toggle'
  #   end
  #   resources :posts, concerns: :toggleable
  #   resources :photos, concerns: :toggleable

  # Example resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end
end
Solargraph::Rails::Engine.routes.draw do
  post '/suggest' => 'api#suggest'
end
require "sidekiq/web"
Sidekiq::Web.app_url = ENV["FEEDBIN_URL"]

Rails.application.routes.draw do
  # The priority is based upon order of creation: first created -> highest priority.
  # See how all your routes lay out with "rake routes".

  root to: "site#index"

  mount StripeEvent::Engine, at: "/stripe"
  constraints lambda { |request| AuthConstraint.admin?(request) } do
    mount Sidekiq::Web => "sidekiq"
  end
  get :health_check, to: proc { |env| [200, {}, ["OK"]] }
  get :version, to: proc { |env| [200, {}, [File.read("REVISION")]] }
  get :subscribe, to: "site#subscribe"
  get :service_worker, to: "site#service_worker"
  get "manifest/:theme", to: "site#manifest", as: "manifest"

  post "/newsletters" => "newsletters#create"
  get "bookmarklet/:cache_buster", to: "bookmarklet#script", as: "bookmarklet"

  match "/404", to: "errors#not_found", via: :all
  get "/starred/:starred_token", to: "starred_entries#index", as: "starred"
  post "/starred/export", to: "starred_entries#export"

  get :signup, to: "users#new", as: "signup"
  get :login, to: "sessions#new", as: "login"
  delete :logout, to: "sessions#destroy", as: "logout"

  get ".well-known/apple-app-site-association", to: "well_known#apple_site_association"
  get ".well-known/apple-developer-merchantid-domain-association", to: "well_known#apple_pay"
  get ".well-known/change-password", to: "well_known#change_password"

  # Apple Push

  # When a user allows permission to receive push notifications
  post "apple_push_notifications/:version/pushPackages/:website_push_id", as: :apple_push_notifications_package, to: "apple_push_notifications#create", website_push_id: /.*/

  # POST When users first grant permission, or later change their permission
  # levels for your website
  post "apple_push_notifications/:version/devices/:device_token/registrations/:website_push_id", as: :apple_push_notifications_update, to: "apple_push_notifications#update", website_push_id: /.*/

  # DELETE If a user removes permission of a website in Safari preferences, a
  # DELETE request is sent
  delete "apple_push_notifications/:version/devices/:device_token/registrations/:website_push_id", as: :apple_push_notifications_delete, to: "apple_push_notifications#delete", website_push_id: /.*/

  # Error log
  post "apple_push_notifications/:version/log", as: :apple_push_notifications_log, to: "apple_push_notifications#log"

  # WebSub
  get  "web_sub/:id/:signature", as: :web_sub_verify,  to: "web_sub#verify"
  post "web_sub/:id/:signature", as: :web_sub_publish, to: "web_sub#publish"

  resource :app, only: [] do
    member do
      get :login
      get :redirect
    end
  end

  resources :tags, only: [:index, :show, :update, :destroy, :edit]
  resources :billing_events, only: [:show]
  resources :in_app_purchases, only: [:show]
  resources :password_resets
  resources :sharing_services, path: "settings/sharing", only: [:index, :create, :update, :destroy]
  resources :actions, path: "settings/actions", only: [:index, :create, :new, :update, :destroy, :edit]
  resources :saved_searches, only: [:show, :update, :destroy, :create, :edit, :new] do
    collection do
      get :count
    end
  end

  resources :public_settings, only: [] do
    member do
      get :email_unsubscribe
    end
    collection do
      get :account_closed
    end
  end

  resources :sessions do
    collection do
      get :refresh
    end
  end

  resources :supported_sharing_services, only: [:create, :destroy, :update] do
    member do
      get :oauth_response
      get :autocomplete
      match "share/:entry_id", to: "supported_sharing_services#share", as: :share, via: [:get, :post]
    end
  end

  resources :subscriptions, only: [:index, :edit, :create, :destroy, :update]

  resources :embeds, only: [] do
    collection do
      get :twitter
      get :instagram
      get :iframe
    end
  end

  resources :users, id: /.*/ do
    member do
      patch :settings_update, controller: :settings
      patch :view_settings_update, controller: :settings
      patch :format, controller: :settings
    end
  end

  resources :feeds, only: [:index, :edit, :create, :update] do
    patch :rename
    resources :entries, only: [:index], controller: :feeds_entries
    collection do
      get :view_unread
      get :view_all
      get :view_starred
      get :auto_update
      post :search
    end
    member do
      match :push, via: [:post, :get]
      get :modal_edit
      get :edit_tags
      get :pages, to: "pages_entries#index"
    end
  end

  resources :entries, only: [:show, :index, :destroy] do
    member do
      post :content
      post :unread_entries, to: "unread_entries#update"
      post :starred_entries, to: "starred_entries#update"
      post :mark_as_read, to: "entries#mark_as_read"
      post :recently_read, to: "recently_read_entries#create"
      post :recently_played, to: "recently_played_entries#create"
      get :push_view
      get :newsletter
    end
    collection do
      get :starred
      get :unread
      get :preload
      get :search
      get :recently_read, to: "recently_read_entries#index"
      get :recently_played, to: "recently_played_entries#index"
      get :updated, to: "updated_entries#index"
      post :mark_all_as_read
      post :mark_direction_as_read
    end
  end

  get :settings, to: "settings#settings"
  namespace :settings do
    resources :subscriptions, only: [:index, :edit, :destroy, :update] do
      collection do
        patch :update_multiple
      end
      member do
        post :refresh_favicon
        patch :newsletter_senders
      end
    end
    get :account
    get :billing
    get :payment_details
    get :import_export
    get :appearance
    get :newsletters_pages
    post :update_credit_card
    post :update_plan
    post :now_playing
    post :audio_panel_size
  end

  get "settings/billing/edit", as: :settings_edit_billing, to: "settings#edit_billing"
  post "settings/sticky/:feed_id", as: :settings_sticky, to: "settings#sticky"
  post "settings/subscription_view_mode/:feed_id", as: :settings_subscription_view_mode, to: "settings#subscription_view_mode"

  resources :twitter_authentications, only: [:new] do
    collection do
      get :save
      delete :delete
    end
  end

  resources :tweets, only: [] do
    member do
      get :thread
    end
  end

  resources :microposts, only: [] do
    member do
      get :thread
    end
  end

  resources :recently_read_entries, only: [] do
    collection do
      delete :destroy_all
    end
  end

  resources :recently_played_entries, only: [] do
    collection do
      delete :destroy_all
    end
  end

  resources :extracts, only: [] do
    member do
      get :entry
    end
    collection do
      get :modal
      get :cache
    end
  end

  match "pages",          to: "pages#create",          via: :post
  match "pages",          to: "pages#options",         via: :options
  match "pages",          to: "pages#fallback",        via: :get
  match "pages_internal", to: "pages_internal#create", via: :post

  constraints subdomain: "api" do
    namespace :api, path: nil do
      namespace :v1 do
        match "*path", to: "api#gone", via: :all
      end
    end
  end

  constraints subdomain: "api" do
    namespace :api, path: nil do
      namespace :v2 do
        resources :feeds, only: [:show] do
          resources :entries, only: [:index, :show], controller: :feeds_entries
        end

        resources :entry_counts, only: [] do
          collection do
            get :post_frequency
          end
        end

        resources :actions, only: [:index, :create, :update] do
          member do
            get :results
          end
          collection do
            get :results_watch
          end
        end

        resources :devices, only: [:create] do
          collection do
            get :ios_test
            get :safari_test
          end
        end

        resources :users, only: [:create] do
          collection do
            get :info
          end
        end

        resources :tags, only: [:index] do
          collection do
            post :update
            delete :destroy
          end
        end

        resources :imports, only: [:index, :create, :show]
        resources :subscriptions, only: [:index, :show, :create, :destroy, :update]

        resources :favicons, only: [:index]
        resources :icons, only: [:index]
        resources :taggings, only: [:index, :show, :create, :destroy]
        resources :recently_read_entries, only: [:index, :create]
        resources :in_app_purchases, only: [:create]
        resources :suggested_categories, only: [:index]

        resources :entries, only: [:index, :show] do
          member do
            get :text
            get :watch
          end
        end
        resources :suggested_feeds, only: [:index] do
          member do
            post :subscribe
            delete :unsubscribe
          end
        end

        resources :pages, only: [:create]

        get :authentication, to: "authentication#index"

        post "subscriptions/:id/update", to: "subscriptions#update"

        resources :unread_entries, only: [:index, :show, :create]
        delete "unread_entries", to: "unread_entries#destroy"
        put "unread_entries", to: "unread_entries#create"
        post "unread_entries/delete", to: "unread_entries#destroy"

        resources :starred_entries, only: [:index, :show, :create]
        delete "starred_entries", to: "starred_entries#destroy"
        put "starred_entries", to: "starred_entries#create"
        post "starred_entries/delete", to: "starred_entries#destroy"

        resources :updated_entries, only: [:index]
        delete "updated_entries", to: "updated_entries#destroy"
        post "updated_entries/delete", to: "updated_entries#destroy"

        resources :saved_searches, only: [:index, :show, :create, :destroy, :update]
        post "saved_searches/:id/update", to: "saved_searches#update"
      end
    end
  end

  namespace :admin do
    resources :users
  end
end
# frozen_string_literal: true

Rails.application.routes.draw do
  get '/', to: 'home#home'
end
# frozen_string_literal: true

Spree::Core::Engine.routes.draw do
  namespace :admin do
    get '/search/users', to: "search#users", as: :search_users
    get '/search/products', to: "search#products", as: :search_products

    put '/locale/set', to: 'locale#set', defaults: { format: :json }, as: :set_locale

    resources :dashboards, only: [] do
      collection do
        get :home
      end
    end

    resources :promotions do
      resources :promotion_rules
      resources :promotion_actions
      resources :promotion_codes, only: [:index, :new, :create]
      resources :promotion_code_batches, only: [:index, :new, :create] do
        get '/download', to: "promotion_code_batches#download", defaults: { format: "csv" }
      end
    end

    resources :promotion_categories, except: [:show]

    resources :zones

    resources :tax_categories

    resources :products do
      resources :product_properties do
        collection do
          post :update_positions
        end
      end
      resources :variant_property_rule_values, only: [:destroy] do
        collection do
          post :update_positions
        end
      end
      resources :images do
        collection do
          post :update_positions
        end
      end
      member do
        post :clone
      end
      resources :variants, only: [:index, :edit, :update, :new, :create, :destroy] do
        collection do
          post :update_positions
        end
      end
      resources :variants_including_master, only: [:update]
      resources :prices, only: [:destroy, :index, :edit, :update, :new, :create]
    end
    get '/products/:product_slug/stock', to: "stock_items#index", as: :product_stock

    resources :option_types do
      collection do
        post :update_positions
        post :update_values_positions
      end
    end

    delete '/option_values/:id', to: "option_values#destroy", as: :option_value

    resources :properties

    delete '/product_properties/:id', to: "product_properties#destroy", as: :product_property

    resources :orders, except: [:show] do
      member do
        get :cart
        put :advance
        get :confirm
        put :complete
        post :resend
        get "/adjustments/unfinalize", to: "orders#unfinalize_adjustments"
        get "/adjustments/finalize", to: "orders#finalize_adjustments"
        put :approve
        put :cancel
        put :resume
      end

      resource :customer, controller: "orders/customer_details"
      resources :customer_returns, only: [:index, :new, :edit, :create, :update] do
        member do
          put :refund
        end
      end

      resources :adjustments
      resources :return_authorizations do
        member do
          put :fire
        end
      end
      resources :payments, only: [:index, :new, :show, :create] do
        member do
          put :fire
        end

        resources :refunds, only: [:new, :create, :edit, :update]
      end

      resources :reimbursements, only: [:index, :create, :show, :edit, :update] do
        member do
          post :perform
        end
      end

      resources :cancellations, only: [:index] do
        collection do
          post :short_ship
        end
      end
    end

    resource :general_settings, only: :edit
    resources :stores, only: [:index, :new, :create, :edit, :update]

    resources :return_items, only: [:update]

    resources :taxonomies do
      collection do
        post :update_positions
      end
      resources :taxons do
        resource :attachment, controller: 'taxons/attachment', only: [:destroy]
      end
    end

    resources :taxons, only: [:index, :show] do
      collection do
        get :search
      end
    end

    resources :reimbursement_types, only: [:index]
    resources :adjustment_reasons, except: [:show, :destroy]
    resources :refund_reasons, except: [:show, :destroy]
    resources :return_reasons, except: [:show, :destroy]
    resources :store_credit_reasons, except: [:show]

    resources :shipping_methods
    resources :shipping_categories

    resources :stock_locations do
      resources :stock_movements, only: [:index]
      collection do
        post :transfer_stock
        post :update_positions
      end
    end

    resources :stock_items, except: [:show, :new, :edit]
    resources :tax_rates

    resources :payment_methods do
      collection do
        post :update_positions
      end
    end

    resources :users do
      member do
        get :orders
        get :items
        get :addresses
        put :addresses
      end
      resources :store_credits, except: [:destroy] do
        member do
          get :edit_amount
          put :update_amount
          get :edit_validity
          put :invalidate
        end
      end
    end

    resources :style_guide, only: [:index]
  end

  get '/admin', to: 'admin/root#index', as: :admin
end
# Copyright 2018 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
# Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

Rails.application.routes.draw do
  resources :passengers
  resources :drivers
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
end
Rottenpotatoes::Application.routes.draw do
  # The priority is based upon order of creation:
  # first created -> highest priority.

  # Sample of regular route:
  #   match 'products/:id' => 'catalog#view'
  # Keep in mind you can assign values other than :controller and :action

  # Sample of named route:
  #   match 'products/:id/purchase' => 'catalog#purchase', :as => :purchase
  # This route can be invoked with purchase_url(:id => product.id)

  # Sample resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products
  resources :movies
  #match "movies/:id/similar" => "movies#similar"
  
  resources :movies do
    member do
      get 'similar'
    end
  end

  #resources :movies, :as => 'movies', :member => { :similar => :get }, :path_names => { :similar => 'similar' }

  # Sample resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Sample resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Sample resource route with more complex sub-resources
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', :on => :collection
  #     end
  #   end

  # Sample resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end

  # You can have the root of your site routed with "root"
  # just remember to delete public/index.html.
  # root :to => 'welcome#index'

  # See how all your routes lay out with "rake routes"

  # This is a legacy wild controller route that's not recommended for RESTful applications.
  # Note: This route will make all actions in every controller accessible via GET requests.
  # match ':controller(/:action(/:id(.:format)))'
end
Rails.application.routes.draw do
    resources :articles

    root 'welcome#index'
endRails.application.routes.draw do
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html

  # Serve websocket cable requests in-process
  # mount ActionCable.server => '/cable'
end
# frozen_string_literal: true

Rails.application.routes.draw do
  scope ActiveStorage.routes_prefix do
    get "/blobs/redirect/:signed_id/*filename" => "active_storage/blobs/redirect#show", as: :rails_service_blob
    get "/blobs/proxy/:signed_id/*filename" => "active_storage/blobs/proxy#show", as: :rails_service_blob_proxy
    get "/blobs/:signed_id/*filename" => "active_storage/blobs/redirect#show"

    get "/representations/redirect/:signed_blob_id/:variation_key/*filename" => "active_storage/representations/redirect#show", as: :rails_blob_representation
    get "/representations/proxy/:signed_blob_id/:variation_key/*filename" => "active_storage/representations/proxy#show", as: :rails_blob_representation_proxy
    get "/representations/:signed_blob_id/:variation_key/*filename" => "active_storage/representations/redirect#show"

    get  "/disk/:encoded_key/*filename" => "active_storage/disk#show", as: :rails_disk_service
    put  "/disk/:encoded_token" => "active_storage/disk#update", as: :update_rails_disk_service
    post "/direct_uploads" => "active_storage/direct_uploads#create", as: :rails_direct_uploads
  end

  direct :rails_representation do |representation, options|
    route_for(ActiveStorage.resolve_model_to_route, representation, options)
  end

  resolve("ActiveStorage::Variant") { |variant, options| route_for(ActiveStorage.resolve_model_to_route, variant, options) }
  resolve("ActiveStorage::VariantWithRecord") { |variant, options| route_for(ActiveStorage.resolve_model_to_route, variant, options) }
  resolve("ActiveStorage::Preview") { |preview, options| route_for(ActiveStorage.resolve_model_to_route, preview, options) }

  direct :rails_blob do |blob, options|
    route_for(ActiveStorage.resolve_model_to_route, blob, options)
  end

  resolve("ActiveStorage::Blob")       { |blob, options| route_for(ActiveStorage.resolve_model_to_route, blob, options) }
  resolve("ActiveStorage::Attachment") { |attachment, options| route_for(ActiveStorage.resolve_model_to_route, attachment.blob, options) }

  direct :rails_storage_proxy do |model, options|
    if model.respond_to?(:signed_id)
      route_for(
        :rails_service_blob_proxy,
        model.signed_id,
        model.filename,
        options
      )
    else
      signed_blob_id = model.blob.signed_id
      variation_key  = model.variation.key
      filename       = model.blob.filename

      route_for(
        :rails_blob_representation_proxy,
        signed_blob_id,
        variation_key,
        filename,
        options
      )
    end
  end

  direct :rails_storage_redirect do |model, options|
    if model.respond_to?(:signed_id)
      route_for(
        :rails_service_blob,
        model.signed_id,
        model.filename,
        options
      )
    else
      signed_blob_id = model.blob.signed_id
      variation_key  = model.variation.key
      filename       = model.blob.filename

      route_for(
        :rails_blob_representation,
        signed_blob_id,
        variation_key,
        filename,
        options
      )
    end
  end
end if ActiveStorage.draw_routes
# frozen_string_literal: true
Rails.application.routes.draw do
  mount ShopifyApp::Engine, at: '/'
  root to: "application#show"
end
Rails.application.routes.draw do
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
end
=begin
OpenAPI Petstore

This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.

The version of the OpenAPI document: 1.0.0
Generated by: https://github.com/openapitools/openapi-generator.git

=end
Rails.application.routes.draw do

  def add_openapi_route http_method, path, opts = {}
    full_path = path.gsub(/{(.*?)}/, ':\1')
    match full_path, to: "#{opts.fetch(:controller_name)}##{opts[:action_name]}", via: http_method
  end

  add_openapi_route 'POST', '/v2/pet', controller_name: 'pet', action_name: 'create'
  add_openapi_route 'DELETE', '/v2/pet/{petId}', controller_name: 'pet', action_name: 'destroy'
  add_openapi_route 'GET', '/v2/pet/findByStatus', controller_name: 'pet', action_name: 'find_pets_by_status'
  add_openapi_route 'GET', '/v2/pet/findByTags', controller_name: 'pet', action_name: 'find_pets_by_tags'
  add_openapi_route 'GET', '/v2/pet/{petId}', controller_name: 'pet', action_name: 'show'
  add_openapi_route 'PUT', '/v2/pet', controller_name: 'pet', action_name: 'update_pet'
  add_openapi_route 'POST', '/v2/pet/{petId}', controller_name: 'pet', action_name: 'update_pet_with_form'
  add_openapi_route 'POST', '/v2/pet/{petId}/uploadImage', controller_name: 'pet', action_name: 'upload_file'
  add_openapi_route 'DELETE', '/v2/store/order/{orderId}', controller_name: 'store', action_name: 'delete_order'
  add_openapi_route 'GET', '/v2/store/inventory', controller_name: 'store', action_name: 'get_inventory'
  add_openapi_route 'GET', '/v2/store/order/{orderId}', controller_name: 'store', action_name: 'get_order_by_id'
  add_openapi_route 'POST', '/v2/store/order', controller_name: 'store', action_name: 'place_order'
  add_openapi_route 'POST', '/v2/user', controller_name: 'user', action_name: 'create'
  add_openapi_route 'POST', '/v2/user/createWithArray', controller_name: 'user', action_name: 'create_users_with_array_input'
  add_openapi_route 'POST', '/v2/user/createWithList', controller_name: 'user', action_name: 'create_users_with_list_input'
  add_openapi_route 'DELETE', '/v2/user/{username}', controller_name: 'user', action_name: 'destroy'
  add_openapi_route 'GET', '/v2/user/{username}', controller_name: 'user', action_name: 'show'
  add_openapi_route 'GET', '/v2/user/login', controller_name: 'user', action_name: 'login_user'
  add_openapi_route 'GET', '/v2/user/logout', controller_name: 'user', action_name: 'logout_user'
  add_openapi_route 'PUT', '/v2/user/{username}', controller_name: 'user', action_name: 'update'
end
Rails.application.routes.draw do
  scope (Rails.configuration.action_controller.relative_url_root || "") do
    root to: 'dummy#index'
  end
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
end
# frozen_string_literal: true

GraphqlDevise::Engine.routes.draw do
  # Required as Devise forces routes to reload on eager_load
  unless GraphqlDevise.schema_loaded?
    if GraphqlDevise::Types::QueryType.fields.blank?
      GraphqlDevise::Types::QueryType.field(:dummy, resolver: GraphqlDevise::Resolvers::Dummy)
    end

    if GraphqlDevise::Types::MutationType.fields.present?
      GraphqlDevise::Schema.mutation(GraphqlDevise::Types::MutationType)
    end

    GraphqlDevise::Schema.query(GraphqlDevise::Types::QueryType)

    GraphqlDevise.load_schema

    Devise.mailer.helper(GraphqlDevise::MailerHelper)
  end
end
Rails.application.routes.draw do
  # localhost:3000/api/v1/login
  namespace :api do
    namespace :v1 do
      resources :users, only: [:create]
      post '/login', to: 'auth#create'
      get '/profile', to: 'users#profile'
    end
  end
end
# coding: utf-8
Rails.application.routes.draw do

  namespace :mercury do
    resources :images
  end

  mount Mercury::Engine => '/'

  # The priority is based upon order of creation:
  # first created -> highest priority.

  get "/robots.txt" => RobotsGenerator

  get "/test_design/:page" => "email_design#show"

  # URLs for sitemaps
  #
  # From Rails guide: By default dynamic segments don’t accept dots –
  # this is because the dot is used as a separator for formatted
  # routes. If you need to use a dot within a dynamic segment add a
  # constraint which overrides this – for example :id => /[^\/]+/
  # allows anything except a slash.
  #
  # That's why there's the constraints in generate URL to accept host
  # parameter with dots
  #
  get "/sitemap.xml.gz"                        => "sitemap#sitemap", format: :xml
  get "/sitemap/:sitemap_host/generate.xml.gz" => "sitemap#generate", format: :xml, :constraints => { sitemap_host: /[.\-\w]+/ }

  # A route for DV test file
  # A CA will check if there is a file in this route
  get "/:dv_file" => "domain_validation#index", constraints: {dv_file: /.*\.txt/}

  get "/design" => "design#design"

  # config/routes.rb
  if Rails.env.development?
    mount MailPreview => 'mail_view'
  end

  # Some non-RESTful mappings
  post '/webhooks/paypal_ipn' => 'paypal_ipn#ipn_hook', as: :paypal_ipn_hook
  post '/webhooks/plans' => 'plans#create'
  get '/webhooks/trials' => 'plans#get_trials'

  post '/bounces' => 'amazon_bounces#notification'

  get "/people/:person_id/inbox/:id", :to => redirect("/fi/people/%{person_id}/messages/%{id}")
  get "/listings/new/:type" => "listings#new", :as => :new_request_without_locale # needed for some emails, where locale part is already set
  get "/change_locale" => "i18n#change_locale", :as => :change_locale

  # Internal API
  namespace :int_api do
    post "/create_trial_marketplace" => "marketplaces#create"
    resources :listings, only: [], defaults: { format: :json } do
      member do
        post :update_working_time_slots
        post :update_blocked_dates
      end
      resources :blocked_dates, only: [:index], controller: 'listing/blocked_dates'
      resources :bookings, only: [:index], controller: 'listing/bookings'
    end
  end

  # UI API, i.e. internal endpoints for dynamic UI that doesn't belong to under any specific controller
  get "/ui_api/topbar_props" => "topbar_api#props"

  # Keep before /:locale/ routes, because there is locale 'vi', which matches '_lp_preview'
  # and regexp anchors are not allowed in routing requirements.
  get '/_lp_preview' => 'landing_page#preview', as: :landing_page_preview

  locale_regex_string = Sharetribe::AVAILABLE_LOCALES.map { |l| l[:ident] }.concat(Sharetribe::REMOVED_LOCALES.to_a).join("|")
  locale_matcher = Regexp.new(locale_regex_string)
  locale_matcher_anchored = Regexp.new("^(#{locale_regex_string})$")

  # Conditional routes for custom landing pages
  get '/:locale/' => 'landing_page#index', as: :landing_page_with_locale, constraints: ->(request) {
    locale_matcher_anchored.match(request.params["locale"]) &&
      CustomLandingPage::LandingPageStore.enabled?(request.env[:current_marketplace]&.id)
  }
  get '/' => 'landing_page#index', as: :landing_page_without_locale, constraints: ->(request) {
    CustomLandingPage::LandingPageStore.enabled?(request.env[:current_marketplace]&.id)
  }

  # Conditional routes for search view if landing page is enabled
  get '/:locale/s' => 'homepage#index', as: :search_with_locale, constraints: ->(request) {
    locale_matcher_anchored.match(request.params["locale"]) &&
      CustomLandingPage::LandingPageStore.enabled?(request.env[:current_marketplace]&.id)
  }
  get '/s' => 'homepage#index', as: :search_without_locale, constraints: ->(request) {
    CustomLandingPage::LandingPageStore.enabled?(request.env[:current_marketplace]&.id)
  }

  # Default routes for homepage, these are matched if custom landing page is not in use
  # Inside this constraits are the routes that are used when request has subdomain other than www
  get '/:locale/' => 'homepage#index', :constraints => { :locale => locale_matcher }, as: :homepage_with_locale
  get '/' => 'homepage#index', as: :homepage_without_locale
  get '/:locale/s', to: redirect('/%{locale}', status: 307), constraints: { locale: locale_matcher }
  get '/s', to: redirect('/', status: 307)

  # error handling: 3$: http://blog.plataformatec.com.br/2012/01/my-five-favorite-hidden-features-in-rails-3-2/
  get '/500' => 'errors#server_error'
  get '/404' => 'errors#not_found', :as => :error_not_found
  get '/406' => 'errors#not_acceptable', :as => :error_not_acceptable
  get '/410' => 'errors#gone', as: :error_gone
  get '/community_not_found' => 'errors#community_not_found', as: :community_not_found
  get '/not_available' => 'application#not_available', as: :community_not_available

  resources :communities, only: [:new, :create]


  devise_for :people, only: :omniauth_callbacks, controllers: { omniauth_callbacks: "omniauth" }

  # Adds locale to every url right after the root path
  scope "(/:locale)", :constraints => { :locale => locale_matcher } do

    put '/mercury_update' => "mercury_update#update", :as => :mercury_update

    get "/transactions/op_status/:process_token" => "paypal_service/checkout_orders#paypal_op_status", as: :paypal_op_status
    get "/transactions/transaction_op_status/:process_token" => "transactions#transaction_op_status", :as => :transaction_op_status
    get "/transactions/created/:transaction_id" => "transactions#created", as: :transaction_created
    get "/transactions/finalize_processed/:process_token" => "transactions#finalize_processed", as: :transaction_finalize_processed

    # All new transactions (in the future)
    get "/transactions/new" => "transactions#new", as: :new_transaction

    # preauthorize flow

    # Deprecated route (26-08-2016)
    get "/listings/:listing_id/book", :to => redirect { |params, request|
      "/#{params[:locale]}/listings/#{params[:listing_id]}/initiate?#{request.query_string}"
    }
    # Deprecated route (26-08-2016)
    post "/listings/:listing_id/booked"    => "preauthorize_transactions#initiated", as: :booked # POST request, no redirect

    get "/listings/:listing_id/initiate"   => "preauthorize_transactions#initiate", :as => :initiate_order
    post "/listings/:listing_id/initiated" => "preauthorize_transactions#initiated", :as => :initiated_order

    # free flow
    post "/listings/:listing_id/create_contact" => "free_transactions#create_contact", :as => :create_contact
    get "/listings/:listing_id/contact" => "free_transactions#contact", :as => :contact_to_listing

    get "/logout" => "sessions#destroy", :as => :logout
    get "/confirmation_pending" => "community_memberships#confirmation_pending", :as => :confirmation_pending
    get "/login" => "sessions#new", :as => :login
    get "/listing_bubble/:id" => "listings#listing_bubble", :as => :listing_bubble
    get "/listing_bubble_multiple/:ids" => "listings#listing_bubble_multiple", :as => :listing_bubble_multiple
    get '/:person_id/settings/payments' => 'payment_settings#index', :as => :person_payment_settings
    post '/:person_id/settings/payments' => 'payment_settings#create', :as => :create_person_payment_settings
    put '/:person_id/settings/payments' => 'payment_settings#update', :as => :update_person_payment_settings
    get '/:person_id/settings/payments/paypal_account' => 'paypal_accounts#index', :as => :paypal_account_settings_payment

    # community membership related actions

    get  '/community_memberships/pending_consent' => 'community_memberships#pending_consent', as: :pending_consent
    post '/community_memberships/give_consent'    => 'community_memberships#give_consent', as: :give_consent
    get  '/community_memberships/access_denied'   => 'community_memberships#access_denied', as: :access_denied

    get  '/community_memberships/check_email_availability_and_validity' => 'community_memberships#check_email_availability_and_validity'
    get  '/community_memberships/check_invitation_code'                 => 'community_memberships#check_invitation_code'


    namespace :paypal_service do
      resources :checkout_orders do
        collection do
          get :success
          get :cancel
          get :success_processed
        end
      end
    end

    scope module: "admin2", path: "/admin", as: "admin2" do
      get '' => "dashboard#index"
      resource :plan, only: [:show]
      namespace :general do
        resources :essentials, only: %i[index] do
          collection do
            patch :update_essential
          end
        end
        resources :admin_notifications, path: 'admin-notifications', only: %i[index] do
          collection do
            patch :update_admin_notifications
          end
        end
        resources :static_content, path: 'static-content', only: %i[index]
        resources :privacy, only: %i[index] do
          collection do
            patch :update_privacy
          end
        end
        resources :domains, path: 'domain' do
          collection do
            match :test_dns, via: %i[post get]
            patch :create_domain_setup
            patch :recheck_domain_setup
            get :reset_domain_setup
            patch :confirm_domain_setup
            get :retry_domain_setup
            get :check_availability
          end
        end
      end
      namespace :design do
        resources :landing_page_versions, path: 'landing-page' do
          resources :sections, controller: 'landing_page_versions/sections'
          member do
            get :release
          end
          collection do
            get :valid_listing
          end
        end

        resources :topbar, path: 'top-bar', only: %i[index] do
          collection do
            patch :update_topbar
          end
        end

        resources :footer, only: %i[index] do
          collection do
            patch :update_footer
          end
        end

        resources :display, path: 'arrangement', only: %i[index] do
          collection do
            patch :update_display
          end
        end

        resources :logos_color, path: 'logos-and-color', only: %i[index] do
          collection do
            patch :update_logos_color
            delete :remove_files
          end
        end
        resources :cover_photos, path: 'cover-photos', only: %i[index] do
          collection do
            patch :update_cover_photos
          end
        end
      end

      namespace :users do
        resources :invitations, path: 'view-invitations', only: %i[index]
        resources :manage_users, path: 'manage-users', only: %i[index destroy] do
          member do
            get :resend_confirmation
            post :ban
            post :unban
            post :promote_admin
            patch :posting_allowed
          end
        end
        resources :signup_login, path: 'signup-and-login', only: %i[index] do
          collection do
            patch :update_signup_login
          end
        end
        resources :user_rights, path: 'user-rights', only: %i[index] do
          collection do
            patch :update_user_rights
          end
        end
        resources :user_fields, path: 'user-fields' do
          collection do
            post :order
            post :add_unit
          end
          member do
            get :delete_popup
          end
        end
      end
      namespace :listings do
        resources :listing_fields do
          member do
            get :delete_popup
          end
          collection do
            post :order
            post :add_unit
            get :edit_price
            get :edit_expiration
            get :edit_location
            put :update_expiration
            put :update_price
            put :update_location
          end
        end
        resources :order_types, path: 'order-types' do
          collection do
            post :add_unit
            post :order
          end
        end
        resources :categories do
          member do
            get :remove_popup
            delete :destroy_and_move
          end
          collection do
            post :order
            post :change_category
          end
        end
        resources :manage_listings, path: 'manage-listings', only: %i[index] do
          collection do
            patch :update
            patch :close
            delete :delete
            get :export
            get :export_status
          end
          member do
            get :approve
            get :reject
          end
        end
        resources :listing_approval, path: 'listing-approval', only: %i[index] do
          collection do
            patch :update_listing_approval
          end
        end
        resources :listing_comments, path: 'listing-comments', only: %i[index] do
          collection do
            patch :update_listing_comments
          end
        end
      end

      namespace :transactions_reviews, path: 'transactions-and-reviews' do
        resources :manage_reviews, path: 'manage-reviews', only: %i[index destroy] do
          member do
            get :show_review
            get :edit_review
            get :delete_review
            patch :update_review
          end
        end
        resources :conversations, path: 'view-conversations', only: %i[index show]
        resources :manage_transactions, path: 'manage-transactions', only: %i[index show] do
          member do
            patch :confirm
            patch :cancel
            patch :refund
            patch :dismiss
          end
          collection do
            get :export
            get :export_status
          end
        end
        resources :config_transactions, path: 'configure-transactions', only: %i[index] do
          collection do
            patch :update_config
          end
        end
      end

      namespace :payment_system, path: 'payment-system' do
        resources :stripe, param: :payment_gateway do
          collection do
            patch :update_stripe_keys
            patch :common_update
          end
          member do
            patch :disable
            patch :enable
          end
        end
        resources :paypal, param: :payment_gateway do
          collection do
            get :account_create
            patch :common_update
            get :permissions_verified
          end
          member do
            patch :disable
            patch :enable
          end
        end
        resources :country_currencies, path: 'country-currency', only: %i[index] do
          collection do
            patch :update_country_currencies
            get :verify_currency
          end
        end

        resources :transaction_size, path: 'minimum-listing-price', only: %i[index] do
          collection do
            patch :save
          end
        end
      end

      namespace :emails do
        resources :email_users, path: 'compose-email', only: %i[index create]
        resources :outgoing_emails, path: 'custom-outgoing-address' do
          collection do
            get :check_email_status
            post :resend_verification_email
          end
        end
        resources :welcome_emails, path: 'welcome-email', only: %i[index] do
          collection do
            patch :update_email
          end
        end
        resources :newsletters, path: 'automatic-newsletter', only: %i[index] do
          collection do
            patch :update_newsletter
          end
        end
      end

      namespace :search_location, path: 'search-and-location' do
        resources :search, only: %i[index] do
          collection do
            patch :update_search
          end
        end
        resources :locations, path: 'location', only: %i[index] do
          collection do
            patch :update_location
          end
        end
      end

      namespace :social_media, path: 'social-media' do
        resources :image_tags, path: 'image-and-tags', only: %i[index] do
          collection do
            patch :update_image
          end
        end
        resources :twitter, only: %i[index] do
          collection do
            patch :update_twitter
          end
        end
      end

      namespace :seo do
        resources :sitemap, path: 'sitemap-and-robots', only: %i[index]
        resources :google_console, path: 'google-search-console', only: %i[index]
        resources :landing_pages, path: 'landing-page-meta-tags', only: %i[index] do
          collection do
            patch :update_landing_page
          end
        end
        resources :search_pages, path: 'search-page-meta-tags', only: %i[index] do
          collection do
            patch :update_search_pages
          end
        end
        resources :listing_pages, path: 'listing-pages-meta-tags', only: %i[index] do
          collection do
            patch :update_listing_page
          end
        end
        resources :category_pages, path: 'category-pages-meta-tags', only: %i[index] do
          collection do
            patch :update_category_page
          end
        end
        resources :profile_pages, path: 'profile-pages-meta-tags', only: %i[index] do
          collection do
            patch :update_profile_page
          end
        end
      end

      namespace :analytics do
        resources :google_manager, path: 'google-tag-manager', only: %i[index]
        resources :google, path: 'google-analytics', only: %i[index] do
          collection do
            patch :update_google
          end
        end
        resources :sharetribe, path: 'sharetribe-analytics', only: %i[index] do
          collection do
            patch :update_sharetribe
          end
        end
      end

      namespace :advanced do
        resources :recaptcha, only: %i[index] do
          collection do
            patch :update_recaptcha
          end
        end
        resources :experimental, path: 'new-features', only: %i[index] do
          collection do
            patch :update_experimental
          end
        end
        resources :delete_marketplaces, path: 'delete-marketplace', only: %i[index destroy]
        resources :custom_scripts, path: 'custom-script', only: %i[index] do
          collection do
            patch :update_script
          end
        end
      end

    end

    # get '/:locale/admin2', to: redirect('/%{locale}/admin2/dashboard')

    get '/admin2', to: redirect('/admin')
    get '/:locale/admin2(*all)', to: redirect('/%{locale}/admin%{all}')
    
    scope module: "admin", path: "/admin_old", as: "admin" do
      get '' => "getting_started_guide#index"

      # Payments
      resources :payment_preferences, only: [:index], param: :payment_gateway do
        collection do
          put :common_update
          put :update_stripe_keys
        end
        member do
          get :disable
          get :enable
        end
      end
      # PayPal Connect
      get  "/paypal_preferences" => redirect("/%{locale}/admin/payment_preferences")
      get  "/paypal_preferences/account_create"       => "paypal_preferences#account_create"
      get  "/paypal_preferences/permissions_verified" => "paypal_preferences#permissions_verified"

      # Settings
      resource :setting, path: 'settings', only: [:show, :update]

      # Guide
      get "getting_started_guide"                        => "getting_started_guide#index",                  as: :getting_started_guide
      get "getting_started_guide/slogan_and_description" => "getting_started_guide#slogan_and_description", as: :getting_started_guide_slogan_and_description
      get "getting_started_guide/cover_photo"            => "getting_started_guide#cover_photo",            as: :getting_started_guide_cover_photo
      get "getting_started_guide/filter"                 => "getting_started_guide#filter",                 as: :getting_started_guide_filter
      get "getting_started_guide/payment"                => "getting_started_guide#payment",                as: :getting_started_guide_payment
      get "getting_started_guide/listing"                => "getting_started_guide#listing",                as: :getting_started_guide_listing
      get "getting_started_guide/invitation"             => "getting_started_guide#invitation",             as: :getting_started_guide_invitation
      get "getting_started_guide/skip_payment"           => "getting_started_guide#skip_payment",           as: :getting_started_guide_skip_payment

      # Details and look 'n feel
      get   "/look_and_feel/edit" => "communities#edit_look_and_feel",          as: :look_and_feel_edit
      patch "/look_and_feel"      => "communities#update_look_and_feel",        as: :look_and_feel
      get   "/details/edit"       => "community_customizations#edit_details",   as: :details_edit
      patch "/details"            => "community_customizations#update_details", as: :details
      get   "/new_layout"         => "communities#new_layout",                  as: :new_layout
      patch "/new_layout"         => "communities#update_new_layout",           as: :update_new_layout

      # Topbar menu
      get   "/topbar/edit"        => "communities/topbar#edit",                 as: :topbar_edit
      patch "/topbar"             => "communities/topbar#update",               as: :topbar

      # Footer menu
      get   "/footer/edit"        => "communities/footer#edit",                 as: :footer_edit
      patch "/footer"             => "communities/footer#update",               as: :footer

      # Landing page menu
      get   "/landing_page"         => "communities#landing_page",                  as: :landing_page

      resources :communities do
        member do
          get :edit_welcome_email
          post :create_sender_address
          get :check_email_status
          post :resend_verification_email
          get :edit_text_instructions
          get :test_welcome_email
          get :social_media
          get :analytics
          put :social_media, to: 'communities#update_social_media'
          put :analytics, to: 'communities#update_analytics'
          delete :delete_marketplace

          # DEPRECATED (2016-08-26)
          # These routes are not in use anymore, don't use them
          # See new "Topbar menu" routes above, outside of communities resource
          get :topbar, to: redirect("/admin/topbar/edit")
          put :topbar, to: "communities#update_topbar" # PUT request, no redirect
          # also redirect old menu link requests to topbar
          get :menu_links, to: redirect("/admin/topbar/edit")
          put :menu_links, to: "communities#update_topbar" # PUT request, no redirect

          # DEPRECATED (2016-07-07)
          # These routes are not in use anymore, don't use them
          # See new "Guide" routes above, outside of communities resource
          get :getting_started, to: redirect('/admin/getting_started_guide')

          # DEPRECATED (2016-03-22)
          # These routes are not in use anymore, don't use them
          # See new routes above, outside of communities resource
          get :edit_details,       to: redirect("/admin/details/edit")
          put :update_details,     to: "community_customizations#update_details" # PUT request, no redirect
          get :edit_look_and_feel, to: redirect("/admin/look_and_feel/edit")
          put :edit_look_and_feel, to: "community_customizations#update_look_and_feel" # PUT request, no redirect

          # DEPRECATED (2016-03-22)
          # These routes are not in use anymore, don't use them
          # See the above :admin_settings routes, outside of :communities resource
          get :settings,       to: redirect("/admin/settings")
          put :update_settings # PUT request, no redirect
          get "getting_started_guide",                        to: redirect("/admin/getting_started_guide")
          get "getting_started_guide/slogan_and_description", to: redirect("/admin/getting_started_guide/slogan_and_description")
          get "getting_started_guide/cover_photo",            to: redirect("/admin/getting_started_guide/cover_photo")
          get "getting_started_guide/filter",                 to: redirect("/admin/getting_started_guide/filter")
          get "getting_started_guide/paypal",                 to: redirect("/admin/getting_started_guide/paypal")
          get "getting_started_guide/listing",                to: redirect("/admin/getting_started_guide/listing")
          get "getting_started_guide/invitation",             to: redirect("/admin/getting_started_guide/invitation")

        end
        resources :listings, controller: :community_listings, only: [:index, :edit, :update] do
          member do
            get :approve
            get :reject
          end
          collection do
            get 'export'
            get 'export_status'
          end
        end
        resources :transactions, controller: :community_transactions, only: [:index, :show] do
          collection do
            get 'export'
            get 'export_status'
          end
          member do
            get :confirm
            get :cancel
            get :refund
            get :dismiss
          end
        end
        resources :conversations, controller: :community_conversations, only: [:index, :show]
        resources :testimonials, controller: :community_testimonials, only: [:index, :edit, :update, :new, :create] do
          collection do
            get :new_unskip
            post :unskip
          end
        end
        resources :invitations, controller: :community_invitations, only: [:index]
        resources :emails
        resources :community_memberships do
          member do
            put :ban
            put :unban
            put :resend_confirmation
          end
          collection do
            post :promote_admin
            post :posting_allowed
          end
        end
        resource :paypal_preferences, only: :index do

          # DEPRECATED (2015-11-16)
          # Do not add new routes here.
          # See the above :paypal_preferences routes, outside of communities resource

          member do
            get :index,                to: redirect("/admin/paypal_preferences")
            post :preferences_update   # POST request, no redirect
            get :account_create,       to: redirect("/admin/paypal_preferences/account_create")
            get :permissions_verified, to: redirect("/admin/paypal_preferences/permissions_verified")
          end
        end
      end
      resources :custom_fields do
        collection do
          get :edit_price
          get :edit_location
          post :order
          put :update_price
          put :update_location
          get :edit_expiration
          put :update_expiration
        end
      end
      resources :person_custom_fields, path: 'user_fields' do
        collection do
          post :order
        end
      end
      resources :categories do
        member do
          get :remove
          delete :destroy_and_move
        end
        collection do
          post :order
        end
      end
      resources :listing_shapes do
        collection do
          post :order
        end
        member do
          get :close_listings
        end
      end
      resource :plan, only: [:show]
      resource :domain, only: [:show, :update] do
        collection do
          get :check_availability
        end
        member do
          patch :create_domain_setup
          patch :recheck_domain_setup
          patch :reset_domain_setup
          patch :confirm_domain_setup
          patch :retry_domain_setup
        end
      end
      resource :community_seo_settings, only: [:show, :update]
      resources :landing_page_versions do
        member do
          get :release
        end
        resources :sections, controller: 'landing_page_versions/sections'
      end
    end

    resources :invitations, only: [:new, :create ] do
      collection do
        get :unsubscribe
      end
    end
    resources :user_feedbacks, :controller => :feedbacks
    resources :homepage do
      collection do
        get :sign_in
        post :join
      end
    end

    resources :listings do
      member do
        post :follow
        delete :unfollow
        delete :delete
      end
      collection do
        get :new_form_content
        get :edit_form_content
        get :more_listings
        get :browse
        get :locations_json
        get :verification_required
      end
      resources :comments, :only => [:create, :destroy]
      resources :listing_images do
        collection do
          post :add_from_file
          put :add_from_url
          put :reorder
        end
      end
      resources :preauthorize_transactions, only: [], defaults: { format: :json } do
        member do
          post :stripe_confirm_intent
          post :stripe_failed_intent
        end
      end
    end

    resources :listing_images do
      member do
        get :image_status
      end
      collection do
        post :add_from_file
        put :add_from_url
      end
    end

    resources :infos do
      collection do
        get :about
        get :how_to_use
        get :terms
        get :privacy
        get :news
      end
    end
    resource :terms do
      member do
        post :accept
      end
    end
    resources :sessions do
      collection do
        post :request_new_password
        post :change_mistyped_email
      end
    end
    resources :consent
    resource :sms do
      get :message_arrived
    end

    devise_for :people, skip: :omniauth_callbacks, controllers: { confirmations: "confirmations", registrations: "people", omniauth_callbacks: "omniauth"}, :path_names => { :sign_in => 'login'}
    devise_scope :person do
      # these matches need to be before the general resources to have more priority
      get "/people/confirmation" => "confirmations#show", :as => :confirmation
      put "/people/confirmation" => "confirmations#create"
      get "/people/sign_up" => redirect("/%{locale}/login")

      # List few specific routes here for Devise to understand those
      get "/signup" => "people#new", :as => :sign_up

      resources :people, param: :username, :path => "", :only => :show, :constraints => { :username => /[_a-z0-9]{3,20}/ }

      resources :people, except: [:show] do
        collection do
          get :check_email_availability
          get :check_email_availability_and_validity
          get :check_invitation_code
        end
        member do
          get :check_username_availability
        end
      end

      resources :people, except: [:show], :path => "" do
        resources :listings do
          member do
            put :close
            put :move_to_top
            put :show_in_updates_email
          end
          collection do
            get :new_form_content
          end
        end
        resources :person_messages

        resource :inbox, :only => [:show]

        resources :messages, :controller => :conversations do
          collection do
            # This is only a redirect from old route, changed 2014-09-11
            # You can clean up this later
            get :received, to: 'inboxes#show'
          end
          member do
            get :confirm, to: 'confirm_conversations#confirm'
            get :cancel, to: 'confirm_conversations#cancel'
            put :confirmation, to: 'confirm_conversations#confirmation' #TODO these should be under transaction
            get :accept_preauthorized, to: 'accept_preauthorized_conversations#accept'
            get :reject_preauthorized, to: 'accept_preauthorized_conversations#reject'
            put :acceptance_preauthorized, to: 'accept_preauthorized_conversations#accepted_or_rejected'
          end
          resources :messages
          resources :feedbacks, :controller => :testimonials do
            collection do
              put :skip
            end
          end
        end
        resource :paypal_account, only: [:index] do
          member do
            get :ask_order_permission
            get :ask_billing_agreement
            get :permissions_verified
            get :billing_agreement_success
            get :billing_agreement_cancel
          end
        end
        resource :stripe_account, only: [:show, :update, :create] do
          member do
            put :send_verification
          end
        end

        resources :transactions, only: [:show, :new, :create]
        resource :settings do
          member do
            get :account
            get :notifications
            get :unsubscribe
            get :listings
            get :transactions
          end
        end
        resources :testimonials
        resources :emails do
          member do
            post :send_confirmation
          end
        end
        resources :followers
        resources :followed_people
      end # people

    end # devise scope person

    get "/:person_id/messages/:conversation_type/:id" => "conversations#show", :as => :single_conversation

    get '/:person_id/settings/profile', to: redirect("/%{person_id}/settings") #needed to keep old links working

  end # scope locale

  id_to_username = Proc.new do |params, req|
    username = Person.find(params[:person_id]).try(:username)
    locale = params[:locale] + "/" if params[:locale]
    if username
      "/#{locale}#{username}#{params[:path]}"
    else
      "/404"
    end
  end

  get "(/:locale)/people/:person_id(*path)" => redirect(id_to_username), :constraints => { :locale => locale_matcher, :person_id => /[a-zA-Z0-9_-]{22}/ }

  get "(/:locale)/:person_id(*path)" => redirect(id_to_username), :constraints => { :locale => locale_matcher, :person_id => /[a-zA-Z0-9_-]{22}/ }
end
# frozen_string_literal: true

Rails.application.routes.draw do
  devise_for :users, skip: :sessions

  if Rails.env.development?
    mount GraphiQL::Rails::Engine, at: "/graphiql", graphql_path: "/graphql"
  end
  post "/graphql", to: "graphql#execute"
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html

  root "application#index"

  # Catch all for HTML 5 history routing. This must be the last route.
  get "/*path", to: "application#index", format: false
end
Rails.application.routes.draw do
  # This line mounts Spree's routes at the root of your application.
  # This means, any requests to URLs such as /products, will go to
  # Spree::ProductsController.
  # If you would like to change where this engine is mounted, simply change the
  # :at option to something different.
  #
  # We ask that you don't use the :as option here, as Spree relies on it being
  # the default of "spree".
  mount Spree::Core::Engine, at: '/'
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
end
ActionController::Routing::Routes.draw do |map|
  map.resources :pdm_documents
  map.resources :pdm_documents, :path_prefix => '/projects/:project_id'
  map.resources :pdm_revisions
  map.resources :pdm_revisions, :path_prefix => '/projects/:project_id'
endrequire 'sidekiq/web'
Sidekiq::Web.app_url = '/'

Rails.application.routes.draw do
  mount Sidekiq::Web => '/sidekiq'
  get "work" => "work#index"
  get "work/email" => "work#email"
  get "work/post" => "work#delayed_post"
  get "work/long" => "work#long"
  get "work/crash" => "work#crash"
  get "work/bulk" => "work#bulk"
end
Rails.application.routes.draw do
  # rubocop:disable Layout/HashAlignment
  # rubocop:disable Layout/MultilineOperationIndentation
  # default routes for each controller
  default_routes = %w(
    report_data
  )

  # grouped routes
  adv_search_post = %w(
    adv_search_button
    adv_search_clear
    adv_search_load_choice
    adv_search_name_typed
    adv_search_toggle
    search_clear
  )

  button_post = %w(
    button_create
    button_update
  )

  compare_get = %w(
    compare_miq
    compare_to_csv
    compare_to_pdf
    compare_to_txt
  )

  compare_post = %w(
    compare_cancel
    compare_choose_base
    compare_compress
    compare_miq
    compare_miq_all
    compare_miq_differences
    compare_miq_same
    compare_mode
    compare_remove
    compare_set_state
  )

  dialog_runner_post = %w(
    dialog_field_changed
    dialog_form_button_pressed
    dynamic_checkbox_refresh
    dynamic_date_refresh
    dynamic_radio_button_refresh
    dynamic_text_box_refresh
    open_url_after_dialog
  )

  drift_get = %w(
    drift
    drift_history
    drift_to_csv
    drift_to_pdf
    drift_to_txt
  )

  drift_post = %w(
    drift_all
    drift_compress
    drift_differences
    drift_history
    drift_mode
    drift_same
  )

  exp_post = %w(
    exp_button
    exp_changed
    exp_token_pressed
  )

  ownership_post = %w(
    ownership
    ownership_update
  )

  perf_post = %w(
    perf_chart_chooser
    perf_top_chart
  )

  policy_post = %w(
    policy_options
    policy_show_options
    policy_sim
    policy_sim_add
    policy_sim_remove
  )

  pre_prov_post = %w(
    pre_prov
    pre_prov_continue
  )

  save_post = %w(
    save_default_search
  )

  snap_post = %w(
    snap_pressed
  )

  x_post = %w(
    x_button
    x_history
    x_search_by_name
    x_show
  )

  controller_routes = {

    :ems_storage_dashboard      => {
      :get => %w[
        show
        aggregate_status_data
        resources_capacity_data
      ]
    },

    :auth_key_pair_cloud      => {
      :get  => %w(
        download_data
        download_summary_pdf
        index
        new
        protect
        show
        show_list
        tagging_edit
        download_private_key
        ownership
      ) +
        compare_get,
      :post => %w(
        button
        dynamic_checkbox_refresh
        listnav_search_selected
        ownership_update
        protect
        quick_search
        sections_field_changed
        show
        show_list
        tagging_edit
        wait_for_task
      ) +
        adv_search_post +
        compare_post +
        exp_post +
        save_post
    },

    :automation_manager => {
      :get  => %w(
        download_data
        download_summary_pdf
        explorer
        form_fields
        show
        x_show
        x_button
        show_list
        tagging_edit
      ),
      :post => %w(
        accordion_select
        authentication_validate
        change_tab
        edit
        explorer
        new
        quick_search
        refresh
        reload
        show
        show_list
        tagging
        tagging_edit
        tree_autoload
        tree_select
        cs_form_field_changed
        wait_for_task
      ) +
        adv_search_post +
        exp_post +
        x_post
    },

    :automation_manager_configured_system => {
      :get => %w(
        download_summary_pdf
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        button
        listnav_search_selected
        quick_search
        reload
        show
        show_list
        tagging_edit
      )  +
        adv_search_post +
        exp_post
    },

    :configuration_script => {
      :get  => %w(
        configuration_script_service_dialog
        download_summary_pdf
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        button
        listnav_search_selected
        quick_search
        reload
        show
        show_list
        tagging_edit
      ) +
        adv_search_post +
        exp_post +
        save_post
    },

    :availability_zone        => {
      :get  => %w(
        dialog_load
        download_data
        download_summary_pdf
        index
        perf_top_chart
        protect
        show
        show_list
        tagging_edit
      ) +
        compare_get,
      :post => %w(
        button
        listnav_search_selected
        protect
        quick_search
        sections_field_changed
        show
        show_list
        tagging_edit
        tl_chooser
        wait_for_task
      ) +
        adv_search_post +
        compare_post +
        dialog_runner_post +
        exp_post +
        perf_post +
        save_post
    },

    :host_aggregate           => {
      :get  => %w(
        add_host_select
        delete_host_aggregates
        download_data
        download_summary_pdf
        edit
        host_aggregate_form_fields
        index
        new
        perf_top_chart
        protect
        remove_host_select
        show
        show_list
        tagging_edit
      ) +
        compare_get,
      :post => %w(
        add_host
        add_host_select
        button
        delete_host_aggregates
        listnav_search_selected
        create
        protect
        quick_search
        remove_host
        remove_host_select
        sections_field_changed
        show
        show_list
        tagging_edit
        tl_chooser
        update
        wait_for_task
      ) +
        adv_search_post +
        compare_post +
        exp_post +
        perf_post +
        save_post
    },

    :catalog                  => {
      :get  => %w(
        download_data
        explorer
        ot_edit
        ot_orchestration_managers
        ot_show
        servicetemplates_names
        show
      ),
      :post => %w(
        ab_group_reorder
        accordion_select
        ae_tree_select
        ae_tree_select_discard
        ae_tree_select_toggle
        atomic_form_field_changed
        atomic_st_edit
        automate_button_field_changed
        playbook_options_field_changed
        explorer
        group_create
        group_form_field_changed
        group_reorder_field_changed
        group_update
        ot_tags_edit
        ownership_update
        prov_field_changed
        reload
        resolve
        resource_delete
        save_copy_catalog
        servicetemplate_edit
        servicetemplate_copy
        servicetemplate_copy_cancel
        servicetemplate_copy_saved
        sort_ds_grid
        sort_host_grid
        sort_iso_img_grid
        sort_pxe_img_grid
        sort_vc_grid
        sort_vm_grid
        st_catalog_edit
        st_edit
        st_form_field_changed
        st_tags_edit
        st_upload_image
        tree_autoload
        tree_select
        x_button
        x_history
        x_show
      ) +
               button_post +
               exp_post +
               dialog_runner_post
    },

    :chargeback_assignment => {
      :get  => %w(
        change_tab
        index
      ),
      :post => %w(
        form_field_changed
        update
      )
    },
    :chargeback_rate => {
      :get  => %w(
        copy
        edit
        new
        show_list
        show
      ),
      :post => %w(
        delete
        edit
        form_field_changed
        show_list
        show
        tier_add
        tier_remove
      )
    },

    :chargeback_report => {
      :get  => %w(
        show
        show_list
        render_csv
        render_pdf
        render_txt
        report_only
      ),
      :post => %w(
        saved_report_paging
        show
      )
    },

    :configuration_job      => {
      :get  => %w(
        download_data
        download_summary_pdf
        index
        parameters
        show
        show_list
        tagging_edit
        protect
      ),
      :post => %w(
        button
        listnav_search_selected
        parameters
        quick_search
        sections_field_changed
        show
        show_list
        protect
        tagging_edit
      ) +
        adv_search_post +
        exp_post +
        save_post
    },

    :consumption                  => {
      :get => %w(
        show
      )
    },

    :cloud_object_store_container => {
      :get => %w(
        dialog_load
        download_data
        download_summary_pdf
        index
        show
        show_list
        tagging_edit
        new
      ),
      :post => %w(
        button
        dynamic_checkbox_refresh
        listnav_search_selected
        quick_search
        show
        show_list
        tagging_edit
        create
        wait_for_task
      ) + adv_search_post + exp_post + save_post + dialog_runner_post
    },

    :cloud_tenant             => {
      :get => %w(
        delete_cloud_tenants
        dialog_load
        download_data
        download_summary_pdf
        edit
        index
        new
        protect
        show
        show_list
        tagging_edit
      ) +
        compare_get,
      :post => %w(
        button
        listnav_search_selected
        protect
        quick_search
        sections_field_changed
        show
        show_list
        tagging_edit
        wait_for_task
      ) +
        adv_search_post +
        compare_post +
        dialog_runner_post +
        exp_post +
        save_post
    },

    :cloud_tenant_dashboard      => {
      :get => %w(
        data
        recent_instances_data
        recent_images_data
        aggregate_status_data
      )
    },

    :cloud_object_store_object => {
      :get => %w(
        download_data
        download_summary_pdf
        index
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        button
        dynamic_checkbox_refresh
        listnav_search_selected
        quick_search
        show
        show_list
        tagging_edit
      ) + adv_search_post + exp_post + save_post
    },

    :cloud_volume             => {
      :get  => %w(
        dialog_load
        download_data
        download_summary_pdf
        attach
        detach
        backup_new
        backup_select
        snapshot_new
        edit
        index
        new
        show
        show_list
        tagging_edit
      ) +
        compare_get,
      :post => %w(
        attach_volume
        detach_volume
        backup_create
        backup_restore
        snapshot_create
        button
        create
        dynamic_checkbox_refresh
        listnav_search_selected
        quick_search
        reload
        sections_field_changed
        show
        show_list
        tagging_edit
        update
        wait_for_task
      ) +
        adv_search_post +
        compare_post +
        dialog_runner_post +
        exp_post +
        save_post
    },

    :cloud_volume_snapshot    => {
      :get  => %w(
        download_data
        download_summary_pdf
        index
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        button
        dynamic_checkbox_refresh
        listnav_search_selected
        quick_search
        show
        show_list
        tagging_edit
      ) + adv_search_post + exp_post + save_post
    },

    :cloud_volume_backup    => {
      :get  => %w(
        volume_select
        volume_form_choices
        download_data
        index
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        backup_restore
        button
        dynamic_checkbox_refresh
        listnav_search_selected
        quick_search
        show
        show_list
        tagging_edit
        wait_for_task
      ) + adv_search_post + exp_post + save_post
    },

    :cloud_volume_type        => {
      :get  => %w(
        download_data
        index
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        button
        dynamic_checkbox_refresh
        listnav_search_selected
        quick_search
        show
        show_list
        tagging_edit
        wait_for_task
      ) + adv_search_post + exp_post + save_post
    },

    :configuration            => {
      # TODO: routes for new/edit/copy buttons need to be revisited
      # TODO: so they can be changed to send up POST request instead of GET
      :get  => %w(
        change_tab
        index
        show
        timeprofile_copy
        timeprofile_edit
        timeprofile_new
        time_profile_form_fields
      ),
      :post => %w(
        button
        filters_field_changed
        theme_changed
        timeprofile_delete
        timeprofile_field_changed
        timeprofile_update
        tree_autoload
        update
        view_selected
      )
    },

    :container                => {
      :get  => %w(
        download_data
        download_summary_pdf
        perf_top_chart
        show
        tl_chooser
        wait_for_task
        show_list
        tagging_edit
      ),
      :post => %w(
        accordion_select
        button
        show
        show_list
        tl_chooser
        wait_for_task
        quick_search
        reload
        tree_autoload
        tree_select
        tagging_edit
        listnav_search_selected
        x_button
        x_history
        x_search_by_name
      ) +
               adv_search_post +
               exp_post +
               perf_post +
               save_post
    },

    :container_group          => {
      :get  => %w(
        dialog_load
        download_data
        download_summary_pdf
        index
        perf_top_chart
        show
        show_list
        tagging_edit
        protect
      ),
      :post => %w(
        button
        dynamic_checkbox_refresh
        listnav_search_selected
        quick_search
        sections_field_changed
        show
        show_list
        tl_chooser
        wait_for_task
        tagging_edit
        protect
      ) +
               adv_search_post +
               exp_post +
               perf_post +
               save_post +
               dialog_runner_post
    },

    :container_node           => {
      :get  => %w(
        dialog_load
        download_data
        download_summary_pdf
        index
        perf_top_chart
        show
        show_list
        tagging_edit
        protect
      ),
      :post => %w(
        button
        dynamic_checkbox_refresh
        listnav_search_selected
        quick_search
        sections_field_changed
        show
        show_list
        tl_chooser
        wait_for_task
        tagging_edit
        protect
        launch_cockpit
        launch_external_logging
      ) +
               adv_search_post +
               dialog_runner_post +
               exp_post +
               perf_post +
               save_post
    },

    :container_replicator     => {
      :get  => %w(
        download_data
        download_summary_pdf
        index
        perf_top_chart
        show
        show_list
        tagging_edit
        protect
      ),
      :post => %w(
        button
        dynamic_checkbox_refresh
        listnav_search_selected
        quick_search
        sections_field_changed
        show
        show_list
        tl_chooser
        wait_for_task
        tagging_edit
        protect
      ) +
               adv_search_post +
               exp_post +
               perf_post +
               save_post
    },

    :container_image          => {
      :get  => %w(
        dialog_load
        download_data
        download_summary_pdf
        index
        show
        show_list
        tagging_edit
        guest_applications
        openscap_rule_results
        openscap_html
        protect
      ),
      :post => %w(
        button
        dynamic_checkbox_refresh
        listnav_search_selected
        quick_search
        sections_field_changed
        show
        show_list
        tagging_edit
        guest_applications
        openscap_rule_results
        protect
      ) + adv_search_post + exp_post + save_post + dialog_runner_post
    },

    :container_image_registry => {
      :get  => %w(
        download_data
        download_summary_pdf
        index
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        button
        dynamic_checkbox_refresh
        listnav_search_selected
        quick_search
        sections_field_changed
        show
        show_list
        tagging_edit
      ) + adv_search_post + exp_post + save_post
    },

    :container_service        => {
      :get  => %w(
        download_data
        download_summary_pdf
        index
        perf_top_chart
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        button
        dynamic_checkbox_refresh
        listnav_search_selected
        quick_search
        sections_field_changed
        show
        show_list
        wait_for_task
        tagging_edit
      ) +
               adv_search_post +
               exp_post +
               perf_post +
               save_post
    },

    :container_project        => {
      :get  => %w(
        dialog_load
        download_data
        download_summary_pdf
        index
        perf_top_chart
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        button
        dynamic_checkbox_refresh
        listnav_search_selected
        quick_search
        sections_field_changed
        show
        show_list
        tl_chooser
        wait_for_task
        tagging_edit
      ) +
               adv_search_post +
               exp_post +
               perf_post +
               save_post +
               dialog_runner_post
    },

    :container_route          => {
      :get  => %w(
        download_data
        download_summary_pdf
        index
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        button
        dynamic_checkbox_refresh
        listnav_search_selected
        quick_search
        sections_field_changed
        show
        show_list
        tagging_edit
      ) + adv_search_post + exp_post + save_post
    },

    :persistent_volume        => {
      :get  => %w(
        dialog_load
        download_data
        download_summary_pdf
        index
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        button
        dynamic_checkbox_refresh
        listnav_search_selected
        quick_search
        sections_field_changed
        show
        show_list
        tagging_edit
      ) + adv_search_post + exp_post + save_post + dialog_runner_post
    },

    :container_build          => {
      :get  => %w(
        download_data
        download_summary_pdf
        index
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        button
        dynamic_checkbox_refresh
        listnav_search_selected
        quick_search
        sections_field_changed
        show
        show_list
        tagging_edit
      ) + adv_search_post + exp_post + save_post
    },

    :container_template          => {
      :get  => %w(
        dialog_load
        download_data
        download_summary_pdf
        index
        service_dialog_from_ct
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        button
        ct_form_field_changed
        dynamic_checkbox_refresh
        listnav_search_selected
        quick_search
        sections_field_changed
        service_dialog_from_ct_submit
        show
        show_list
        tagging_edit
      ) + adv_search_post + exp_post + save_post + dialog_runner_post
    },

    :container_topology       => {
      :get => %w(
        show
        data
      )
    },

    :container_project_topology => {
      :get => %w(
        show
        data
      )
    },

    :network_topology         => {
      :get => %w(
        show
        data
      )
    },

    :cloud_topology         => {
      :get => %w(
        show
        data
      )
    },

    :infra_topology         => {
      :get => %w(
        show
        data
      )
    },

    :physical_infra_topology         => {
      :get => %w(
        show
        data
      )
    },

    :physical_infra_overview => {
      :get => %w(
        show
      )
    },

    :container_dashboard      => {
      :get => %w(
        data
        ems_utilization_data
        heatmaps_data
        image_metrics_data
        network_metrics_data
        pod_metrics_data
        project_data
        show
      )
    },

    :alerts_overview      => {
      :get => %w(
        show
      )
    },

    :alerts_list      => {
      :get => %w(
        show
        class_icons
      )
    },

    :alerts_most_recent      => {
      :get => %w(
        show
      )
    },

    :dashboard                => {
      :get  => %w(
        auth_error
        cockpit_redirect
        iframe
        change_tab
        index
        login
        logout
        saml_login
        oidc_login
        render_csv
        render_pdf
        render_txt
        render_chart
        report_only
        show
        timeline_data
        start_url
        widget_to_pdf
        widget_chart_data
        widget_menu_data
        widget_report_data
      ),
      :post => %w(
        external_authenticate
        kerberos_authenticate
        initiate_saml_login
        initiate_oidc_login
        authenticate
        change_group
        csp_report
        timeline_data
        login_retry
        reset_widgets
        tree_select
        wait_for_task
        widget_add
        widget_close
        widget_dd_done
        widget_refresh
        widget_toggle_minmax
        widget_zoom
      )
    },

    :ems_cloud                => {
      :get  => %w(
        dialog_load
        download_data
        download_summary_pdf
        protect
        show
        show_list
        sync_users
        tagging_edit
      ) +
        compare_get,
      :post => %w(
        new
        button
        dynamic_checkbox_refresh
        dynamic_radio_button_refresh
        dynamic_text_box_refresh
        listnav_search_selected
        protect
        quick_search
        sections_field_changed
        show
        show_list
        sync_users
        tagging_edit
        tl_chooser
        wait_for_task
      ) +
               adv_search_post +
               compare_post +
               dialog_runner_post +
               exp_post +
               save_post
    },

    :ems_cloud_dashboard      => {
      :get => %w(
        data
        recent_instances_data
        recent_images_data
        aggregate_status_data
      )
    },

    :ems_cluster              => {
      :get  => %w(
        dialog_load
        download_data
        download_summary_pdf
        index
        perf_top_chart
        protect
        show
        show_list
        tagging_edit
      ) +
               compare_get +
               drift_get,
      :post => %w(
        button
        listnav_search_selected
        protect
        quick_search
        sections_field_changed
        show
        show_list
        tagging_edit
        tl_chooser
        tree_autoload
        wait_for_task
      ) +
               adv_search_post +
               compare_post +
               dialog_runner_post +
               drift_post +
               exp_post +
               perf_post +
               save_post
    },

    :ems_infra                => {
      :get  => %w(
        dialog_load
        download_data
        download_summary_pdf
        register_nodes
        protect
        scaledown
        scaling
        show
        show_list
        tagging_edit
      ) +
               compare_get,
      :post => %w(
        new
        button
        register_nodes
        listnav_search_selected
        protect
        quick_search
        sections_field_changed
        show
        show_list
        tagging_edit
        tl_chooser
        tree_autoload
        wait_for_task
        scaling
        scaledown
        open_admin_ui
        open_admin_ui_done
      ) +
               adv_search_post +
               compare_post +
               dialog_runner_post +
               exp_post +
               save_post
    },

    :ems_infra_dashboard      => {
      :get => %w(
        data
        cluster_metrics_data
        ems_utilization_data
        recent_hosts_data
        recent_vms_data
        aggregate_status_data
      )
    },

    :ems_physical_infra                => {
      :get  => %w(
        download_data
        download_summary_pdf
        protect
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        new
        button
        listnav_search_selected
        protect
        quick_search
        show
        show_list
        tagging_edit
        tl_chooser
        tree_autoload
        wait_for_task
        launch_console
      ) +
               adv_search_post +
               dialog_runner_post +
               exp_post +
               save_post
    },

    :physical_switch    =>  {
      :get  =>  %w(
        download_data
        download_summary_pdf
        show_list
        show
      ),

      :post   =>  %w(
        listnav_search_selected
        show_list
        quick_search
      ) + adv_search_post + save_post,
    },

    :physical_server    =>  {
      :get  =>  %w(
        download_data
        download_summary_pdf
        perf_top_chart
        protect
        show_list
        show
        tagging_edit
        console_file
      ),

      :post   =>  %w(
        button
        show_list
        listnav_search_selected
        protect
        tagging_edit
        quick_search
        tl_chooser
        wait_for_task
        provision
        console
      ) +
          adv_search_post +
          exp_post +
          save_post
    },

    :physical_rack    =>  {
      :get  =>  %w(
        download_data
        download_summary_pdf
        protect
        show_list
        show
      ),

      :post   =>  %w(
        show_list
        quick_search
      )
    },

    :physical_network_port    => {
      :get  => %w(
        download_data
        download_summary_pdf
        show_list
        show
      ),

      :post  => %w(
        show_list
      )
    },

    :physical_storage   => {
      :get  => %w[
        download_data
        download_summary_pdf
        show
        show_list
        new
      ],
      :post => %w[
        button
        listnav_search_selected
        quick_search
        show_list
      ] + adv_search_post + save_post + exp_post
    },

    :physical_chassis    => {
      :get  => %w(
        download_data
        download_summary_pdf
        protect
        show_list
        show
      ),

      :post  => %w(
        show_list
        quick_search
      )
    },

    :guest_device    =>  {
      :get  =>  %w(
        show_list
        show
        quick_search
      ),

      :post   =>  %w(
        show_list
      ) +
          adv_search_post +
          exp_post +
          save_post
    },

    :ems_physical_infra_dashboard      => {
      :get => %w(
        recent_servers_data
        aggregate_status_data
        servers_group_data
      )
    },

    :ems_container            => {
      :get  => %w(
        dialog_load
        download_data
        download_summary_pdf
        perf_top_chart
        protect
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        new
        button
        dynamic_checkbox_refresh
        listnav_search_selected
        protect
        quick_search
        sections_field_changed
        show
        show_list
        tl_chooser
        wait_for_task
        tagging_edit
        launch_external_logging
      ) +
               adv_search_post +
               dialog_runner_post +
               exp_post +
               perf_post +
               save_post
    },

    :ems_network              => {
      :get  => %w(
        dialog_load
        download_data
        download_summary_pdf
        index
        protect
        show_list
        tagging_edit
      ),
      :post => %w(
        new
        button
        dynamic_checkbox_refresh
        dynamic_radio_button_refresh
        dynamic_text_box_refresh
        listnav_search_selected
        protect
        quick_search
        sections_field_changed
        show_list
        tagging_edit
        tl_chooser
        wait_for_task
      ) +
        adv_search_post +
        dialog_runner_post +
        exp_post +
        save_post
    },

    :security_group           => {
      :get  => %w(
        dialog_load
        edit
        download_data
        download_summary_pdf
        index
        new
        protect
        show
        show_list
        tagging_edit
      ) +
        compare_get,
      :post => %w(
        button
        create
        listnav_search_selected
        protect
        quick_search
        sections_field_changed
        show
        show_list
        tagging_edit
        update
        wait_for_task
      ) +
        adv_search_post +
        compare_post +
        save_post +
        exp_post +
        dialog_runner_post
    },

    :security_policy          => {
      :get  => %w[
        dialog_load
        download_data
        download_summary_pdf
        show
        show_list
        tagging_edit
      ],
      :post => %w[
        button
        quick_search
        listnav_search_selected
        show
        show_list
        tagging_edit
        wait_for_task
      ] +
        adv_search_post +
        save_post +
        exp_post +
        dialog_runner_post
    },

    :security_policy_rule     => {
      :get  => %w[
        dialog_load
        download_data
        download_summary_pdf
        show
        show_list
        tagging_edit
      ],
      :post => %w[
        button
        quick_search
        listnav_search_selected
        show
        show_list
        tagging_edit
        wait_for_task
      ] +
        adv_search_post +
        save_post +
        exp_post +
        dialog_runner_post
    },

    :floating_ip              => {
      :get  => %w(
        download_data
        download_summary_pdf
        edit
        index
        new
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        button
        create
        listnav_search_selected
        quick_search
        show
        show_list
        tagging_edit
        update
        wait_for_task
      ) +
        adv_search_post +
        save_post +
        exp_post
    },

    :cloud_subnet             => {
      :get  => %w(
        dialog_load
        download_data
        download_summary_pdf
        edit
        index
        new
        protect
        show
        show_list
        tagging_edit
      ) +
        compare_get,
      :post => %w(
        button
        create
        dynamic_checkbox_refresh
        listnav_search_selected
        protect
        quick_search
        sections_field_changed
        show
        show_list
        tagging_edit
        update
        wait_for_task
      ) +
        adv_search_post +
        compare_post +
        save_post +
        exp_post +
        dialog_runner_post
    },

    :cloud_network             => {
      :get  => %w(
        dialog_load
        download_data
        download_summary_pdf
        edit
        index
        new
        protect
        show
        show_list
        tagging_edit
      ) +
        compare_get,
      :post => %w(
        button
        create
        dynamic_checkbox_refresh
        listnav_search_selected
        protect
        quick_search
        sections_field_changed
        show
        show_list
        tagging_edit
        update
        wait_for_task
      ) +
        adv_search_post +
        compare_post +
        save_post +
        exp_post +
        dialog_runner_post
    },

    :network_port             => {
      :get  => %w(
        download_data
        download_summary_pdf
        index
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        button
        quick_search
        listnav_search_selected
        sections_field_changed
        show
        show_list
        tagging_edit
        wait_for_task
      ) +
        adv_search_post +
        save_post +
        exp_post
    },

    :network_router           => {
      :get  => %w(
        add_interface_select
        dialog_load
        download_data
        download_summary_pdf
        edit
        index
        new
        protect
        remove_interface_select
        show
        show_list
        tagging_edit
      ) +
        compare_get,
      :post => %w(
        add_interface
        add_interface_select
        button
        create
        listnav_search_selected
        protect
        quick_search
        remove_interface
        remove_interface_select
        sections_field_changed
        show
        show_list
        tagging_edit
        update
        wait_for_task
      ) +
        adv_search_post +
        compare_post +
        save_post +
        exp_post +
        dialog_runner_post
    },

    :network_service          => {
      :get  => %w[
        download_data
        download_summary_pdf
        show
        show_list
        tagging_edit
      ],
      :post => %w[
        button
        quick_search
        listnav_search_selected
        show
        show_list
        tagging_edit
        wait_for_task
      ] +
        adv_search_post +
        save_post +
        exp_post
    },

    :flavor                   => {
      # FIXME: Change tagging_edit to POST only; We need to remove the redirects
      # in app/controllers/application_controller/tags.rb#tag that are used in
      # a role of a method call.
      # Then remove this route from all other controllers too.
      :get  => %w(
        download_data
        download_summary_pdf
        index
        protect
        show
        show_list
        new
        tagging_edit
        ems_list
        cloud_tenants
      ) +
        compare_get,
      :post => %w(
        button
        listnav_search_selected
        protect
        quick_search
        sections_field_changed
        show
        show_list
        tagging_edit
      ) +
               adv_search_post +
               compare_post +
               exp_post +
               save_post
    },

    :host                     => {
      :get  => %w(
        advanced_settings
        dialog_load
        download_data
        download_summary_pdf
        edit
        filesystem_download
        filesystems
        firewall_rules
        timeline_data
        groups
        guest_applications
        host_form_fields
        host_services
        host_cloud_services
        index
        patches
        perf_top_chart
        protect
        show
        show_list
        start
        tagging_edit
        users
      ) +
               compare_get +
               drift_get,
      :post => %w(
        advanced_settings
        button
        drift_all
        drift_compress
        drift_differences
        drift_mode
        drift_same
        filesystems
        firewall_rules
        groups
        guest_applications
        host_services
        host_cloud_services
        listnav_search_selected
        quick_search
        patches
        protect
        sections_field_changed
        show
        show_list
        tagging_edit
        tl_chooser
        tree_autoload
        update
        users
        wait_for_task
      ) +
               adv_search_post +
               compare_post +
               dialog_runner_post +
               exp_post +
               perf_post +
               save_post
    },

    :infra_networking         => {
      :get  => %w(
        dialog_load
        download_data
        download_summary_pdf
        explorer
        hosts
        show_list
        tagging
        tagging_edit
        x_show
      ),
      :post => %w(
        button
        custom_button_events
        explorer
        hosts
        listnav_search_selected
        quick_search
        reload
        show_list
        tagging
        tagging_edit
        tree_select
        tree_autoload
        x_button
        x_show
        x_search_by_name
      ) +
        adv_search_post +
        exp_post +
        save_post +
        x_post +
        dialog_runner_post
    },

    :generic_object => {
      :get => %w(
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        button
        tagging_edit
      )
    },

    :generic_object_definition => {
      :get => %w(
        custom_buttons_in_set
        download_data
        download_summary_pdf
        edit
        new
        retrieve_distinct_instances_across_domains
        service_template_ansible_playbooks
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        add_button_in_group
        button
        custom_button_group_new
        custom_button_group_edit
        custom_button_new
        custom_button_edit
        edit
        listnav_search_selected
        new
        quick_search
        show_list
        tagging_edit
        tree_select
      ) +
        adv_search_post +
        exp_post +
        save_post
    },

    :ansible_credential => {
      :get => %w(
        download_data
        download_summary_pdf
        edit
        new
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        search_clear
        button
        show_list
        tagging_edit
      )
    },

    :ansible_playbook => {
      :get => %w(
        download_data
        download_summary_pdf
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        search_clear
        button
        show_list
        tagging_edit
      )
    },

    :ansible_repository => {
      :get => %w(
        download_data
        download_summary_pdf
        edit
        new
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        search_clear
        button
        edit
        new
        repository_refresh
        show_list
        tagging_edit
      )
    },

    :miq_ae_class             => {
      :get  => %w(
        explorer
        method_form_fields
        namespace
        show
      ),
      :post => %w(
        add_update_method
        ae_tree_select
        ae_tree_select_discard
        ae_tree_select_toggle
        change_tab
        copy_objects
        create
        create_instance
        create_method
        create_namespace
        domains_priority_edit
        embedded_methods_add
        embedded_methods_remove
        explorer
        expand_toggle
        field_accept
        field_delete
        field_method_accept
        field_method_delete
        field_method_select
        field_select
        fields_form_field_changed
        fields_seq_edit
        fields_seq_field_changed
        form_copy_objects_field_changed
        form_field_changed
        form_instance_field_changed
        form_method_field_changed
        priority_form_field_changed
        refresh_git_domain
        reload
        tree_select
        tree_autoload
        update
        update_fields
        update_instance
        update_method
        update_namespace
        validate_method_data
        x_button
        x_history
        x_show
      ) + adv_search_post +
        exp_post
    },
    :miq_ae_customization     => {
      :get  => %w(
        explorer
        editor
        export_service_dialogs
        show
      ),
      :post => %w(
        ab_group_reorder
        accordion_select
        automate_button_field_changed
        playbook_options_field_changed
        change_tab
        dialog_copy_editor
        dialog_edit_editor
        dialog_new_editor
        dialog_list
        explorer
        group_create
        group_form_field_changed
        group_reorder_field_changed
        group_update
        import_service_dialogs
        old_dialogs_form_field_changed
        old_dialogs_list
        old_dialogs_update
        reload
        resolve
        tree_autoload
        tree_select
        upload_import_file
        x_button
        x_history
        x_show
      ) +
               button_post + exp_post
    },

    :miq_ae_tools             => {
      :get  => %w(
        automate_json
        check_git_task
        export_datastore
        fetch_log
        import_export
        log
        resolve
        review_import
      ),
      :post => %w(
        button
        cancel_import
        form_field_changed
        import_automate_datastore
        import_via_git
        reset_datastore
        resolve
        retrieve_git_datastore
        upload
        upload_import_file
        wait_for_task
      )
    },

    :utilization              => {
      :get  => %w(
        index
        report_download
        timeline_data
      ),
      :post => %w(
        change_tab
        chart_chooser
        tree_autoload
        tree_select
        wait_for_task
      )
    },

    :miq_policy_export       => {
      :get  => %w(
        export
        fetch_yaml
        get_json
        import
      ),
      :post => %w(
        export
        export_field_changed
        import
        upload
      )
    },

    :miq_policy               => {
      :get  => %w(
        copy
        edit
        miq_event_edit
        miq_policy_edit_conditions
        miq_policy_edit_events
        new
        show
        show_list
      ),
      :post => %w(
        edit
        event_build_action_values
        miq_event_edit
        miq_policy_edit
        miq_policy_edit_conditions
        miq_policy_edit_events
        policy_field_changed
        quick_search
        reload
        show
        show_list
      ) +
         adv_search_post +
         exp_post
    },

    :miq_policy_log   => {
      :get => %w(
        fetch_log
      ),
      :post => %w(
        button
      )
    },

    :miq_policy_rsop         => {
      :post => %w(
        rsop
        rsop_option_changed
        rsop_show_options
        rsop_toggle
        wait_for_task
      )
    },

    :miq_policy_set => {
      :get  => %w(
        edit
        new
        show
        show_list
      ),
      :post => %w(
        edit
        form_field_changed
        reload
        show
        show_list
      )
    },

    :miq_action       => {
      :get  => %w(
        edit
        new
        show
        show_list
      ),
      :post => %w(
        miq_action_edit
        action_field_changed
        edit
        show
        show_list
      )
    },

    :miq_alert => {
      :get  => %w(
        copy
        edit
        new
        show
        show_list
      ),
      :post => %w(
        alert_field_changed
        edit
        show
        show_list
      ) +
        exp_post
    },

    :miq_alert_set  => {
      :get  => %w(
        edit
        edit_assignment
        new
        show
        show_list
      ),
      :post => %w(
        alert_profile_assign_changed
        alert_profile_field_changed
        edit
        edit_assignment
        new
        show
        show_list
      )
    },

    :miq_event_definition => {
      :get  => %w(
        show
        show_list
      ),
    },

    :condition => {
      :get  => %w(
        copy
        edit
        new
        show
        show_list
      ),
      :post => %w(
        condition_edit
        condition_field_changed
        edit
        show
        show_list
      ) +
          adv_search_post +
          exp_post
    },

    :miq_request              => {
      # FIXME: Change stamp to POST only; We need to remove the redirect
      :get  => %w(
        index
        post_install_callback
        pre_prov
        prov_copy
        prov_edit
        show
        show_list
        stamp
      ),
      :post => %w(
        button
        filter
        post_install_callback
        pre_prov
        prov_continue
        prov_edit
        prov_field_changed
        prov_load_tab
        request_copy
        request_edit
        retrieve_email
        show_list
        sort_configured_system_grid
        sort_ds_grid
        sort_host_grid
        sort_iso_img_grid
        sort_pxe_img_grid
        sort_template_grid
        sort_vc_grid
        sort_vm_grid
        sort_windows_image_grid
        stamp
        stamp_field_changed
        vm_pre_prov
      ) +
               dialog_runner_post
    },

    :miq_task                 => {
      :get  => %w(
        change_tab
        index
        jobs
      ),
      :post => %w(
        button
        jobs
        tasks_button
        tasks_change_options
      )
    },

    :miq_template             => {
      :get  => %w(
        download_summary_pdf
        edit
        show
        ownership
      ),
      :post => %w(
        edit
        edit_vm
        form_field_changed
        show
      ) +
               ownership_post
    },

    :ems_block_storage              => {
      :get  => %w(
        dialog_load
        download_data
        download_summary_pdf
        edit
        index
        new
        protect
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        new
        button
        dynamic_checkbox_refresh
        dynamic_radio_button_refresh
        dynamic_text_box_refresh
        listnav_search_selected
        protect
        quick_search
        sections_field_changed
        show
        show_list
        quick_search
        tagging_edit
        tl_chooser
        wait_for_task
      ) +
        adv_search_post +
        dialog_runner_post +
        exp_post +
        save_post
    },

    :ems_object_storage              => {
      :get  => %w(
        dialog_load
        download_data
        download_summary_pdf
        index
        protect
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        button
        dynamic_checkbox_refresh
        dynamic_radio_button_refresh
        dynamic_text_box_refresh
        listnav_search_selected
        protect
        quick_search
        sections_field_changed
        show
        show_list
        tagging_edit
        tl_chooser
        wait_for_task
      ) +
        adv_search_post +
        dialog_runner_post +
        exp_post +
        save_post
    },

    :ems_storage              => {
      :get  => %w(
        dialog_load
        download_data
        download_summary_pdf
        index
        protect
        show
        show_list
        tagging_edit
      ),
      :post => %w(
        button
        dynamic_checkbox_refresh
        dynamic_radio_button_refresh
        dynamic_text_box_refresh
        listnav_search_selected
        protect
        quick_search
        sections_field_changed
        show
        show_list
        tagging_edit
        tl_chooser
        wait_for_task
      ) +
        adv_search_post +
        dialog_runner_post +
        exp_post +
        save_post
    },

    :host_initiator   => {
      :get  => %w[
        download_data
        download_summary_pdf
        index
        show
        show_list
        new
      ],
      :post => %w[
        listnav_search_selected
        quick_search
        show_list
      ] +
        adv_search_post +
        exp_post +
        save_post
    },

    :storage_resource   => {
      :get  => %w[
        download_data
        download_summary_pdf
        show
        show_list
      ],
      :post => %w[
        listnav_search_selected
        quick_search
        show_list
      ] +
        adv_search_post +
        exp_post +
        save_post
    },

    :volume_mapping => {
      :get  => %w[
        download_data
        download_summary_pdf
        index
        show
        show_list
        new
      ],
      :post => %w[
        listnav_search_selected
        quick_search
        show_list
      ] +
        adv_search_post +
        exp_post +
        save_post
    },

    :ops                      => {
      :get  => %w(
        dialog_load
        explorer
        fetch_audit_log
        fetch_log
        fetch_production_log
        log_collection_form_fields
        pglogical_subscriptions_form_fields
        schedule_form_fields
        tenant_quotas_form_fields
      ),
      :post => %w(
        accordion_select
        apply_imports
        ap_ce_delete
        ap_ce_select
        ap_edit
        ap_form_field_changed
        ap_set_active_tab
        aps_list
        automate_schedules_set_vars
        button
        category_delete
        category_edit
        category_field_changed
        ce_accept
        ce_delete
        ce_new_cat
        ce_select
        change_tab
        cu_collection_field_changed
        cu_collection_update
        cu_repair
        cu_repair_field_changed
        db_backup
        db_backup_form_field_changed
        diagnostics_server_list
        diagnostics_tree_select
        explorer
        fetch_target_ids
        forest_accept
        forest_delete
        forest_form_field_changed
        forest_select
        help_menu_form_field_changed
        label_tag_mapping_delete
        label_tag_mapping_edit
        label_tag_mapping_update
        label_tag_mapping_field_changed
        log_depot_edit
        log_depot_validate
        orphaned_records_delete
        perf_chart_chooser
        pglogical_save_subscriptions
        pglogical_validate_subscription
        rbac_group_edit
        rbac_group_field_changed
        rbac_group_load_tab
        rbac_group_seq_edit
        rbac_group_user_lookup
        rbac_groups_list
        rbac_role_edit
        rbac_role_field_changed
        rbac_roles_list
        rbac_tags_edit
        rbac_tenant_edit
        rbac_tenants_list
        rbac_tenant_manage_quotas
        rbac_user_edit
        rbac_user_field_changed
        rbac_users_list
        region_edit
        restart_server
        schedule_edit
        schedule_form_filter_type_field_changed
        schedules_list
        settings_form_field_changed
        settings_update
        settings_update_help_menu
        show
        smartproxy_affinity_field_changed
        tl_chooser
        tree_autoload
        tree_select
        upload_csv
        upload_form_field_changed
        upload_login_brand
        upload_login_logo
        upload_logo
        upload_favicon
        wait_for_task
        x_button
        zone_edit
        zone_field_changed
      ) + exp_post + dialog_runner_post
    },

    :optimization => {
      :get => %w[
        index
        show_list
        show
        json_list
      ],
      :post => %w[
        queue_report
      ],
    },

    :orchestration_stack      => {
      :get  => %w(
        cloud_networks
        dialog_load
        download_data
        download_summary_pdf
        index
        outputs
        parameters
        resources
        retire
        show
        show_list
        stacks_ot_info
        tagging_edit
        protect
      ) +
        compare_get,
      :post => %w(
        button
        cloud_networks
        outputs
        listnav_search_selected
        parameters
        quick_search
        resources
        sections_field_changed
        show
        show_list
        stacks_ot_copy
        protect
        tagging_edit
      ) +
               adv_search_post +
               compare_post +
               exp_post +
               save_post +
               dialog_runner_post
    },

    :ems_configuration => {
      :get  => %w[
        button
        download_data
        download_summary_pdf
        edit
        form_fields
        new
        show
        show_list
        tagging_edit
      ],
      :post => %w[
        authentication_validate
        button
        change_tab
        edit
        new
        quick_search
        reload
        show
        show_list
        tagging_edit
        wait_for_task
      ] +
        adv_search_post +
        exp_post +
        save_post
    },

    :configuration_profile  => {
      :get  => %w[
        download_data
        download_summary_pdf
        show
        show_list
        tagging_edit
      ],
      :post => %w[
        button
        quick_search
        reload
        show
        show_list
        tagging_edit
        launch_configuration_profile_console
      ]
    },

    :configured_system  => {
      :get  => %w[
        download_data
        download_summary_pdf
        show
        show_list
        tagging_edit
      ],
      :post => %w[
        button
        new
        quick_search
        reload
        show
        show_list
        tagging_edit
        wait_for_task
        launch_configured_system_console
      ] +
        adv_search_post +
        dialog_runner_post +
        exp_post +
        save_post
    },

    :pxe                      => {
      :get  => %w(
        explorer
        tagging_edit
      ),
      :post => %w(
        accordion_select
        explorer
        iso_datastore_create
        iso_datastore_form_field_changed
        iso_datastore_list
        iso_image_edit
        iso_img_form_field_changed
        log_depot_validate
        pxe_image_edit
        pxe_image_type_edit
        pxe_image_type_list
        pxe_img_form_field_changed
        pxe_server_async_cred_validation
        pxe_server_list
        pxe_wimg_edit
        pxe_wimg_form_field_changed
        reload
        tagging_edit
        template_list
        tree_autoload
        tree_select
        x_button
        x_history
      )
    },

    :report                   => {
      :get  => %w(
        dashboard_get
        db_copy
        db_widget_dd_done
        download_report
        explorer
        export_widgets
        miq_report_edit
        miq_report_new
        preview_chart
        render_chart
        report_only
        sample_chart
        print_report
        send_report_data
        tree_autoload
        tree_select
      ),
      :post => %w(
        accordion_select
        change_tab
        dashboard_render
        db_copy
        db_edit
        db_form_field_changed
        db_seq_edit
        db_widget_dd_done
        db_widget_remove
        discard_changes
        explorer
        export_field_changed
        filter_change
        form_field_changed
        get_report
        import_widgets
        menu_editor
        menu_field_changed
        menu_folder_message_display
        menu_update
        miq_report_edit
        reload
        rep_change_tab
        saved_report_paging
        schedule_edit
        schedule_form_field_changed
        show_preview
        tree_autoload
        tree_select
        upload
        upload_widget_import_file
        wait_for_task
        widget_edit
        widget_form_field_changed
        widget_shortcut_dd_done
        widget_shortcut_remove
        widget_shortcut_reset
        x_button
        x_history
        x_show
      ) +
               exp_post
    },

    :resource_pool            => {
      :get  => %w(
        download_data
        download_summary_pdf
        index
        protect
        show
        show_list
        tagging_edit
      ) +
        compare_get,
      :post => %w(
        button
        listnav_search_selected
        protect
        sections_field_changed
        show
        show_list
        tagging_edit
        tree_autoload
        quick_search
      ) +
               adv_search_post +
               compare_post +
               exp_post +
               save_post
    },

    :restful_redirect => {
      :get => %w(
        index
      )
    },

    :service                  => {
      :get  => %w(
        dialog_load
        download_data
        explorer
        reconfigure_form_fields
        retire
        service_form_fields
        show
        tagging_edit
      ),
      :post => %w(
        button
        explorer
        listnav_search_selected
        ownership_update
        quick_search
        reload
        service_edit
        service_tag
        show
        show_list
        tagging_edit
        tree_autoload
        tree_select
        x_button
        x_history
        x_show
        wait_for_task
      ) +
               dialog_runner_post +
               adv_search_post +
               exp_post +
               save_post +
               x_post
    },

    :storage                  => {
      :get  => %w(
        button
        debris_files
        dialog_load
        disk_files
        download_data
        download_summary_pdf
        explorer
        files
        perf_chart_chooser
        protect
        show
        show_list
        snapshot_files
        tagging_edit
        tree_select
        vm_ram_files
        vm_misc_files
        x_show
      ) +
               compare_get,
      :post => %w(
        accordion_select
        button
        debris_files
        explorer
        files
        listnav_search_selected
        disk_files
        perf_chart_chooser
        protect
        quick_search
        reload
        sections_field_changed
        show
        show_list
        storage_list
        storage_pod_list
        snapshot_files
        tagging
        tagging_edit
        tree_autoload
        tree_select
        vm_misc_files
        vm_ram_files
        wait_for_task
        x_search_by_name
        x_show
      ) +
               adv_search_post +
               compare_post +
               dialog_runner_post +
               exp_post +
               save_post +
               x_post
    },

    :support                  => {
      :get  => %w(index)
    },

    :vm                       => {
      :get  => %w(
        download_data
        download_summary_pdf
        edit
        ownership
        policy_sim
        reconfigure
        reconfigure_form_fields
        resize
        resize_form_fields
        evacuate
        evacuate_form_fields
        live_migrate
        live_migrate_form_fields
        associate_floating_ip
        associate_floating_ip_form_fields
        disassociate_floating_ip
        disassociate_floating_ip_form_fields
        add_security_group
        remove_security_group
        rename_vm
        retire
        right_size
        show
        show_list
      ),
      :post => %w(
        edit_vm
        form_field_changed
        name_changed
        policy_sim
        policy_sim_add
        policy_sim_cancel
        policy_sim_remove
        reconfigure
        reconfigure_form_fields
        reconfigure_update
        resize_vm
        evacuate_vm
        live_migrate_vm
        associate_floating_ip_vm
        disassociate_floating_ip_vm
        rename_vm
        right_size
        set_checked_items
        show_list
        tree_autoload
        genealogy_tree_selected
        ownership_update
        wait_for_task
      ) +
               ownership_post +
               pre_prov_post
    },

    :vm_cloud                 => {
      :get  => %w(
        download_data
        download_summary_pdf
        drift_to_csv
        drift_to_pdf
        drift_to_txt
        explorer
        filesystem_download
        reconfigure_form_fields
        launch_html5_console
        launch_vmrc_console
        perf_chart_chooser
        protect
        retire
        right_size_print
        show
        tagging_edit
        resize
        resize_form_fields
        live_migrate_form_fields
        attach
        detach
        evacuate
        evacuate_form_fields
        associate_floating_ip
        associate_floating_ip_form_fields
        disassociate_floating_ip
        disassociate_floating_ip_form_fields
        add_security_group
        remove_security_group
      ) +
               compare_get,
      :post => %w(
        advanced_settings
        accordion_select
        button
        edit_vm
        resize_vm
        event_logs
        explorer
        launch_html5_console
        launch_cockpit
        filesystems
        filesystem_drivers
        form_field_changed
        guest_applications
        groups
        html5_console
        kernel_drivers
        linux_initprocesses
        ownership_update
        patches
        perf_chart_chooser
        policies
        processes
        protect
        prov_edit
        prov_field_changed
        quick_search
        registry_items
        reload
        reconfigure_update
        scan_histories
        sections_field_changed
        security_groups
        sort_template_grid
        floating_ips
        network_routers
        network_ports
        cloud_subnets
        cloud_networks
        cloud_volumes
        show
        tagging_edit
        tl_chooser
        tree_autoload
        tree_select
        users
        vm_pre_prov
        wait_for_task
        win32_services
        live_migrate_vm
        attach_volume
        detach_volume
        evacuate_vm
        ownership_update
        associate_floating_ip_vm
        disassociate_floating_ip_vm
      ) +
               adv_search_post +
               compare_post +
               dialog_runner_post +
               drift_post +
               exp_post +
               policy_post +
               pre_prov_post +
               snap_post +
               x_post
    },

    :vm_infra                 => {
      :get  => %w(
        download_data
        download_summary_pdf
        drift_to_csv
        drift_to_pdf
        drift_to_txt
        explorer
        filesystem_download
        reconfigure_form_fields
        right_size_print
        launch_html5_console
        launch_vmrc_console
        launch_native_console
        perf_chart_chooser
        policies
        protect
        retire
        show
        tagging_edit
      ) +
               compare_get,
      :post => %w(
        accordion_select
        advanced_settings
        button
        edit_vm
        event_logs
        explorer
        filesystems
        filesystem_drivers
        form_field_changed
        guest_applications
        groups
        kernel_drivers
        linux_initprocesses
        name_changed
        ownership_update
        patches
        perf_chart_chooser
        policies
        protect
        processes
        prov_edit
        prov_field_changed
        quick_search
        reconfigure_update
        registry_items
        reload
        rename_vm
        scan_histories
        sections_field_changed
        security_groups
        show
        sort_ds_grid
        sort_host_grid
        sort_iso_img_grid
        sort_vc_grid
        sort_template_grid
        sort_vm_grid
        tagging_edit
        tl_chooser
        tree_autoload
        tree_select
        users
        vmrc_console
        launch_cockpit
        vm_pre_prov
        html5_console
        native_console
        wait_for_task
        win32_services
        ownership_update
      ) +
               adv_search_post +
               compare_post +
               dialog_runner_post +
               drift_post +
               exp_post +
               policy_post +
               pre_prov_post +
               snap_post +
               x_post
    },

    :vm_or_template           => {
      :get  => %w(
        download_data
        download_summary_pdf
        drift_to_csv
        drift_to_pdf
        drift_to_txt
        explorer
        launch_html5_console
        launch_vmrc_console
        launch_native_console
        reconfigure_form_fields
        policies
        protect
        retire
        show
        tagging_edit
        vm_show
      ) +
               compare_get,
      :post => %w(
        accordion_select
        advanced_settings
        button
        drift_all
        drift_differences
        drift_history
        drift_mode
        drift_same
        edit_vm
        event_logs
        explorer
        filesystem_drivers
        filesystems
        form_field_changed
        groups
        guest_applications
        kernel_drivers
        linux_initprocesses
        name_changed
        ownership_update
        patches
        perf_chart_chooser
        policies
        processes
        protect
        prov_edit
        prov_field_changed
        quick_search
        reconfigure_update
        registry_items
        reload
        rename_vm
        scan_histories
        sections_field_changed
        security_groups
        floating_ips
        network_routers
        network_ports
        cloud_subnets
        cloud_networks
        cloud_volumes
        show
        sort_ds_grid
        sort_host_grid
        sort_iso_img_grid
        sort_vc_grid
        tagging_edit
        tl_chooser
        tree_select
        users
        vm_pre_prov
        vmrc_console
        html5_console
        native_console
        wait_for_task
        win32_services
        x_button
        x_history
        x_search_by_name
        x_show
        ownership_update
      ) +
               adv_search_post +
               compare_post +
               dialog_runner_post +
               exp_post +
               policy_post +
               pre_prov_post +
               snap_post
    },

    :firmware_registry => {
      :get => %w[
        download_data
        download_summary_pdf
        show
        show_list
      ],
      :post => %w[
        show_list
      ]
    },

    :firmware_binary => {
      :get => %w[
        download_data
        download_summary_pdf
        show
      ]
    },

    :firmware_target => {
      :get => %w[
        download_data
        download_summary_pdf
        show
      ]
    },
  }

  routes_without_index = %i[
    cloud_tenant_dashboard
    container_dashboard
    ems_cloud
    ems_cloud_dashboard
    ems_container
    ems_infra
    ems_storage_dashboard
    ems_infra_dashboard
    ems_network
    ems_physical_infra
    ems_physical_infra_dashboard
    ems_storage
    miq_ae_customization
    network_service
    physical_storage
    pxe
    security_policy
    security_policy_rule
    storage_resource
  ].freeze

  root :to => 'dashboard#login'

  # Let's serve pictures directly from the DB
  get '/pictures/:basename' => 'picture#show', :basename => /[\da-zA-Z]+\.[\da-zA-Z]+/

  get '/saml_login(/*path)' => 'dashboard#saml_login'
  get '/oidc_login(/*path)' => 'dashboard#oidc_login'

  # ping response for load balancing
  get '/ping' => 'ping#index'

  controller_routes.each do |controller_name, controller_actions|
    # Default route with no action to controller's index action
    unless routes_without_index.include?(controller_name)
      match controller_name.to_s, :controller => controller_name, :action => :index, :via => :get
    end

    default_routes.each do |action_name|
      post "#{controller_name}/#{action_name}(/:id)",
          :action     => action_name,
          :controller => controller_name
    end

    # One-by-one get/post routes for defined controllers
    if controller_actions.kind_of?(Hash)
      unless controller_actions[:get].nil?
        controller_actions[:get].each do |action_name|
          get "#{controller_name}/#{action_name}(/:id)",
              :action     => action_name,
              :controller => controller_name
        end
      end

      unless controller_actions[:post].nil?
        controller_actions[:post].each do |action_name|
          post "#{controller_name}/#{action_name}(/:id)",
               :action     => action_name,
               :controller => controller_name
        end
      end
    end
  end

  # API-like JSON trees
  get '/tree/automate_entrypoint', :to => 'tree#automate_entrypoint'
  get '/tree/automate_inline_methods', :to => 'tree#automate_inline_methods'

  # pure-angular templates
  get '/static/*id' => 'static#show', :format => false

  # prevent No route matches [GET] "/favicon.ico"
  get '/favicon.ico' => 'static#favicon', :format => false

  %w[ems_cloud ems_infra ems_physical_infra ems_container ems_network ems_storage ems_block_storage].each do |resource|
    resources(resource.to_sym, :as => resource.pluralize.to_sym, :except => %i[create update destroy])
  end
  # rubocop:enable Layout/HashAlignment
  # rubocop:enable Layout/MultilineOperationIndentation
end
Rails.application.routes.draw do
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
end
# frozen_string_literal: true

Spree::Core::Engine.routes.draw do
  namespace :admin do
    resources :users do
      resource :api_key, controller: 'users/api_key', only: [:create, :destroy]
    end
  end

  namespace :api, defaults: { format: 'json' } do
    resources :promotions, only: [:show]

    resources :products do
      resources :images
      resources :variants
      resources :product_properties
    end

    concern :order_routes do
      resources :line_items
      resources :payments do
        member do
          put :authorize
          put :capture
          put :purchase
          put :void
          put :credit
        end
      end

      resources :addresses, only: [:show, :update]

      resources :return_authorizations do
        member do
          put :cancel
        end
      end

      resources :customer_returns, except: :destroy
    end

    resources :checkouts, only: [:update], concerns: :order_routes do
      member do
        put :next
        put :advance
        put :complete
      end
    end

    resources :variants do
      resources :images
    end

    resources :option_types do
      resources :option_values
    end
    resources :option_values

    get '/orders/mine', to: 'orders#mine', as: 'my_orders'
    get "/orders/current", to: "orders#current", as: "current_order"

    resources :orders, concerns: :order_routes do
      member do
        put :cancel
        put :empty
      end

      resources :coupon_codes, only: [:create, :destroy]
    end

    resources :zones
    resources :countries, only: [:index, :show] do
      resources :states, only: [:index, :show]
    end

    resources :shipments, only: [:create, :update] do
      collection do
        post 'transfer_to_location'
        post 'transfer_to_shipment'
        get :mine
      end

      member do
        get :estimated_rates
        put :select_shipping_method

        put :ready
        put :ship
        put :add
        put :remove
      end
    end
    resources :states, only: [:index, :show]

    resources :taxonomies do
      resources :taxons
    end

    resources :taxons, only: [:index]

    resources :inventory_units, only: [:show, :update]

    resources :users do
      resources :credit_cards, only: [:index]
      resource :address_book, only: [:show, :update, :destroy]
    end

    resources :credit_cards, only: [:update]

    resources :properties
    resources :stock_locations do
      resources :stock_movements
      resources :stock_items
    end

    resources :stock_items, only: [:index, :update, :destroy]

    resources :stores

    resources :store_credit_events, only: [] do
      collection do
        get :mine
      end
    end

    get '/config/money', to: 'config#money'
    get '/config', to: 'config#show'
    put '/classifications', to: 'classifications#update', as: :classifications
    get '/taxons/products', to: 'taxons#products', as: :taxon_products
  end
end
Dummy::Application.routes.draw do

  mount TestEngine::Engine => '/test'

  scope ENV['RAILS_RELATIVE_URL_ROOT'] || '/' do

    scope '/api' do
      resources :users do
        collection do
          post :create_route
        end
      end
      resources :concerns, :only => [:index, :show]
      namespace :files do
        get '/*file_path', format: false, :action => 'download'
      end

      # This is not directly used in the specs.
      # It is only there to tests apipies tolerance regarding
      # missing controllers.
      resources :dangeling_stuff
      resources :twitter_example do
        collection do
          get :lookup
          get 'profile_image/:screen_name' => 'twitter_example#profile_image'
          get :search
          get :search
          get :contributors
        end
      end

      get "/pets/return_and_validate_expected_response" => "pets#return_and_validate_expected_response"
      get "/pets/return_and_validate_expected_array_response" => "pets#return_and_validate_expected_array_response"
      get "/pets/return_and_validate_type_mismatch" => "pets#return_and_validate_type_mismatch"
      get "/pets/return_and_validate_missing_field" => "pets#return_and_validate_missing_field"
      get "/pets/return_and_validate_extra_property" => "pets#return_and_validate_extra_property"
      get "/pets/return_and_validate_allowed_extra_property" => "pets#return_and_validate_allowed_extra_property"
      get "/pets/sub_object_invalid_extra_property" => "pets#sub_object_invalid_extra_property"
      get "/pets/sub_object_allowed_extra_property" => "pets#sub_object_allowed_extra_property"
      get "/pets/return_and_validate_unexpected_array_response" => "pets#return_and_validate_unexpected_array_response"
      get "/pets/return_and_validate_expected_response_with_null" => "pets#return_and_validate_expected_response_with_null"
      get "/pets/return_and_validate_expected_response_with_null_object" => "pets#return_and_validate_expected_response_with_null_object"

      get "/pets/returns_response_with_valid_array" => "pets#returns_response_with_valid_array"
      get "/pets/returns_response_with_invalid_array" => "pets#returns_response_with_invalid_array"
      get "/pets/undocumented_method" => "pets#undocumented_method"
    end

    apipie
  end
  root :to => 'apipie/apipies#index'
  match '(/)*path' => redirect('http://www.example.com'), :via => :all
end
Rails.application.routes.draw do
  mount Ahoy::Engine => "/ahoy" if Ahoy.api
end

Ahoy::Engine.routes.draw do
  scope module: "ahoy" do
    resources :visits, only: [:create]
    resources :events, only: [:create]
  end
end
Rails.application.routes.draw do
  # localhost:3000/api/v1/login
  namespace :api do
    namespace :v1 do
      resources :users, only: [:create]
      post '/login', to: 'auth#create'
      get '/profile', to: 'users#profile'
    end
  end
end
Rails.application.routes.draw do
  resources :artists, :songs
end
Rails.application.routes.draw do
  devise_for :admin_users, ActiveAdmin::Devise.config
  ActiveAdmin.routes(self)


  get "cart" => "cart#show"
  get "cart/add/:id" => "cart#add", :as => :add_to_cart
  post "cart/remove/:id" => "cart#remove", :as => :remove_from_cart
  post "cart/checkout" => "cart#checkout", :as => :checkout

  get 'signup' => 'users#new', :as => :signup
  get 'logout' => 'sessions#destroy', :as => :logout
  get 'login' => 'sessions#new', :as => :login
  resources :sessions
  resources :users
  resources :products

  root :to => "products#index"
end
Rails.application.routes.draw do
  root to: 'artists#index'

  # resources :artists
  # resources :songs

  # `resources :artists` generates the following routes
  get    '/artists'           => 'artists#index'
  get    '/artists/new'       => 'artists#new',   as: "new_artist"
  get    '/artists/:id'       => 'artists#show',  as: "artist"
  post   '/artists'           => 'artists#create'
  get    '/artists/:id/edit'  => 'artists#edit',  as: "edit_artist"
  patch  '/artists/:id'       => 'artists#update'
  delete '/artists/:id'       => 'artists#destroy'

  # `resources :songs` generates the following routes
  get    '/songs'             => 'songs#index'
  get    '/songs/new'         => 'songs#new',     as: "new_song"
  get    '/songs/:id'         => 'songs#show',    as: "song"
  post   '/songs'             => 'songs#create'
  get    '/songs/:id/edit'    => 'songs#edit',    as: "edit_song"
  patch  '/songs/:id'         => 'songs#update'
  delete '/songs/:id'         => 'songs#destroy'
end
Rails.application.routes.draw do
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
  mount Shopping => '/'
end
# typed: false
Rails.application.routes.draw do
  get 'test/index' => 'test#index'
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
end
# frozen_string_literal: true

Rails.application.routes.draw do
  # when using multiple models, controllers will default to the first available
  # devise mapping. routes for subsequent devise mappings will need to defined
  # within a `devise_scope` block

  # define :users as the first devise mapping:
  mount_devise_token_auth_for 'User', at: 'auth'

  # define :mangs as the second devise mapping. routes using this class will
  # need to be defined within a devise_scope as shown below
  mount_devise_token_auth_for 'Mang', at: 'mangs'

  mount_devise_token_auth_for 'OnlyEmailUser', at: 'only_email_auth', skip: [:omniauth_callbacks]

  mount_devise_token_auth_for 'UnregisterableUser', at: 'unregisterable_user_auth', skip: [:registrations]

  mount_devise_token_auth_for 'UnconfirmableUser', at: 'unconfirmable_user_auth'

  mount_devise_token_auth_for 'LockableUser', at: 'lockable_user_auth'

  mount_devise_token_auth_for 'ConfirmableUser', at: 'confirmable_user_auth'

  # test namespacing
  namespace :api do
    scope :v1 do
      mount_devise_token_auth_for 'User', at: 'auth'
    end
  end

  # test namespacing with not created devise mapping
  namespace :api_v2, defaults: { format: :json } do
    mount_devise_token_auth_for 'ScopedUser',
                                at:          'auth',
                                controllers: {
                                  omniauth_callbacks: 'api_v2/omniauth_callbacks',
                                  sessions:           'api_v2/sessions',
                                  registrations:      'api_v2/registrations',
                                  confirmations:      'api_v2/confirmations',
                                  passwords:          'api_v2/passwords'
                                }
  end

  # this route will authorize visitors using the User class
  get 'demo/members_only', to: 'demo_user#members_only'
  get 'demo/members_only_remove_token', to: 'demo_user#members_only_remove_token'

  # routes within this block will authorize visitors using the Mang class
  get 'demo/members_only_mang', to: 'demo_mang#members_only'

  # routes within this block will authorize visitors using the Mang or User class
  get 'demo/members_only_group', to: 'demo_group#members_only'

  # we need a route for omniauth_callback_controller to redirect to in sameWindow case
  get 'auth_origin', to: 'auth_origin#redirected'
end
PgHero::Engine.routes.draw do
  scope "(:database)", constraints: proc { |req| (PgHero.config["databases"].keys + [nil]).include?(req.params[:database]) } do
    get "space", to: "home#space"
    get "space/:relation", to: "home#relation_space", as: :relation_space
    get "index_bloat", to: "home#index_bloat"
    get "live_queries", to: "home#live_queries"
    get "queries", to: "home#queries"
    get "queries/:query_hash", to: "home#show_query", as: :show_query
    get "system", to: "home#system"
    get "cpu_usage", to: "home#cpu_usage"
    get "connection_stats", to: "home#connection_stats"
    get "replication_lag_stats", to: "home#replication_lag_stats"
    get "load_stats", to: "home#load_stats"
    get "free_space_stats", to: "home#free_space_stats"
    get "explain", to: "home#explain"
    get "tune", to: "home#tune"
    get "connections", to: "home#connections"
    get "maintenance", to: "home#maintenance"
    post "kill", to: "home#kill"
    post "kill_long_running_queries", to: "home#kill_long_running_queries"
    post "kill_all", to: "home#kill_all"
    post "enable_query_stats", to: "home#enable_query_stats"
    post "explain", to: "home#explain"
    post "reset_query_stats", to: "home#reset_query_stats"

    # legacy routes
    get "system_stats" => redirect("system")
    get "query_stats" => redirect("queries")

    root to: "home#index"
  end
end
Rails.application.routes.draw do
  namespace :admin do
    resources :customers
    resources :line_items
    resources :log_entries
    resources :orders
    resources :pages
    resources :products
    resources :product_meta_tags, except: [:index]
    resources :payments, only: [:index, :show]
    resources :series

    namespace :blog do
      resources :posts
    end

    resources :stats, only: [:index]

    root to: "customers#index"
  end

  get "/*page", to: "docs#show"
  root to: "docs#index"
end
class Subdomain
  def initialize
  end

  def matches?(request)
    if request.subdomain.present? && request.subdomain != 'www'
      true
    else
      false
    end
  end
end


Confman::Application.routes.draw do

  mount RailsAdmin::Engine => '/deck', as: 'rails_admin'

  resources :topics
  resources :speakers
  resources :speeches
  resources :notifications, only: [:index] do
    collection do
      get :read_all
    end
  end

  get "invitations/accept"
  get '/dashboard', to: 'home#dashboard'

  constraints Subdomain.new do
    #scope path: "/" do
    resource :conference, path: "/" do
      member do
        get 'apply'
        post 'apply' => "conferences#save_apply"
      end
    end
    #end


    namespace :admin do
      scope path: "/" do
        resource :conference, path: "/", except: [:new, :create] do
          member do
            get 'speech_types'
            get 'manage'
            get 'basic_information'
            get 'address'
            get 'contact_information'
            get 'site_settings'
            get 'search_users'
          end
        end
      end
      resources :roles
      resources :addresses
      resources :sponsors
      resources :rooms
      resources :slots
      resources :email_templates
      resources :speeches do
        collection do
          get "bulk_mail"
          post "send_bulk_mail"
          get "export"
        end
        member do
          post 'comment'
          get 'upvote'
          get 'downvote'
          get 'accept'
          get 'reject'
          get 'send_accept_mail'
          get 'send_reject_mail'
        end
      end
      resource :schedule, :controller => 'schedule' do
        member do
          get 'speech_list'
        end
      end
    end
  end


  resource :conferences do
    collection do
      get 'check_slug'
      get 'reset_wizard'
      put 'sync_wizard'
    end
  end



  resources :organizations do
    member do
      post 'invite'
    end
  end

  get "invitations/accept", as: :accept_invitation

  get "home/index"

  devise_for :users, :controllers => { omniauth_callbacks: 'omniauth_callbacks' }
  resources :users

  authenticated :user do
    root :to => "home#dashboard", as: :authenticated_root
  end

  root :to => 'home#index'
  post "/quick_signup" => 'home#quick_signup'
  get "/quick_social_signup" => 'home#quick_social_signup'

  get "settings", to: "settings#index"
  post "settings", to: "settings#update", :as => "update_settings"

end
Rails.application.routes.draw do
  ################################################################################
  # Root

  root to: 'home#index'

  ################################################################################
  # API

  namespace :api do
    namespace :v2 do
      resources :rubygems, param: :name, only: [], constraints: { name: Patterns::ROUTE_PATTERN } do
        resources :versions, param: :number, only: :show, constraints: {
          number: /#{Gem::Version::VERSION_PATTERN}(?=\.json\z)|#{Gem::Version::VERSION_PATTERN}(?=\.yaml\z)|#{Gem::Version::VERSION_PATTERN}/
        }
      end
    end

    namespace :v1 do
      resource :api_key, only: %i[show create update]
      resource :multifactor_auth, only: :show
      resources :profiles, only: :show
      resources :downloads, only: :index do
        get :top, on: :collection
        get :all, on: :collection
      end
      constraints id: Patterns::ROUTE_PATTERN, format: /json|yaml/ do
        get 'owners/:handle/gems',
          to: 'owners#gems',
          as: 'owners_gems',
          constraints: { handle: Patterns::ROUTE_PATTERN },
          format: true

        resources :downloads, only: :show, format: true

        resources :versions, only: :show, format: true do
          member do
            get :reverse_dependencies, format: true
            get 'latest',
              to: 'versions#latest',
              as: 'latest',
              format: true,
              constraints: { format: /json|js/ }
          end

          resources :downloads,
            only: [:index],
            controller: 'versions/downloads',
            format: true do
            collection do
              get :search, format: true
            end
          end
        end
      end

      resources :dependencies,
        only: [:index],
        format: /marshal|json/,
        defaults: { format: 'marshal' }

      # for handling preflight request
      match '/gems/:id' => "rubygems#show", via: :options

      resources :rubygems,
        path: 'gems',
        only: %i[create show index],
        id: Patterns::LAZY_ROUTE_PATTERN,
        format: /json|yaml/ do
        member do
          get :reverse_dependencies
        end
        collection do
          delete :yank, to: "deletions#create"
        end
        constraints rubygem_id: Patterns::ROUTE_PATTERN do
          resource :owners, only: %i[show create destroy]
        end
      end

      resource :activity, only: [], format: /json|yaml/ do
        collection do
          get :latest
          get :just_updated
        end
      end

      resource :search, only: :show

      resources :web_hooks, only: %i[create index] do
        collection do
          delete :remove
          post :fire
        end
      end

      resources :timeframe_versions, only: :index
    end
  end

  get '/versions' => 'api/compact_index#versions'
  get '/info/:gem_name' => 'api/compact_index#info', as: :info,
      constraints: { gem_name: Patterns::ROUTE_PATTERN }
  get '/names' => 'api/compact_index#names'
  ################################################################################
  # API v0

  scope controller: 'api/deprecated', action: 'index' do
    get 'api_key'
    put 'api_key/reset'
    put 'api/v1/gems/unyank'
    put 'api/v1/api_key/reset'

    post 'gems'
    get 'gems/:id.json'

    scope path: 'gems/:rubygem_id' do
      put 'migrate'
      post 'migrate'
    end
  end

  ################################################################################
  # UI
  scope constraints: { format: :html }, defaults: { format: 'html' } do
    resource :search, only: :show do
      get :advanced
    end
    resource :dashboard, only: :show, constraints: { format: /html|atom/ }
    resources :profiles, only: :show
    resource :multifactor_auth, only: %i[new create update]
    resource :settings, only: :edit
    resource :profile, only: %i[edit update] do
      member do
        get :delete
        delete :destroy, as: :destroy
      end

      resources :api_keys do
        delete :reset, on: :collection
      end
    end
    resources :stats, only: :index
    get "/news" => 'news#show', as: 'legacy_news_path'
    resource :news, path: 'releases', only: [:show] do
      get :popular, on: :collection
    end
    resource :notifier, only: %i[update show]

    resources :rubygems,
      only: %i[index show],
      path: 'gems',
      constraints: { id: Patterns::ROUTE_PATTERN, format: /html|atom/ } do
      resource :subscription,
        only: %i[create destroy],
        constraints: { format: :js },
        defaults: { format: :js }
      resources :versions, only: %i[show index] do
        get '/dependencies', to: 'dependencies#show', constraints: { format: /json|html/ }
      end
      resources :reverse_dependencies, only: %i[index]
      resources :owners, only: %i[index destroy create], param: :handle do
        get 'confirm', to: 'owners#confirm', as: :confirm, on: :collection
        get 'resend_confirmation', to: 'owners#resend_confirmation', as: :resend_confirmation, on: :collection
      end
    end

    ################################################################################
    # Clearance Overrides and Additions

    resource :email_confirmations, only: %i[new create] do
      get 'confirm/:token', to: 'email_confirmations#update', as: :update
      patch 'unconfirmed'
    end

    resources :passwords, only: %i[new create]

    resource :session, only: %i[create destroy] do
      post 'mfa_create', to: 'sessions#mfa_create', as: :mfa_create
      get 'verify', to: 'sessions#verify', as: :verify
      post 'authenticate', to: 'sessions#authenticate', as: :authenticate
    end

    resources :users, only: %i[new create] do
      resource :password, only: %i[create edit update] do
        post 'mfa_edit', to: 'passwords#mfa_edit', as: :mfa_edit
      end
    end

    get '/sign_in' => 'clearance/sessions#new', as: 'sign_in'
    delete '/sign_out' => 'clearance/sessions#destroy', as: 'sign_out'

    get '/sign_up' => 'users#new', as: 'sign_up' if Clearance.configuration.allow_sign_up?
  end

  ################################################################################
  # high_voltage static routes
  get 'pages/*id' => 'high_voltage/pages#show', constraints: { id: /(#{HighVoltage.page_ids.join("|")})/ }, as: :page

  ################################################################################
  # Internal Routes

  namespace :internal do
    get 'ping' => 'ping#index'
    get 'revision' => 'ping#revision'
  end

  ################################################################################
  # Incoming Webhook Endpoint
  resources :sendgrid_events, only: :create, format: false, defaults: { format: :json }
end
# frozen_string_literal: true

require 'sidekiq/web'
require 'sidekiq-status/web'
if Octobox.config.sidekiq_schedule_enabled?
  require 'sidekiq-scheduler/web'
end
require 'sidekiq_unique_jobs/web'
require 'admin_constraint'

Rails.application.routes.draw do
  root to: 'notifications#index'

  get '/404', to: 'errors#not_found'
  get '/422', to: 'errors#unprocessable'
  get '/500', to: 'errors#internal'

  constraints AdminConstraint.new do
    namespace :admin do
      mount Sidekiq::Web => "/sidekiq"
    end

    get '/admin', to: 'admin#index', as: :admin
  end

  mount ActionCable.server => '/cable'

  get :login,  to: 'sessions#new'
  get :logout, to: 'sessions#destroy'

  scope :auth do
    match '/:provider/callback', to: 'sessions#create',  via: [:get, :post]
    match :failure,              to: 'sessions#failure', via: [:get, :post]
  end

  resources :notifications, only: :index, format: true, constraints: { format: :json }
  resources :notifications, only: [] do
    collection do
      post :archive_selected
      post :sync
      get  :sync
      get  :syncing
      post :syncing
      post :mute_selected
      post :mark_read_selected
      get  :unread_count
      post :delete_selected
    end

    member do
      get  :show
      post :star
      get  :expand_comments
      post :comment 
    end
  end

  get '/documentation', to: 'pages#documentation'
  get '/support', to: redirect('/documentation#support')

  post '/hooks/github', to: 'hooks#create'

  # Octobox.io specific routes
  get '/opencollective', to: 'open_collective#callback'
  get '/pricing', to: 'pages#pricing'
  get '/privacy', to: 'pages#privacy'
  get '/terms', to: 'pages#terms'

  resources :pinned_searches

  get '/settings', to: 'users#edit'
  get '/export', to: 'users#export'
  post '/import', to: 'users#import'
  resources :users, only: [:update, :destroy] do
    collection do
      scope format: true, constraints: { format: 'json' } do
        get :profile
      end
    end
  end
end
# frozen_string_literal: true

ExceptionTrack::Engine.routes.draw do
  resources :logs, path: "" do
    collection do
      delete :all
      post :export
    end
  end
end
Rails.application.routes.draw do
  if ActiveStorage.respond_to?(:resolve_model_to_route)
    resolve("Spina::Parts::Image") { |image, options| route_for(ActiveStorage.resolve_model_to_route, image, options) }
    resolve("Spina::Parts::ImageVariant") { |image, options| route_for(ActiveStorage.resolve_model_to_route, image, options) }
    resolve("Spina::Parts::Attachment") { |attachment, options| route_for(ActiveStorage.resolve_model_to_route, attachment, options) }
  else
    resolve("Spina::Parts::Image") { |image, options| route_for(:rails_blob, image, options) }
    resolve("Spina::Parts::ImageVariant") { |image, options| route_for(:rails_representation, image, options) }
    resolve("Spina::Parts::Attachment") { |attachment, options| route_for(:rails_blob, attachment, options) }
  end
end

Spina::Engine.routes.draw do

  # Backend
  namespace :admin, path: Spina.config.backend_path do
    root to: "pages#index"

    resource :account do
      member do
        get :style
        get :analytics
        get :social
      end
    end

    get "/settings/:plugin", to: "settings#edit", as: :edit_settings
    patch "/settings/:plugin", to: "settings#update", as: :settings

    resources :users

    # Sessions
    resources :sessions
    get "login" => "sessions#new"
    get "logout" => "sessions#destroy"

    # Passwords
    resources :password_resets

    # Media library
    get 'media_library' => 'images#index', as: "media_library"

    resources :pages do
      get :children, on: :member
      post :sort, on: :collection
    end

    resources :resources, only: [:show, :edit, :update]

    resources :navigations do
      post :sort, on: :member
    end

    resources :attachments do
      collection do
        get 'select/:page_part_id' => 'attachments#select', as: :select
        post 'insert/:page_part_id' => 'attachments#insert', as: :insert
        get 'select_collection/:page_part_id' => 'attachments#select_collection', as: :select_collection
        post 'insert_collection/:page_part_id' => 'attachments#insert_collection', as: :insert_collection
      end
    end

    resources :media_folders

    resources :images do
      collection do
        get 'folder/:id' => 'images#media_folder', as: :media_folder
        put 'folder/:id' => 'images#add_to_media_folder', as: :add_to_media_folder
      end
    end
    get :media_picker, to: 'media_picker#show'
    post :media_picker, to: 'media_picker#select'
  end

  # Sitemap
  resource :sitemap

  # Robots.txt
  get '/robots', to: 'pages#robots', constraints: { format: 'txt' }

  unless Spina.config.disable_frontend_routes
    # Frontend
    root to: "pages#homepage"

    # Pages
    get '/:locale/*id' => 'pages#show', constraints: {locale: /#{Spina.config.locales.join('|')}/ }
    get '/:locale/' => 'pages#homepage', constraints: {locale: /#{Spina.config.locales.join('|')}/ }
    get '/*id' => 'pages#show', as: "page", controller: 'pages', constraints: lambda { |request|
      (!(Rails.env.development? && request.env['PATH_INFO'].starts_with?('/rails/') || request.env['PATH_INFO'].starts_with?("/#{Spina.config.backend_path}") || request.env['PATH_INFO'].starts_with?('/attachments/'))) && request.path.exclude?("rails/active_storage")
    }
  end

end
Trestle::Engine.routes.draw do
  require "sidekiq/web"

  mount Sidekiq::Web => "/sidekiq/web", constraints: Trestle::Auth::Constraint.new
  get "/sidekiq/web", to: redirect("login", status: 302)
end
# -*- encoding : utf-8 -*-
Rails.application.routes.draw do
  # A Note on User Sessions:
  # Blacklight expects the following named routes or at least the associated path helper methods to be defined.
  # new_user_session   (for logging in) - pages that require a log in will redirect users here.
  # destroy_user_session (for logging out)

  # Routes for the Blacklight application are defined in Blacklight::Routes
  #
  # These routes can be injected into your Rails application by adding
  #     Blacklight.add_routes(self)
  # to the application's ./config/routes.rb. The injected routes can be
  # customized as well, e.g.:
  #     Blacklight.add_routes(self, :only => [:bookmarks]) # will only look bookmark routes
  #     Blacklight.add_routes(self, :except => [:catalog]) # will not load catalog routes
end

Hello::Application.routes.draw do
  # The priority is based upon order of creation:
  # first created -> highest priority.

  # Sample of regular route:
  #   match 'products/:id' => 'catalog#view'
  # Keep in mind you can assign values other than :controller and :action

  # Sample of named route:
  #   match 'products/:id/purchase' => 'catalog#purchase', :as => :purchase
  # This route can be invoked with purchase_url(:id => product.id)

  # Sample resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Sample resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Sample resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Sample resource route with more complex sub-resources
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', :on => :collection
  #     end
  #   end

  # Sample resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end

  # You can have the root of your site routed with "root"
  # just remember to delete public/index.html.
  # root :to => 'welcome#index'

  # See how all your routes lay out with "rake routes"

  # This is a legacy wild controller route that's not recommended for RESTful applications.
  # Note: This route will make all actions in every controller accessible via GET requests.
  # match ':controller(/:action(/:id(.:format)))'
end
Rails.application.routes.draw do
  mount GraphiQL::Rails::Engine, at: "/graphiql", graphql_path: "/queries"
  root to: redirect("/graphiql")
  resources :queries
  resource :sha, only: :show
end
Spina::Engine.routes.draw do
  namespace :jobs, path: '' do
    resources :job_roles, path: :jobs, only: [:index, :show] do
      resources :job_applications, path: :applications, only: [:new, :create]
      get :apply, to: 'job_applications#new'
      get '/applications/thanks', to: 'job_applications#thanks', on: :collection
    end
  end

  namespace :admin do
    namespace :jobs do
      resources :job_roles, path: :roles, except: :show do
        resources :job_applications, path: :applications, only: [:index, :show, :destroy], shallow: true
      end
      resources :job_applications, path: :applications, only: :index
    end
  end
end
Plutus::Engine.routes.draw do
  root :to => 'reports#balance_sheet'

  get 'reports/balance_sheet' => 'reports#balance_sheet'
  get 'reports/income_statement' => 'reports#income_statement'

  resources :accounts, only: [:index]
  resources :entries, only: [:index]
end
Rails.application.routes.draw do

  # get 'reviews/show'
  # get 'reviews/index'
  # get 'reviews/new'
  # get 'reviews/edit'
  # get 'reviews/delete'
  # get 'stays/create'
  # get 'houses/index'
  # get 'houses/create'
  # get 'houses/new'
  # get 'houses/edit'
  # get 'houses/show'
  # get 'houses/update'
  # get 'houses/destroy'
  # get 'attractions/index'
  # get 'attractions/create'
  # get 'attractions/new'
  # get 'attractions/edit'
  # get 'attractions/show'
  # get 'attractions/update'
  # get 'attractions/destroy'
  get 'sessions/new'
  get 'welcome/home'
  # get 'users/new'

  root 'welcome#home'

  resources :users
  resources :houses

  resources :users, only: [:show, :index] do
    resources :reviews, only: [:show, :index]
  end

  resources :houses, only: [:show, :index] do
    resources :reviews, only: [:show, :index, :new, :create]
  end

  resources :users
  resources :houses
  resources :reviews, only: [:show]
  resources :stays, only: [:create]

  get '/signup', to: "users#new"
  get '/signin', to: "sessions#new"
  post '/signin', to: "sessions#create"
  get '/logout', to: "sessions#destroy"
  post '/users/:id', to: "users#update"
  get '/auth/facebook/callback' => 'sessions#create'

end
WeeklySchedule::Application.routes.draw do
  mount API => '/'

  resources :dashboards
  resources :experiences
  resources :skills
  resources :reports, only: [:index]
  resources :doc_auths
  resources :week_hours
  resources :raw_items, only: [:index, :destroy]
  resources :projects
  resources :leave_requests

  resources :schedules do
    collection do
      get :load_from_google
      get :batch_create
      get :check_sending_status
      get :check_importing_status
      get :weekly_send_mails
    end
  end

  resources :users do
    member do
      get :skills
    end
  end

  resources :groups

  resources :settings, :only => :index

  match 'setup', :to => 'settings#setup', :via => [:get, :post]
  get 'switch_mode', :to => 'settings#mode'
  get 'switch_user', :to => 'settings#user'

  namespace :settings do
    get 'mail_settings/edit', to: 'mail_settings#edit',   as: :edit_mail_settings
    put 'mail_settings',      to: 'mail_settings#update', as: :update_mail_settings

    put 'auto_mail/:auto_mail', to: 'mail_settings#update_auto_mail', as: :update_auto_mail

    get 'harvest/edit',          to: 'harvest#edit',          as: :edit_harvest
    put 'harvest',               to: 'harvest#update',        as: :update_harvest
    get 'harvest/refresh_token', to: 'harvest#refresh_token', as: :refresh_harvest_token

    get 'confluence/edit',          to: 'confluence#edit',          as: :edit_confluence
    put 'confluence',               to: 'confluence#update',        as: :update_confluence

    get 'google/edit',          to: 'google#edit',          as: :edit_google
    put 'google',               to: 'google#update',        as: :update_google

    get 'app_settings/edit',          to: 'app_settings#edit',          as: :edit_app_settings
    put 'app_settings',               to: 'app_settings#update',        as: :update_app_settings
  end

  root :to => 'dashboards#index'

  match '/auth/harvest/callback' => 'settings/harvest#refresh_token'
  match '/auth/:provider/callback' => 'sessions#create'
  match '/signin' => 'sessions#new', :as => :signin
  match '/signout' => 'sessions#destroy', :as => :signout
  match '/auth/failure' => 'sessions#failure'

end
Rails.application.routes.draw do
  root to: 'foos#index'
end
Rails.application.routes.draw do
  root "dashboard#dashboard"

  resources :short_url_requests do
    member do
      post "accept" => "short_url_requests#accept"
      get "new_rejection" => "short_url_requests#new_rejection"
      post "reject" => "short_url_requests#reject"
    end
  end
  get "list_short_urls" => "short_url_requests#list_short_urls"

  get "/healthcheck", to: GovukHealthcheck.rack_response(
    GovukHealthcheck::Mongoid,
    GovukHealthcheck::SidekiqRedis,
  )

  if Rails.env.development?
    get "/styleguide" => "govuk_admin_template/style_guide#index"
  end
end
Rails.application.routes.draw do
  resources :users
  root to: 'visitors#index'
  get '/auth/:provider/callback' => 'sessions#create'
  get '/signin' => 'sessions#new', :as => :signin
  get '/signout' => 'sessions#destroy', :as => :signout
  get '/auth/failure' => 'sessions#failure'
end
# frozen_string_literal: true

Spree::Core::Engine.routes.draw do
  if SolidusSupport.frontend_available? && Spree::Auth::Config.draw_frontend_routes
    devise_for(:spree_user, {
      class_name: 'Spree::User',
      controllers: {
        sessions: 'spree/user_sessions',
        registrations: 'spree/user_registrations',
        passwords: 'spree/user_passwords',
        confirmations: 'spree/user_confirmations'
      },
      skip: [:unlocks, :omniauth_callbacks],
      path_names: { sign_out: 'logout' },
      path_prefix: :user,
      router_name: :spree
    })

    resources :users, only: [:edit, :update]

    devise_scope :spree_user do
      get '/login', to: 'user_sessions#new', as: :login
      post '/login', to: 'user_sessions#create', as: :create_new_session
      match '/logout', to: 'user_sessions#destroy', as: :logout, via: Devise.sign_out_via
      get '/signup', to: 'user_registrations#new', as: :signup
      post '/signup', to: 'user_registrations#create', as: :registration
      get '/password/recover', to: 'user_passwords#new', as: :recover_password
      post '/password/recover', to: 'user_passwords#create', as: :reset_password
      get '/password/change', to: 'user_passwords#edit', as: :edit_password
      put '/password/change', to: 'user_passwords#update', as: :update_password
      get '/confirm', to: 'user_confirmations#show', as: :confirmation if Spree::Auth::Config[:confirmable]
    end

    get '/checkout/registration', to: 'checkout#registration', as: :checkout_registration
    put '/checkout/registration', to: 'checkout#update_registration', as: :update_checkout_registration

    resource :account, controller: 'users'
  end

  if SolidusSupport.backend_available? && Spree::Auth::Config.draw_backend_routes
    namespace :admin do
      devise_for(:spree_user, {
        class_name: 'Spree::User',
        singular: :spree_user,
        skip: :all,
        path_names: { sign_out: 'logout' },
        controllers: {
          sessions: 'spree/admin/user_sessions',
          passwords: 'spree/admin/user_passwords'
        },
        router_name: :spree
      })

      devise_scope :spree_user do
        get '/authorization_failure', to: 'user_sessions#authorization_failure', as: :unauthorized
        get '/login', to: 'user_sessions#new', as: :login
        post '/login', to: 'user_sessions#create', as: :create_new_session
        match '/logout', to: 'user_sessions#destroy', as: :logout, via: Devise.sign_out_via

        get '/password/recover', to: 'user_passwords#new', as: :recover_password
        post '/password/recover', to: 'user_passwords#create', as: :reset_password
        get '/password/change', to: 'user_passwords#edit', as: :edit_password
        put '/password/change', to: 'user_passwords#update', as: :update_password
      end
    end
  end
end
Example::Application.routes.draw do

  match 'users/random' => 'users/random#create', :controller => "users/random", :as => "users_random", :via => [:get, :post]

  mount_opro_oauth :controllers => {:oauth_client_apps => 'oauth/client_apps'}

  resources :products

  devise_for  :users

  root        :to => "pages#index"

  resources   :users

  resources :oauth_walkthrough

  # The priority is based upon order of creation:
  # first created -> highest priority.

  # Sample of regular route:
  #   match 'products/:id' => 'catalog#view'
  # Keep in mind you can assign values other than :controller and :action

  # Sample of named route:
  #   match 'products/:id/purchase' => 'catalog#purchase', :as => :purchase
  # This route can be invoked with purchase_url(:id => product.id)

  # Sample resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Sample resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Sample resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Sample resource route with more complex sub-resources
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', :on => :collection
  #     end
  #   end

  # Sample resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end

  # You can have the root of your site routed with "root"
  # just remember to delete public/index.html.
  # root :to => 'welcome#index'

  # See how all your routes lay out with "rake routes"

  # This is a legacy wild controller route that's not recommended for RESTful applications.
  # Note: This route will make all actions in every controller accessible via GET requests.
  # match ':controller(/:action(/:id))(.:format)'

end
Rails.application.routes.draw do
  root 'welcome#index'
  
  post 'auth/login', to: 'authentication#authenticate'
  post 'signup', to: 'users#create'

  resources :documents
  get 'documents/file/:id', to: 'documents#download'
  resources :folders
  get 'folders-all', to: 'folders#all' 
  resources :states
  resources :people
  resources :tags

  get 'search/suggestions/:text', to: 'search#suggestions'
end
# frozen_string_literal: true

Spree::Core::Engine.routes.draw do
  root to: 'home#index'

  resources :products, only: [:index, :show]

  get '/locale/set', to: 'locale#set'
  post '/locale/set', to: 'locale#set', as: :select_locale

  # non-restful checkout stuff
  patch '/checkout/update/:state', to: 'checkout#update', as: :update_checkout
  get '/checkout/:state', to: 'checkout#edit', as: :checkout_state
  get '/checkout', to: 'checkout#edit', as: :checkout

  get '/orders/populate', to: 'orders#populate_redirect'
  get '/orders/:id/token/:token' => 'orders#show', as: :token_order

  resources :orders, except: [:index, :new, :create, :destroy] do
    post :populate, on: :collection
    resources :coupon_codes, only: :create
  end

  get '/cart', to: 'orders#edit', as: :cart
  patch '/cart', to: 'orders#update', as: :update_cart
  put '/cart/empty', to: 'orders#empty', as: :empty_cart

  # route globbing for pretty nested taxon and product paths
  get '/t/*id', to: 'taxons#show', as: :nested_taxons

  get '/unauthorized', to: 'home#unauthorized', as: :unauthorized
  get '/content/cvv', to: 'content#cvv', as: :cvv
  get '/cart_link', to: 'store#cart_link', as: :cart_link
end
Rails.application.routes.draw do
  get("/",        { :controller => "fortunes", :action => "lucky" })

  get("/lucky_numbers",   { :controller => "fortunes", :action => "lucky" })
  get("/unlucky_numbers", { :controller => "fortunes", :action => "unlucky" })


  get("/random/:min/:max", { :controller => "fortunes", :action => "within_range" })


  get("/zodiacs/new", { :controller => "zodiacs", :action => "new_form" })
  get("/create_zodiac", { :controller => "zodiacs", :action => "create_row" })

  get("/zodiacs", { :controller => "zodiacs", :action => "index" })
  get("/delete_zodiac/:the_id", { :controller => "zodiacs", :action => "destroy_row" })



  # VARIABLE ROUTES
  # =======================

  get("/signs/:the_sign",         { :controller => "zodiacs", :action => "sign" })
  get("/creatures/:the_creature", { :controller => "zodiacs", :action => "creature" })
  get("/zodiacs/:the_id",         { :controller => "zodiacs", :action => "show" })
end
FirstApp::Application.routes.draw do
  # The priority is based upon order of creation: first created -> highest priority.
  # See how all your routes lay out with "rake routes".

  # You can have the root of your site routed with "root"
  # root 'welcome#index'

  # Example of regular route:
  #   get 'products/:id' => 'catalog#view'

  # Example of named route that can be invoked with purchase_url(id: product.id)
  #   get 'products/:id/purchase' => 'catalog#purchase', as: :purchase

  # Example resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Example resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Example resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Example resource route with more complex sub-resources:
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', on: :collection
  #     end
  #   end

  # Example resource route with concerns:
  #   concern :toggleable do
  #     post 'toggle'
  #   end
  #   resources :posts, concerns: :toggleable
  #   resources :photos, concerns: :toggleable

  # Example resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end
end
# frozen_string_literal: true

# BigBlueButton open source conferencing system - http://www.bigbluebutton.org/.
#
# Copyright (c) 2018 BigBlueButton Inc. and by respective authors (see below).
#
# This program is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free Software
# Foundation; either version 3.0 of the License, or (at your option) any later
# version.
#
# BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License along
# with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

Rails.application.routes.draw do
  get '/health_check', to: 'health_check#all'

  # Error routes.
  match '/401', to: 'errors#unauthorized', via: :all, as: :unauthorized
  match '/404', to: 'errors#not_found', via: :all, as: :not_found
  match '/500', to: 'errors#internal_error', via: :all, as: :internal_error

  # Signin/Signup routes.
  get '/signin', to: 'sessions#signin', as: :signin
  get '/signup', to: 'sessions#new', as: :signup
  post '/signup', to: 'users#create', as: :create_user
  get '/ldap_signin', to: 'sessions#ldap_signin', as: :ldap_signin

  # Redirect to terms page
  match '/terms', to: 'users#terms', via: [:get, :post]

  # Admin resouces
  resources :admins, only: [:index]

  scope '/admins' do
    # Panel Tabs
    get '/rooms', to: 'admins#server_rooms', as: :admin_rooms
    get '/recordings', to: 'admins#server_recordings', as: :admin_recordings
    get '/site_settings', to: 'admins#site_settings', as: :admin_site_settings
    get '/room_configuration', to: 'admins#room_configuration', as: :admin_room_configuration
    get '/roles', to: 'admins#roles', as: :admin_roles
    # Manage Users
    get '/edit/:user_uid', to: 'admins#edit_user', as: :admin_edit_user
    post '/ban/:user_uid', to: 'admins#ban_user', as: :admin_ban
    post '/unban/:user_uid', to: 'admins#unban_user', as: :admin_unban
    post '/invite', to: 'admins#invite', as: :invite_user
    post '/approve/:user_uid', to: 'admins#approve', as: :admin_approve
    get '/reset', to: 'admins#reset', as: :admin_reset
    post '/undelete', to: 'admins#undelete', as: :admin_undelete
    post '/merge/:user_uid', to: 'admins#merge_user', as: :merge_user
    get '/merge_list', to: 'admins#merge_list', as: :merge_list
    # Site Settings
    post '/update_settings', to: 'admins#update_settings', as: :admin_update_settings
    post '/registration_method', to: 'admins#registration_method', as: :admin_change_registration
    post '/coloring', to: 'admins#coloring', as: :admin_coloring
    post '/clear_cache', to: 'admins#clear_cache', as: :admin_clear_cache
    post '/clear_auth', to: 'admins#clear_auth', as: :admin_clear_auth
    post '/log_level', to: 'admins#log_level', as: :admin_log_level
    # Room Configuration
    post '/update_room_configuration', to: 'admins#update_room_configuration', as: :admin_update_room_configuration
    # Roles
    post '/role', to: 'admins#new_role', as: :admin_new_role
    patch 'roles/order', to: 'admins#change_role_order', as: :admin_roles_order
    post '/role/:role_id', to: 'admins#update_role', as: :admin_update_role
    delete 'role/:role_id', to: 'admins#delete_role', as: :admin_delete_role
  end

  scope '/themes' do
    get '/primary', to: 'themes#index', as: :themes_primary
  end

  # Password reset resources.
  resources :password_resets, only: [:new, :create, :edit, :update]

  # Account activation resources
  scope '/account_activations' do
    get '/', to: 'account_activations#show', as: :account_activation
    get '/edit', to: 'account_activations#edit', as: :edit_account_activation
    post '/resend', to: 'account_activations#resend', as: :resend_email
  end

  # User resources.
  scope '/u' do
    # Handles login of greenlight provider accounts.
    post '/login', to: 'sessions#create', as: :create_session

    # Log the user out of the session.
    post '/logout', to: 'sessions#destroy'

    # Account management.
    get '/:user_uid/edit', to: 'users#edit', as: :edit_user
    get '/:user_uid/change_password', to: 'users#change_password', as: :change_password
    get '/:user_uid/delete_account', to: 'users#delete_account', as: :delete_account
    post '/:user_uid/edit', to: 'users#update', as: :update_user
    post '/:user_uid/change_password', to: 'users#update_password', as: :update_password
    delete '/:user_uid', to: 'users#destroy', as: :delete_user

    # All user recordings
    get '/:user_uid/recordings', to: 'users#recordings', as: :get_user_recordings
  end

  # Handles Omniauth authentication.
  match '/auth/:provider/callback', to: 'sessions#omniauth', via: [:get, :post], as: :omniauth_session
  get '/auth/failure', to: 'sessions#omniauth_fail'
  post '/auth/ldap', to: 'sessions#ldap', as: :ldap_callback

  # Users who can't create rooms
  get '/rooms', to: 'rooms#cant_create_rooms', as: :cant_create_rooms

  # Returns a list of users for the shared access list
  get '/shared_access_list', to: 'users#shared_access_list'

  # Room resources.
  resources :rooms, only: [:create, :show, :destroy], param: :room_uid, path: '/'

  # Join a room by UID
  post '/room/join', to: 'rooms#join_specific_room', as: :join_room

  # Extended room routes.
  scope '/:room_uid' do
    post '/', to: 'rooms#join'
    patch '/', to: 'rooms#update', as: :update_room
    get '/room_settings', to: 'rooms#room_settings'
    post '/update_settings', to: 'rooms#update_settings'
    get '/current_presentation', to: 'rooms#current_presentation'
    post '/preupload_presentation', to: 'rooms#preupload_presentation'
    post '/remove_presentation', to: 'rooms#remove_presentation'
    post '/update_shared_access', to: 'rooms#shared_access', as: :room_shared_access
    delete '/remove_shared_access', to: 'rooms#remove_shared_access', as: :room_remove_shared_access
    get '/shared_users', to: 'rooms#shared_users', as: :room_shared_users
    post '/start', to: 'rooms#start', as: :start_room
    get '/logout', to: 'rooms#logout', as: :logout_room
    post '/login', to: 'rooms#login', as: :login_room
  end

  # Recording operations routes
  scope '/:meetingID' do
    # Manage recordings
    scope '/:record_id' do
      post '/', to: 'recordings#update', as: :update_recording
      patch '/', to: 'recordings#rename', as: :rename_recording
      delete '/', to: 'recordings#delete', as: :delete_recording
    end
  end

  root to: 'main#index'
end
Rails.application.routes.draw do
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
end
if OnpayRails.config.use_routes
  Rails.application.routes.draw do

    get '/onpay'      => 'onpay_rails/base#index'
    get '/onpay/api'  => 'onpay_rails/base#api'

    # get '/onpay/check'  => 'onpay_rails/base#check'
    # get '/onpay/pay'   => 'onpay_rails/base#pay'

  end
end
Rails.application.routes.draw do
  post '/graphql', to: 'graphql#execute'

  if Rails.env.development?
    mount GraphiQL::Rails::Engine, at: '/graphiql', graphql_path: '/graphql'

    root to: redirect('/graphiql')
  end
end
# Copyright 2019 Google, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

Rails.application.routes.draw do
  get "/", to: "votes#index"
  post "/", to: "votes#create"
end
Rails.application.routes.draw do
  root to: 'application#index'
  resources :docs, only: [:show]
  resources :smokes, only: [:index] do
    collection do
      post   'login'
      delete 'logout'
      get    'cache'
      get    'exception'
      get    'image'
    end
  end
end
CASinoApp::Application.routes.draw do
  mount CASino::Engine => '/', :as => 'CASino'

  # The priority is based upon order of creation:
  # first created -> highest priority.

  # Sample of regular route:
  #   match 'products/:id' => 'catalog#view'
  # Keep in mind you can assign values other than :controller and :action

  # Sample of named route:
  #   match 'products/:id/purchase' => 'catalog#purchase', :as => :purchase
  # This route can be invoked with purchase_url(:id => product.id)

  # Sample resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Sample resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Sample resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Sample resource route with more complex sub-resources
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', :on => :collection
  #     end
  #   end

  # Sample resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end

  # You can have the root of your site routed with "root"
  # just remember to delete public/index.html.
  # root :to => 'welcome#index'

  # See how all your routes lay out with "rake routes"

  # This is a legacy wild controller route that's not recommended for RESTful applications.
  # Note: This route will make all actions in every controller accessible via GET requests.
  # match ':controller(/:action(/:id))(.:format)'
end
Spree::Core::Engine.add_routes do
  devise_for :spree_user,
             class_name: Spree.user_class.to_s,
             controllers: { sessions: 'spree/user_sessions',
                               registrations: 'spree/user_registrations',
                               passwords: 'spree/user_passwords',
                               confirmations: 'spree/user_confirmations' },
             skip: [:unlocks, :omniauth_callbacks],
             path_names: { sign_out: 'logout' },
             path_prefix: :user

  resources :users, only: [:edit, :update]

  devise_scope :spree_user do
    get '/login' => 'user_sessions#new', :as => :login
    post '/login' => 'user_sessions#create', :as => :create_new_session
    get '/logout' => 'user_sessions#destroy', :as => :logout
    get '/signup' => 'user_registrations#new', :as => :signup
    post '/signup' => 'user_registrations#create', :as => :registration
    get '/password/recover' => 'user_passwords#new', :as => :recover_password
    post '/password/recover' => 'user_passwords#create', :as => :reset_password
    get '/password/change' => 'user_passwords#edit', :as => :edit_password
    put '/password/change' => 'user_passwords#update', :as => :update_password
    get '/confirm' => 'user_confirmations#show', :as => :confirmation
  end

  get '/checkout/registration' => 'checkout#registration', :as => :checkout_registration
  put '/checkout/registration' => 'checkout#update_registration', :as => :update_checkout_registration

  resource :account, controller: 'users'

  namespace :admin, path: Spree.admin_path do
    devise_for :spree_user,
               class_name: Spree.user_class.to_s,
               controllers: { sessions: 'spree/admin/user_sessions',
                                 passwords: 'spree/admin/user_passwords' },
               skip: [:unlocks, :omniauth_callbacks, :registrations],
               path_names: { sign_out: 'logout' },
               path_prefix: :user
    devise_scope :spree_user do
      get '/authorization_failure', to: 'user_sessions#authorization_failure', as: :unauthorized
      get '/login' => 'user_sessions#new', :as => :login
      post '/login' => 'user_sessions#create', :as => :create_new_session
      get '/logout' => 'user_sessions#destroy', :as => :logout
      get '/password/recover' => 'user_passwords#new', :as => :recover_password
      post '/password/recover' => 'user_passwords#create', :as => :reset_password
    end
  end

  namespace :api, defaults: { format: 'json' } do
    namespace :v2 do
      namespace :storefront do
        resource :account, controller: :account, only: %i[show create update]
        resources :account_confirmations, only: %i[show]
        resources :passwords, controller: :passwords, only: %i[create update]
      end
    end
  end
end
Refinery::Core::Engine.routes.draw do
  get '/system/images/*dragonfly', to: Dragonfly.app(:refinery_images)

  namespace :admin, path: Refinery::Core.backend_route do
    resources :images, except: :show do
      get :insert, on: :collection
      patch :crop
      match 'crop', to: 'images#destroy_crop', via: :delete
    end
  end
end
Rails.application.routes.draw do
  root 'pages#home'

  scope(controller: :registration) do
    post 'register', action: :register, as: :registration
  end

  scope(controller: :assignments) do
    get 'assignments/by_lti_id/:lti_assignment_id', action: :show_by_lti_id
    post 'assignments/configure', action: :configure, as: :assignment_configuration
    post 'assignments/:lti_assignment_id/update', action: :update, as: :assignment_update
  end

  scope(controller: :tool_proxy) do
    get 'tool_proxy/obtain_guid/:proxy_id', action: :show_guid_by_id
    get 'tool_proxy/obtain_guid/assignment/:assignment_tc_id', action: :show_guid_by_assignment_tc_id
  end

  scope(controller: :submissions) do
    get 'tool_proxy/:tool_proxy_guid/submissions/:tc_submission_id/retrieve',
        action: :retrieve_and_store, as: :submission_retrival
    get 'submission/by_tc_id/:tc_submission_id', action: :show_by_tc_id
    post 'submission/index', action: :index
  end

  scope(controller: :originality_reports) do
    post 'assignments/:assignment_tc_id/submissions/:submission_tc_id/originality_report',
         action: :create, as: :originality_create
    put 'assignments/:assignment_tc_id/submissions/:submission_tc_id/originality_report/:or_tc_id',
         action: :update, as: :originality_update
  end

  namespace :event do
    post :submission
  end
end
# frozen_string_literal: true

Thredded::Engine.routes.draw do # rubocop:disable Metrics/BlockLength
  resource :theme_preview, only: [:show], path: 'theme-preview' if %w[development test].include? Rails.env

  page_constraint = { page: /[1-9]\d*/ }

  scope path: 'private-topics' do
    resource :read_state, only: [:update], as: :mark_all_private_topics_read
    resource :private_topic, only: [:new], path: '' do
      post :preview, on: :new, controller: 'private_topic_previews'
    end
    resources :private_topics, except: %i[new show], path: '' do
      member do
        get '(page-:page)', action: :show, as: '', constraints: page_constraint
      end
      resources :private_posts, path: '', except: %i[index show] do
        post :preview, on: :new, controller: 'private_post_previews'
        resource :preview, only: [:update], controller: 'private_post_previews'
        member do
          get 'quote'
        end
      end
    end
  end

  scope only: [:show], constraints: { id: Thredded.routes_id_constraint } do
    resources :private_post_permalinks, path: 'private-posts'
    resources :post_permalinks, path: 'posts'
  end

  resources :autocomplete_users, only: [:index], path: 'autocomplete-users'

  constraints(->(req) { req.env['QUERY_STRING'].include? 'q=' }) do
    get '/' => 'topics#search', as: :messageboards_search
    get '/:messageboard_id(.:format)' => 'topics#search', as: :messageboard_search
  end

  scope path: 'admin' do
    resources :messageboard_groups, only: %i[new create]
    scope controller: :moderation, path: 'moderation' do
      scope constraints: page_constraint do
        get '(/page-:page)', action: :pending, as: :pending_moderation
        get '/history(/page-:page)', action: :history, as: :moderation_history
        get '/users(/page-:page)', action: :users, as: :users_moderation
        get '/users/:id(/page-:page)', action: :user, as: :user_moderation
        get '/activity(/page-:page)', action: :activity, as: :moderation_activity
      end
      post '', action: :moderate_post, as: :moderate_post
      post '/user/:id', action: :moderate_user, as: :moderate_user
    end
  end

  resources :topics, path: '', only: [] do
    collection do
      get '/unread', action: :unread, as: :unread
    end
  end

  resource :preferences, only: %i[edit update], as: :global_preferences
  resource :messageboard, path: 'messageboards', only: [:new]
  get '/messageboard-groups/:id', action: :show, controller: 'messageboard_groups', as: :show_messageboard_group
  resources :messageboards, only: %i[edit update destroy]
  resources :messageboards, only: %i[index create], path: '' do
    resource :preferences, only: %i[edit update]
    resource :topic, path: 'topics', only: [:new] do
      post :preview, on: :new, controller: 'topic_previews'
    end
    resources :topics, path: '', except: %i[index new show] do
      collection do
        get '(page-:page)', action: :index, as: '', constraints: page_constraint
        get '/category/:category_id', action: :category, as: :categories
        get '/unread', action: :unread, as: :unread
      end
      member do
        get '(page-:page)', action: :show, as: '', constraints: page_constraint

        # match (un)follow via get as well so that redirecting back to it after sign in works.
        match 'follow', via: %i[post get]
        match 'unfollow', via: %i[post get]
      end
      resources :posts, except: %i[index show], path: '' do
        post :preview, on: :new, controller: 'post_previews'
        resource :preview, only: [:update], controller: 'post_previews'
        member do
          get 'quote'
        end
      end
    end
  end

  scope path: 'action' do
    # flat urls under here for anything which is non-visible to users & search engines (typically json actions)
    resources :posts, only: %i[] do
      member do
        post 'mark_as_read'
        post 'mark_as_unread'
      end
    end

    resources :private_posts, only: %i[] do
      member do
        post 'mark_as_read'
        post 'mark_as_unread'
      end
    end
  end

  root to: 'messageboards#index'
end
C2::Application.routes.draw do
  use_doorkeeper do
    controllers applications: "oauth/applications"
  end

  ActiveAdmin.routes(self)
  root to: "home#index"
  get "/error" => "home#error"
  get "/profile" => "profile#show"
  get "/beta" => "profile#beta"
  post "/profile" => "profile#update"
  get "/summary" => "summary#index"
  get "/summary/:fiscal_year" => "summary#index"
  get "/feedback" => "feedback#index"
  get "/feedback/thanks" => "feedback#thanks"
  post "/feedback" => "feedback#create"
  get "/activity-feed/:proposal_id/update_feed" => "comments#update_feed"
  get "/approval-feed/:id/update_approvals" => "proposals#update_approvals_card"

  match "/auth/:provider/callback" => "auth#oauth_callback", via: [:get]
  get "/auth/failure" => "auth#failure"
  post "/logout" => "auth#logout"
  patch "/users/update_list_view_config" => "users#update_list_view_config"
  resources :users, only: [:update]

  resources :help, only: [:index, :show]

  # mandrill-rails
  resource :inbox, controller: "inbox", only: [:show, :create]

  if AppConfigCredentials.api_enabled == "true"
    namespace :api do
      namespace :v2 do
        resources :proposals
      end
    end
  end

  resources :proposals, only: [:index, :show] do
    member do
      get "approve"   # this route has special protection to prevent the confused deputy problem
      get "complete"  # if you are adding a new controller which performs an action, use post instead
      post "complete"
      post "approve"

      get "cancel_form"
      post "cancel"
      get "history"
    end

    collection do
      get "archive"
      get "download", defaults: { format: "csv" }
      get "query"
      get "query_count"
    end

    resources :comments, only: :create
    resources :attachments, only: [:create, :destroy, :show]
    resources :observations, only: [:create, :destroy]
  end

  resources :reports, only: [:index, :show, :create, :destroy] do
    member do
      post :preview
    end
  end
  resources :scheduled_reports, only: [:create, :update]

  namespace :ncr do
    resources :work_orders, except: [:index, :destroy]
    get "/dashboard" => "dashboard#index"
  end

  namespace :gsa18f do
    resources :procurements, except: [:index, :destroy]
    resources :events, except: [:index, :destroy]
    get "/dashboard" => "dashboard#index"
  end

  mount Peek::Railtie => "/peek"
  if Rails.env.development?
    mount LetterOpenerWeb::Engine => "letter_opener"
    mount Konacha::Engine, at: "konacha" if defined?(Konacha)
    mount Blazer::Engine, at: "blazer"
  end
end
Rails.application.routes.draw do
  concern :active_scaffold, ActiveScaffold::Routing::Basic.new(association: true)
  concern :active_scaffold_association, ActiveScaffold::Routing::Association.new

  resources :addresses, concerns: :active_scaffold
  resources :buildings, except: :index do
    concerns :active_scaffold, except: %i[mark add_existing new_existing destroy_existing]
  end
  resources :cars, only: %i[index edit update] do
    concerns :active_scaffold, association: false, except: [:mark]
  end
  resources :people do
    concerns :active_scaffold, except: %i[mark]
  end

  match ':controller(/:action(/:id))', :via => :any
end
# rubocop:disable Metrics/BlockLength

Rails.application.routes.draw do
  use_doorkeeper do
    controllers tokens: "oauth/tokens"
  end

  # Devise does not support scoping omniauth callbacks under a dynamic segment
  # so this lives outside our i18n scope.
  devise_for :users, controllers: {
    omniauth_callbacks: "omniauth_callbacks",
    registrations: "registrations",
    invitations: "invitations",
    passwords: "passwords",
    confirmations: "confirmations"
  }

  devise_scope :user do
    get "/enter", to: "registrations#new", as: :sign_up
    get "/confirm-email", to: "confirmations#new"
    delete "/sign_out", to: "devise/sessions#destroy"
  end

  # [@forem/delightful] - all routes are nested under this optional scope to
  # begin supporting i18n.
  scope "(/locale/:locale)", defaults: { locale: nil } do
    get "/locale/:locale", to: "stories#index"
    require "sidekiq/web"
    require "sidekiq_unique_jobs/web"
    require "sidekiq/cron/web"

    authenticated :user, ->(user) { user.tech_admin? } do
      Sidekiq::Web.class_eval do
        use Rack::Protection, permitted_origins: [URL.url] # resolve Rack Protection HttpOrigin
      end
      mount Sidekiq::Web => "/sidekiq"
      mount FieldTest::Engine, at: "abtests"
    end

    namespace :admin do
      get "/", to: "overview#index"

      authenticate :user, ->(user) { user.tech_admin? } do
        mount Blazer::Engine, at: "blazer"

        flipper_ui = Flipper::UI.app(Flipper,
                                     { rack_protection: { except: %i[authenticity_token form_token json_csrf
                                                                     remote_token http_origin session_hijacking] } })
        mount flipper_ui, at: "feature_flags"
      end
      resources :feedback_messages, only: %i[index show]
      resources :invitations, only: %i[index new create destroy]
      resources :organization_memberships, only: %i[update destroy create]
      resources :permissions, only: %i[index]
      resources :reactions, only: [:update]
      namespace :users do
        resources :gdpr_delete_requests, only: %i[index destroy]
      end
      resources :users, only: %i[index show edit update destroy] do
        resources :email_messages, only: :show
        member do
          post "banish"
          post "export_data"
          post "full_delete"
          patch "user_status"
          post "merge"
          delete "remove_identity"
          post "send_email"
          post "verify_email_ownership"
          patch "unlock_access"
        end
      end

      # These redirects serve as a safeguard to prevent 404s for any Admins
      # who have the old badge_achievement URLs bookmarked.
      get "/badges/badge_achievements", to: redirect("/admin/badge_achievements")
      get "/badges/badge_achievements/award_badges", to: redirect("/admin/badge_achievements/award_badges")

      # NOTE: @ridhwana These routes below will be deleted once we remove the
      # admin_restructure feature flag, hence they've been regrouped in this manner.
      resources :articles, only: %i[index show update]
      resources :badges, only: %i[index edit update new create]
      resources :badge_achievements, only: %i[index destroy]
      get "/badge_achievements/award_badges", to: "badge_achievements#award"
      post "/badge_achievements/award_badges", to: "badge_achievements#award_badges"
      resources :broadcasts
      resources :chat_channels, only: %i[index create update destroy] do
        member do
          delete :remove_user
        end
      end
      resources :comments, only: [:index]
      resource :config
      resources :display_ads, only: %i[index edit update new create destroy]
      resources :events, only: %i[index create update new edit]
      resources :html_variants, only: %i[index edit update new create show destroy]
      resources :listings, only: %i[index edit update destroy]
      resources :listing_categories, only: %i[index edit update new create
                                              destroy], path: "listings/categories"
      resources :navigation_links, only: %i[index update create destroy]
      resources :organizations, only: %i[index show] do
        member do
          patch "update_org_credits"
        end
      end
      resources :pages, only: %i[index new create edit update destroy]
      resources :podcasts, only: %i[index edit update destroy] do
        member do
          post :fetch
          post :add_owner
        end
      end
      resources :mods, only: %i[index update]
      resources :moderator_actions, only: %i[index]
      resources :navigation_links, only: %i[index update create destroy]
      resources :privileged_reactions, only: %i[index]
      resources :reports, only: %i[index show], controller: "feedback_messages" do
        collection do
          post "send_email"
          post "create_note"
          post "save_status"
        end
      end
      resources :response_templates, only: %i[index new edit create update destroy]
      resources :secrets, only: %i[index]
      put "secrets", to: "secrets#update"
      resources :sponsorships, only: %i[index edit update new create destroy]

      resources :tags, only: %i[index new create update edit] do
        resource :moderator, only: %i[create destroy], module: "tags"
      end
      resources :tools, only: %i[index create] do
        collection do
          post "bust_cache"
        end
      end
      resources :webhook_endpoints, only: :index
      resources :welcome, only: %i[index create]

      # We do not expose the Data Update Scripts to all Forems by default.
      constraints(->(_request) { FeatureFlag.enabled?(:data_update_scripts) }) do
        resources :data_update_scripts, only: %i[index show] do
          member do
            post :force_run
          end
        end
      end

      # NOTE: @citizen428 The next two resources have a temporary constraint
      # while profile generalization is still WIP
      constraints(->(_request) { FeatureFlag.enabled?(:profile_admin) }) do
        resources :profile_field_groups, only: %i[update create destroy]
        resources :profile_fields, only: %i[index update create destroy]
      end

      # @ridhwana end of routes that will be deleted once we remove the admin_restructure feature flag

      # @ridhwana Feature Flag that implements the updated routes for the admin restructure is a work in progress.
      constraints(->(_request) { FeatureFlag.enabled?(:admin_restructure) }) do
        scope path: :content_manager, as: "content_manager" do
          resources :articles, only: %i[index show update]
          resources :badges, only: %i[index edit update new create]
          resources :badge_achievements, only: %i[index destroy]
          get "/badge_achievements/award_badges", to: "badge_achievements#award"
          post "/badge_achievements/award_badges", to: "badge_achievements#award_badges"
          resources :comments, only: [:index]
          resources :organizations, only: %i[index show] do
            member do
              patch "update_org_credits"
            end
          end
          resources :podcasts, only: %i[index edit update destroy] do
            member do
              post :fetch
              post :add_owner
            end
          end
          resources :tags, only: %i[index new create update edit] do
            resource :moderator, only: %i[create destroy], module: "tags"
          end
        end

        scope path: :customization, as: "customization" do
          resource :config
          resources :display_ads, only: %i[index edit update new create destroy]
          resources :html_variants, only: %i[index edit update new create show destroy]
          resources :navigation_links, only: %i[index update create destroy]
          resources :pages, only: %i[index new create edit update destroy]

          # NOTE: @citizen428 The next two resources have a temporary constraint
          # while profile generalization is still WIP
          constraints(->(_request) { FeatureFlag.enabled?(:profile_admin) }) do
            resources :profile_field_groups, only: %i[update create destroy]
            resources :profile_fields, only: %i[index update create destroy]
          end
        end

        scope path: :moderation, as: "moderation" do
          resources :reports, only: %i[index show], controller: "feedback_messages" do
            collection do
              post "send_email"
              post "create_note"
              post "save_status"
            end
          end
          resources :mods, only: %i[index update]
          resources :moderator_actions, only: %i[index]
          resources :privileged_reactions, only: %i[index]
        end

        scope path: :advanced, as: "advanced" do
          resources :broadcasts
          resources :response_templates, only: %i[index new edit create update destroy]
          resources :secrets, only: %i[index]
          put "secrets", to: "secrets#update"
          resources :sponsorships, only: %i[index edit update new create destroy]
          resources :tools, only: %i[index create] do
            collection do
              post "bust_cache"
            end
          end
          resources :webhook_endpoints, only: :index

          # We do not expose the Data Update Scripts to all Forems by default.
          constraints(->(_request) { FeatureFlag.enabled?(:data_update_scripts) }) do
            resources :data_update_scripts, only: %i[index show] do
              member do
                post :force_run
              end
            end
          end
        end

        scope path: :apps do
          resources :chat_channels, only: %i[index create update destroy] do
            member do
              delete :remove_user
            end
          end
          resources :events, only: %i[index create update new edit]
          resources :listings, only: %i[index edit update destroy]
          resources :listing_categories, only: %i[index edit update new create
                                                  destroy], path: "listings/categories"
          resources :welcome, only: %i[index create]
        end
      end
    end

    namespace :stories, defaults: { format: "json" } do
      resource :feed, only: [:show] do
        get ":timeframe", to: "feeds#show"
      end
    end

    namespace :api, defaults: { format: "json" } do
      scope module: :v0,
            constraints: ApiConstraints.new(version: 0, default: true) do
        resources :articles, only: %i[index show create update] do
          collection do
            get "me(/:status)", to: "articles#me", as: :me, constraints: { status: /published|unpublished|all/ }
            get "/:username/:slug", to: "articles#show_by_slug", as: :slug
            get "/latest", to: "articles#index", defaults: { sort: "desc" }
          end
        end
        resources :comments, only: %i[index show]
        resources :videos, only: [:index]
        resources :podcast_episodes, only: [:index]
        resources :users, only: %i[show] do
          collection do
            get :me
          end
        end
        resources :tags, only: [:index]
        resources :follows, only: [:create] do
          collection do
            get :tags
          end
        end
        namespace :followers do
          get :users
          get :organizations
        end
        resources :readinglist, only: [:index]
        resources :webhooks, only: %i[index create show destroy]

        resources :listings, only: %i[index show create update]
        get "/listings/category/:category", to: "listings#index", as: :listings_category
        get "/analytics/totals", to: "analytics#totals"
        get "/analytics/historical", to: "analytics#historical"
        get "/analytics/past_day", to: "analytics#past_day"
        get "/analytics/referrers", to: "analytics#referrers"

        resources :health_checks, only: [] do
          collection do
            get :app
            get :search
            get :database
            get :cache
          end
        end

        resources :profile_images, only: %i[show], param: :username
        resources :organizations, only: [:show], param: :username do
          resources :users, only: [:index], to: "organizations#users"
          resources :listings, only: [:index], to: "organizations#listings"
          resources :articles, only: [:index], to: "organizations#articles"
        end

        namespace :admin do
          resource :config, only: %i[show update], defaults: { format: :json }
        end
      end
    end

    namespace :notifications do
      resources :counts, only: [:index]
      resources :reads, only: [:create]
    end

    namespace :incoming_webhooks do
      get "/mailchimp/:secret/unsubscribe", to: "mailchimp_unsubscribes#index", as: :mailchimp_unsubscribe_check
      post "/mailchimp/:secret/unsubscribe", to: "mailchimp_unsubscribes#create", as: :mailchimp_unsubscribe
    end

    resources :messages, only: [:create]
    resources :chat_channels, only: %i[index show create update]
    resources :chat_channel_memberships, only: %i[index create edit update destroy]
    resources :articles, only: %i[update create destroy] do
      patch "/admin_unpublish", to: "articles#admin_unpublish"
    end
    resources :article_mutes, only: %i[update]
    resources :comments, only: %i[create update destroy] do
      patch "/hide", to: "comments#hide"
      patch "/unhide", to: "comments#unhide"
      patch "/admin_delete", to: "comments#admin_delete"
      collection do
        post "/moderator_create", to: "comments#moderator_create"
      end
    end
    resources :comment_mutes, only: %i[update]
    resources :users, only: %i[index], defaults: { format: :json } do # internal API
      constraints(-> { FeatureFlag.enabled?(:mobile_notifications) }) do
        collection do
          resources :devices, only: %i[create destroy]
        end
      end
    end
    resources :users, only: %i[update]
    resources :reactions, only: %i[index create]
    resources :response_templates, only: %i[index create edit update destroy]
    resources :feedback_messages, only: %i[index create]
    resources :organizations, only: %i[update create destroy]
    resources :followed_articles, only: [:index]
    resources :follows, only: %i[show create] do
      collection do
        get "/bulk_show", to: "follows#bulk_show"
        patch "/bulk_update", to: "follows#bulk_update"
      end
    end
    resources :image_uploads, only: [:create]
    resources :notifications, only: [:index]
    resources :tags, only: [:index] do
      collection do
        get "/onboarding", to: "tags#onboarding"
      end
    end
    resources :stripe_active_cards, only: %i[create update destroy]
    resources :github_repos, only: %i[index] do
      collection do
        post "/update_or_create", to: "github_repos#update_or_create"
      end
    end
    resources :events, only: %i[index show]
    resources :videos, only: %i[index create new]
    resources :video_states, only: [:create]
    resources :twilio_tokens, only: [:show]
    resources :html_variant_trials, only: [:create]
    resources :html_variant_successes, only: [:create]
    resources :tag_adjustments, only: %i[create destroy]
    resources :rating_votes, only: [:create]
    resources :page_views, only: %i[create update]
    resources :listings, only: %i[index new create edit update destroy dashboard]
    resources :credits, only: %i[index new create] do
      get "purchase", on: :collection, to: "credits#new"
    end
    resources :reading_list_items, only: [:update]
    resources :poll_votes, only: %i[show create]
    resources :poll_skips, only: [:create]
    resources :profile_pins, only: %i[create update]
    resources :partnerships, only: %i[index create show], param: :option
    resources :display_ad_events, only: [:create]
    resources :badges, only: [:index]
    resources :user_blocks, param: :blocked_id, only: %i[show create destroy]
    resources :podcasts, only: %i[new create]
    resources :article_approvals, only: %i[create]
    resources :video_chats, only: %i[show]
    resources :sidebars, only: %i[show]
    resources :user_subscriptions, only: %i[create] do
      collection do
        get "/subscribed", action: "subscribed"
      end
    end
    namespace :followings, defaults: { format: :json } do
      get :users
      get :tags
      get :organizations
      get :podcasts
    end

    resource :onboarding, only: :show
    resources :profiles, only: %i[update]
    resources :profile_field_groups, only: %i[index], defaults: { format: :json }

    resources :liquid_tags, only: %i[index], defaults: { format: :json }

    get "/verify_email_ownership", to: "email_authorizations#verify", as: :verify_email_authorizations
    get "/search/tags", to: "search#tags"
    get "/search/chat_channels", to: "search#chat_channels"
    get "/search/listings", to: "search#listings"
    get "/search/users", to: "search#users"
    get "/search/usernames", to: "search#usernames"
    get "/search/feed_content", to: "search#feed_content"
    get "/search/reactions", to: "search#reactions"
    get "/chat_channel_memberships/find_by_chat_channel_id", to: "chat_channel_memberships#find_by_chat_channel_id"
    get "/listings/dashboard", to: "listings#dashboard"
    get "/listings/:category", to: "listings#index", as: :listing_category
    get "/listings/:category/:slug", to: "listings#index", as: :listing_slug
    get "/listings/:category/:slug/:view", to: "listings#index",
                                           constraints: { view: /moderate/ }
    get "/listings/:category/:slug/delete_confirm", to: "listings#delete_confirm"
    delete "/listings/:category/:slug", to: "listings#destroy"
    get "/notifications/:filter", to: "notifications#index"
    get "/notifications/:filter/:org_id", to: "notifications#index"
    get "/notification_subscriptions/:notifiable_type/:notifiable_id", to: "notification_subscriptions#show"
    post "/notification_subscriptions/:notifiable_type/:notifiable_id", to: "notification_subscriptions#upsert"
    patch "/onboarding_update", to: "users#onboarding_update"
    patch "/onboarding_checkbox_update", to: "users#onboarding_checkbox_update"
    get "email_subscriptions/unsubscribe"
    post "/chat_channels/:id/moderate", to: "chat_channels#moderate"
    post "/chat_channels/:id/open", to: "chat_channels#open"
    get "/connect", to: "chat_channels#index"
    get "/connect/:slug", to: "chat_channels#index"
    get "/chat_channels/:id/channel_info", to: "chat_channels#channel_info", as: :chat_channel_info
    post "/chat_channels/create_chat", to: "chat_channels#create_chat"
    post "/chat_channels/block_chat", to: "chat_channels#block_chat"
    post "/chat_channel_memberships/remove_membership", to: "chat_channel_memberships#remove_membership"
    post "/chat_channel_memberships/add_membership", to: "chat_channel_memberships#add_membership"
    post "/join_chat_channel", to: "chat_channel_memberships#join_channel"
    delete "/messages/:id", to: "messages#destroy"
    patch "/messages/:id", to: "messages#update"
    get "/internal", to: redirect("/admin")
    get "/internal/:path", to: redirect("/admin/%{path}")

    post "/pusher/auth", to: "pusher#auth"

    # Chat channel
    patch "/chat_channels/update_channel/:id", to: "chat_channels#update_channel"
    post "/create_channel", to: "chat_channels#create_channel"

    # Chat Channel Membership json response
    get "/chat_channel_memberships/chat_channel_info/:id", to: "chat_channel_memberships#chat_channel_info"
    post "/chat_channel_memberships/create_membership_request", to: "chat_channel_memberships#create_membership_request"
    patch "/chat_channel_memberships/leave_membership/:id", to: "chat_channel_memberships#leave_membership"
    patch "/chat_channel_memberships/update_membership/:id", to: "chat_channel_memberships#update_membership"
    get "/channel_request_info/", to: "chat_channel_memberships#request_details"
    patch "/chat_channel_memberships/update_membership_role/:id", to: "chat_channel_memberships#update_membership_role"
    get "/join_channel_invitation/:channel_slug", to: "chat_channel_memberships#join_channel_invitation"
    post "/joining_invitation_response", to: "chat_channel_memberships#joining_invitation_response"

    get "/social_previews/article/:id", to: "social_previews#article", as: :article_social_preview
    get "/social_previews/user/:id", to: "social_previews#user", as: :user_social_preview
    get "/social_previews/organization/:id", to: "social_previews#organization", as: :organization_social_preview
    get "/social_previews/tag/:id", to: "social_previews#tag", as: :tag_social_preview
    get "/social_previews/listing/:id", to: "social_previews#listing", as: :listing_social_preview
    get "/social_previews/comment/:id", to: "social_previews#comment", as: :comment_social_preview

    get "/async_info/base_data", controller: "async_info#base_data", defaults: { format: :json }
    get "/async_info/shell_version", controller: "async_info#shell_version", defaults: { format: :json }

    # Settings
    post "users/join_org", to: "users#join_org"
    post "users/leave_org/:organization_id", to: "users#leave_org", as: :users_leave_org
    post "users/add_org_admin", to: "users#add_org_admin"
    post "users/remove_org_admin", to: "users#remove_org_admin"
    post "users/remove_from_org", to: "users#remove_from_org"
    delete "users/remove_identity", to: "users#remove_identity"
    post "users/request_destroy", to: "users#request_destroy", as: :user_request_destroy
    get "users/confirm_destroy/:token", to: "users#confirm_destroy", as: :user_confirm_destroy
    delete "users/full_delete", to: "users#full_delete", as: :user_full_delete
    post "organizations/generate_new_secret", to: "organizations#generate_new_secret"
    post "users/api_secrets", to: "api_secrets#create", as: :users_api_secrets
    delete "users/api_secrets/:id", to: "api_secrets#destroy", as: :users_api_secret
    post "users/update_password", to: "users#update_password", as: :user_update_password

    # The priority is based upon order of creation: first created -> highest priority.
    # See how all your routes lay out with "rake routes".

    # You can have the root of your site routed with "root
    get "/robots.:format", to: "pages#robots"
    get "/api", to: redirect("https://docs.forem.com/api")
    get "/privacy", to: "pages#privacy"
    get "/terms", to: "pages#terms"
    get "/contact", to: "pages#contact"
    get "/code-of-conduct", to: "pages#code_of_conduct"
    get "/report-abuse", to: "pages#report_abuse"
    get "/welcome", to: "pages#welcome"
    get "/challenge", to: "pages#challenge"
    get "/checkin", to: "pages#checkin"
    get "/badge", to: "pages#badge", as: :pages_badge
    get "/💸", to: redirect("t/hiring")
    get "/survey", to: redirect("https://dev.to/ben/final-thoughts-on-the-state-of-the-web-survey-44nn")
    get "/events", to: "events#index"
    get "/workshops", to: redirect("events")
    get "/sponsors", to: "pages#sponsors"
    get "/search", to: "stories#search"
    post "articles/preview", to: "articles#preview"
    post "comments/preview", to: "comments#preview"

    # These routes are required by links in the sites and will most likely to be replaced by a db page
    get "/about", to: "pages#about"
    get "/about-listings", to: "pages#about_listings"
    get "/security", to: "pages#bounty"
    get "/community-moderation", to: "pages#community_moderation"
    get "/faq", to: "pages#faq"
    get "/page/post-a-job", to: "pages#post_a_job"
    get "/tag-moderation", to: "pages#tag_moderation"

    # NOTE: can't remove the hardcoded URL here as SiteConfig is not available here, we should eventually
    # setup dynamic redirects, see <https://github.com/thepracticaldev/dev.to/issues/7267>
    get "/shop", to: redirect("https://shop.dev.to")

    get "/mod", to: "moderations#index", as: :mod
    get "/mod/:tag", to: "moderations#index"

    post "/fallback_activity_recorder", to: "ga_events#create"

    get "/page/:slug", to: "pages#show"

    # TODO: [forem/teamsmash] removed the /p/information view and added a redirect for SEO purposes.
    # We need to remove this route in 2 months (11 January 2021).
    get "/p/information", to: redirect("/about")

    scope "p" do
      pages_actions = %w[welcome editor_guide publishing_from_rss_guide markdown_basics badges].freeze
      pages_actions.each do |action|
        get action, action: action, controller: "pages"
      end
    end

    # Redirect previous settings changed after https://github.com/forem/forem/pull/11347
    get "/settings/integrations", to: redirect("/settings/extensions")
    get "/settings/misc", to: redirect("/settings")
    get "/settings/publishing-from-rss", to: redirect("/settings/extensions")
    get "/settings/ux", to: redirect("/settings/customization")

    get "/settings/(:tab)", to: "users#edit", as: :user_settings
    get "/settings/:tab/:org_id", to: "users#edit", constraints: { tab: /organization/ }
    get "/settings/:tab/:id", to: "users#edit", constraints: { tab: /response-templates/ }
    get "/signout_confirm", to: "users#signout_confirm"
    get "/dashboard", to: "dashboards#show"
    get "/dashboard/analytics", to: "dashboards#analytics"
    get "dashboard/analytics/org/:org_id", to: "dashboards#analytics", as: :dashboard_analytics_org
    get "dashboard/following", to: "dashboards#following_tags"
    get "dashboard/following_tags", to: "dashboards#following_tags"
    get "dashboard/following_users", to: "dashboards#following_users"
    get "dashboard/following_organizations", to: "dashboards#following_organizations"
    get "dashboard/following_podcasts", to: "dashboards#following_podcasts"
    get "/dashboard/subscriptions", to: "dashboards#subscriptions"
    get "/dashboard/:which", to: "dashboards#followers", constraints: { which: /user_followers/ }
    get "/dashboard/:which/:org_id", to: "dashboards#show",
                                     constraints: {
                                       which: /organization/
                                     }
    get "/dashboard/:username", to: "dashboards#show"

    # for testing rails mailers
    unless Rails.env.production?
      get "/rails/mailers", to: "rails/mailers#index"
      get "/rails/mailers/*path", to: "rails/mailers#preview"
    end

    get "/embed/:embeddable", to: "liquid_embeds#show", as: "liquid_embed"

    # serviceworkers
    get "/serviceworker", to: "service_worker#index"
    get "/manifest", to: "service_worker#manifest"

    # open search
    get "/open-search", to: "open_search#show",
                        constraints: { format: /xml/ }

    get "/new", to: "articles#new"
    get "/new/:template", to: "articles#new"

    get "/pod", to: "podcast_episodes#index"
    get "/podcasts", to: redirect("pod")
    get "/readinglist", to: "reading_list_items#index"
    get "/readinglist/:view", to: "reading_list_items#index", constraints: { view: /archive/ }

    get "/feed", to: "articles#feed", as: "feed", defaults: { format: "rss" }
    get "/feed/tag/:tag", to: "articles#feed", as: "tag_feed", defaults: { format: "rss" }
    get "/feed/latest", to: "articles#feed", as: "latest_feed", defaults: { format: "rss" }
    get "/feed/:username", to: "articles#feed", as: "user_feed", defaults: { format: "rss" }
    get "/rss", to: "articles#feed", defaults: { format: "rss" }

    get "/tag/:tag", to: "stories#index"
    get "/t/:tag", to: "stories#index", as: :tag
    get "/t/:tag/edit", to: "tags#edit"
    get "/t/:tag/admin", to: "tags#admin"
    patch "/tag/:id", to: "tags#update"
    get "/t/:tag/top/:timeframe", to: "stories#index"
    get "/t/:tag/page/:page", to: "stories#index"
    get "/t/:tag/:timeframe", to: "stories#index",
                              constraints: { timeframe: /latest/ }

    get "/badge/:slug", to: "badges#show", as: :badge

    get "/top/:timeframe", to: "stories#index"

    get "/:timeframe", to: "stories#index", constraints: { timeframe: /latest/ }

    get "/:username/series", to: "collections#index", as: "user_series"
    get "/:username/series/:id", to: "collections#show"

    # Legacy comment format (might still be floating around app, and external links)
    get "/:username/:slug/comments", to: "comments#index"
    get "/:username/:slug/comments/:id_code", to: "comments#index"
    get "/:username/:slug/comments/:id_code/edit", to: "comments#edit"
    get "/:username/:slug/comments/:id_code/delete_confirm", to: "comments#delete_confirm"

    # Proper link format
    get "/:username/comment/:id_code", to: "comments#index"
    get "/:username/comment/:id_code/edit", to: "comments#edit"
    get "/:username/comment/:id_code/delete_confirm", to: "comments#delete_confirm"
    get "/:username/comment/:id_code/mod", to: "moderations#comment"
    get "/:username/comment/:id_code/settings", to: "comments#settings"

    get "/:username/:slug/:view", to: "stories#show",
                                  constraints: { view: /moderate/ }
    get "/:username/:slug/mod", to: "moderations#article"
    get "/:username/:slug/actions_panel", to: "moderations#actions_panel"
    get "/:username/:slug/manage", to: "articles#manage"
    get "/:username/:slug/edit", to: "articles#edit"
    get "/:username/:slug/delete_confirm", to: "articles#delete_confirm"
    get "/:username/:slug/stats", to: "articles#stats"
    get "/:username/:view", to: "stories#index",
                            constraints: { view: /comments|moderate|admin/ }
    get "/:username/:slug", to: "stories#show"
    get "/:sitemap", to: "sitemaps#show",
                     constraints: { format: /xml/, sitemap: /sitemap-.+/ }
    get "/:username", to: "stories#index", as: "user_profile"

    root "stories#index"
  end
end

# rubocop:enable Metrics/BlockLength
Rails.application.routes.draw do
  resources :users
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
end
using GraphQL::Pro::Routes

Rails.application.routes.draw do
  root to: "landings#show"
  post "/graphql", to: "graphql#query"
  if Rails.env.development?
    mount GraphiQL::Rails::Engine, at: "/graphiql", graphql_path: "/graphql"
  end

  # TODO: authenticate this endpoint!
  mount ChatSchema.dashboard, at: "/graphql/dashboard"

  mount ChatSchema.pusher_webhooks_client, at: "/pusher_webhooks"
  mount ChatSchema.operation_store_sync, at: "/graphql/sync"
end
RailsRoot::Application.routes.draw do
  # The priority is based upon order of creation:
  # first created -> highest priority.

  # Sample of regular route:
  #   match 'products/:id' => 'catalog#view'
  # Keep in mind you can assign values other than :controller and :action

  # Sample of named route:
  #   match 'products/:id/purchase' => 'catalog#purchase', :as => :purchase
  # This route can be invoked with purchase_url(:id => product.id)

  # Sample resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Sample resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Sample resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Sample resource route with more complex sub-resources
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', :on => :collection
  #     end
  #   end

  # Sample resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end

  # You can have the root of your site routed with "root"
  # just remember to delete public/index.html.
  # root :to => 'welcome#index'

  # See how all your routes lay out with "rake routes"

  # This is a legacy wild controller route that's not recommended for RESTful applications.
  # Note: This route will make all actions in every controller accessible via GET requests.
  # match ':controller(/:action(/:id(.:format)))'
end
WatchMyPencil::Application.routes.draw do

  get "home/index"
  get "home/test"
  get "home/create"
  post "home/join_action"
  post "home/create_action"
  post "game/start"
  post "game/endturn"
  post "game/newround"

  get "game/index"
  post "game/auth"

  match 'home' => 'home#index', :as => :home
  match 'game/joining' => 'game#joining', :as => :joining
  match 'home/create' => 'game#create', :as => :create
  match 'game/index' => 'game#index', :as => :game

  # The priority is based upon order of creation:
  # first created -> highest priority.

  # Sample of regular route:
  #   match 'products/:id' => 'catalog#view'
  # Keep in mind you can assign values other than :controller and :action

  # Sample of named route:
  #   match 'products/:id/purchase' => 'catalog#purchase', :as => :purchase
  # This route can be invoked with purchase_url(:id => product.id)

  # Sample resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Sample resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Sample resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Sample resource route with more complex sub-resources
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', :on => :collection
  #     end
  #   end

  # Sample resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end

  # You can have the root of your site routed with "root"
  # just remember to delete public/index.html.
  root :to => 'home#index'

  # See how all your routes lay out with "rake routes"

  # This is a legacy wild controller route that's not recommended for RESTful applications.
  # Note: This route will make all actions in every controller accessible via GET requests.
  # match ':controller(/:action(/:id))(.:format)'
end
Rails.application.routes.draw do
  # For details on the DSL available within this file, see https://guides.rubyonrails.org/routing.html
end
Rails.application.routes.draw do
  get 'welcome/index'
  
  resources :publishers

  # The priority is based upon order of creation: first created -> highest priority.
  # See how all your routes lay out with "rake routes".

  # You can have the root of your site routed with "root"
  #root 'welcome#index'

  # Example of regular route:
  #   get 'products/:id' => 'catalog#view'

  # Example of named route that can be invoked with purchase_url(id: product.id)
  #   get 'products/:id/purchase' => 'catalog#purchase', as: :purchase

  # Example resource route (maps HTTP verbs to controller actions automatically):
  #   resources :products

  # Example resource route with options:
  #   resources :products do
  #     member do
  #       get 'short'
  #       post 'toggle'
  #     end
  #
  #     collection do
  #       get 'sold'
  #     end
  #   end

  # Example resource route with sub-resources:
  #   resources :products do
  #     resources :comments, :sales
  #     resource :seller
  #   end

  # Example resource route with more complex sub-resources:
  #   resources :products do
  #     resources :comments
  #     resources :sales do
  #       get 'recent', on: :collection
  #     end
  #   end

  # Example resource route with concerns:
  #   concern :toggleable do
  #     post 'toggle'
  #   end
  #   resources :posts, concerns: :toggleable
  #   resources :photos, concerns: :toggleable

  # Example resource route within a namespace:
  #   namespace :admin do
  #     # Directs /admin/products/* to Admin::ProductsController
  #     # (app/controllers/admin/products_controller.rb)
  #     resources :products
  #   end
end
